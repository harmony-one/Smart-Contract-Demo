{"id":"../node_modules/@harmony-js/crypto/dist/random.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/random.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/src/random.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/package.json","includedInParent":true,"mtime":1605232158322},{"name":"crypto","loc":{"line":21,"column":25},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/random.js","resolved":"/home/rachit/Projects/demo/web/node_modules/crypto-browserify/index.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-crypto\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = void 0;\n/**\n * Uses JS-native CSPRNG to generate a specified number of bytes.\n * @NOTE\n * this method throws if no PRNG is available.\n * @param {Number} bytes bytes number to generate\n * @return {String} ramdom hex string\n */\nexports.randomBytes = function (bytes) {\n    var randBz;\n    if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {\n        randBz = window.crypto.getRandomValues(new Uint8Array(bytes));\n    }\n    else if (typeof require !== 'undefined') {\n        randBz = require('crypto').randomBytes(bytes);\n    }\n    else {\n        throw new Error('Unable to generate safe random numbers.');\n    }\n    var randStr = '';\n    for (var i = 0; i < bytes; i += 1) {\n        randStr += (\"00\" + randBz[i].toString(16)).slice(-2);\n    }\n    return randStr;\n};\n"},"sourceMaps":{"js":{"version":3,"file":"random.js","sourceRoot":"","sources":["../src/random.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAEH;;;;;;GAMG;AACU,QAAA,WAAW,GAAG,UAAC,KAAa;IACvC,IAAI,MAA6B,CAAC;IAElC,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;QACnF,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;KAC/D;SAAM,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;QACzC,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAC/C;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;KAC5D;IAED,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE;QACjC,OAAO,IAAI,CAAA,OAAK,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAG,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACpD;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-crypto\n */\n\n/**\n * Uses JS-native CSPRNG to generate a specified number of bytes.\n * @NOTE\n * this method throws if no PRNG is available.\n * @param {Number} bytes bytes number to generate\n * @return {String} ramdom hex string\n */\nexport const randomBytes = (bytes: number): string => {\n  let randBz: number[] | Uint8Array;\n\n  if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {\n    randBz = window.crypto.getRandomValues(new Uint8Array(bytes));\n  } else if (typeof require !== 'undefined') {\n    randBz = require('crypto').randomBytes(bytes);\n  } else {\n    throw new Error('Unable to generate safe random numbers.');\n  }\n\n  let randStr = '';\n  for (let i = 0; i < bytes; i += 1) {\n    randStr += `00${randBz[i].toString(16)}`.slice(-2);\n  }\n\n  return randStr;\n};\n"]}},"error":null,"hash":"8aaf509606d57e6ee554a9c2cfeb2ea4","cacheData":{"env":{}}}
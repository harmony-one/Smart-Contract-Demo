{"id":"../node_modules/@harmony-js/transaction/dist/factory.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/factory.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/src/factory.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/package.json","includedInParent":true,"mtime":1605232158322},{"name":"@harmony-js/crypto","loc":{"line":10,"column":23},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/factory.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/index.js"},{"name":"./transaction","loc":{"line":11,"column":28},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/factory.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/transaction.js"},{"name":"./shardingTransaction","loc":{"line":12,"column":36},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/factory.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/shardingTransaction.js"},{"name":"./types","loc":{"line":13,"column":22},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/factory.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/types.js"}],"generated":{"js":"\"use strict\";\n/**\n * ## hhahaha\n *\n * @packageDocumentation\n * @module harmony-transaction\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFactory = void 0;\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar transaction_1 = require(\"./transaction\");\nvar shardingTransaction_1 = require(\"./shardingTransaction\");\nvar types_1 = require(\"./types\");\nvar TransactionFactory = /** @class */ (function () {\n    function TransactionFactory(messenger) {\n        this.messenger = messenger;\n    }\n    TransactionFactory.getContractAddress = function (tx) {\n        var _a = tx.txParams, from = _a.from, nonce = _a.nonce;\n        return crypto_1.getAddress(crypto_1.getContractAddress(crypto_1.getAddress(from).checksum, Number.parseInt(\"\" + nonce, 10))).checksum;\n    };\n    TransactionFactory.prototype.setMessenger = function (messenger) {\n        this.messenger = messenger;\n    };\n    /**\n     * Create a new Transaction\n     * @params\n     * ```\n     * // to: Address of the receiver\n     * // value: value transferred in wei\n     * // gasLimit: the maximum gas would pay, can use string\n     * // shardID: send token from shardID\n     * // toShardId: send token to shardID\n     * // gasPrice: you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n     * ```\n     *\n     * @example\n     * ```javascript\n     * const txn = hmy.transactions.newTx({\n     *   to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n     *   value: '10000',\n     *   gasLimit: '210000',\n     *   shardID: 0,\n     *   toShardID: 0,\n     *   gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n     * });\n     * ```\n     */\n    TransactionFactory.prototype.newTx = function (txParams, sharding) {\n        if (sharding === void 0) { sharding = false; }\n        if (!sharding) {\n            return new transaction_1.Transaction(txParams, this.messenger, types_1.TxStatus.INTIALIZED);\n        }\n        return new shardingTransaction_1.ShardingTransaction(txParams, this.messenger, types_1.TxStatus.INTIALIZED);\n    };\n    /**\n     * clone the transaction\n     *\n     * @param transaction\n     *\n     * @example\n     * ```javascript\n     * const cloneTxn = hmy.transactions.clone(txn);\n     * console.log(cloneTxn)\n     * ```\n     */\n    TransactionFactory.prototype.clone = function (transaction) {\n        return new transaction_1.Transaction(transaction.txParams, this.messenger, types_1.TxStatus.INTIALIZED);\n    };\n    /**\n     *\n     * @example\n     * ```javascript\n     * txHash = '0xf8698085174876e8008252088080949d72989b68777a1f3ffd6f1db079f1928373ee52830186a08027a0ab8229ff5d5240948098f26372eaed9ab2e9be23e8594b08e358ca56a47f8ae9a0084e5c4d1fec496af444423d8a714f65c079260ff01a1be1de7005dd424adf44'\n     *\n     * const recoverTx = hmy.transactions.recover(txHash);\n     * console.log(recoverTx);\n     * ```\n     */\n    TransactionFactory.prototype.recover = function (txHash) {\n        var newTxn = new transaction_1.Transaction({}, this.messenger, types_1.TxStatus.INTIALIZED);\n        newTxn.recover(txHash);\n        return newTxn;\n    };\n    return TransactionFactory;\n}());\nexports.TransactionFactory = TransactionFactory;\n"},"sourceMaps":{"js":{"version":3,"file":"factory.js","sourceRoot":"","sources":["../src/factory.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;AAEH,6CAAoE;AAEpE,6CAA4C;AAC5C,6DAA4D;AAC5D,iCAA6C;AAE7C;IASE,4BAAY,SAAoB;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAVM,qCAAkB,GAAzB,UAA0B,EAAe;QACjC,IAAA,KAAkB,EAAE,CAAC,QAAQ,EAA3B,IAAI,UAAA,EAAE,KAAK,WAAgB,CAAC;QACpC,OAAO,mBAAU,CACf,2BAAkB,CAAC,mBAAU,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAG,KAAO,EAAE,EAAE,CAAC,CAAC,CAC/E,CAAC,QAAQ,CAAC;IACb,CAAC;IAMD,yCAAY,GAAZ,UAAa,SAAoB;QAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,kCAAK,GAAL,UAAM,QAAyB,EAAE,QAAyB;QAAzB,yBAAA,EAAA,gBAAyB;QACxD,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,IAAI,yBAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,gBAAQ,CAAC,UAAU,CAAC,CAAC;SACvE;QACD,OAAO,IAAI,yCAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,gBAAQ,CAAC,UAAU,CAAC,CAAC;IAChF,CAAC;IAED;;;;;;;;;;OAUG;IACH,kCAAK,GAAL,UAAM,WAAwB;QAC5B,OAAO,IAAI,yBAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,gBAAQ,CAAC,UAAU,CAAC,CAAC;IACpF,CAAC;IAED;;;;;;;;;OASG;IACH,oCAAO,GAAP,UAAQ,MAAc;QACpB,IAAM,MAAM,GAAG,IAAI,yBAAW,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,gBAAQ,CAAC,UAAU,CAAC,CAAC;QACxE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvB,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,yBAAC;AAAD,CAAC,AA7ED,IA6EC;AA7EY,gDAAkB","sourcesContent":["/**\n * ## hhahaha\n *\n * @packageDocumentation\n * @module harmony-transaction\n */\n\nimport { getContractAddress, getAddress } from '@harmony-js/crypto';\nimport { Messenger } from '@harmony-js/network';\nimport { Transaction } from './transaction';\nimport { ShardingTransaction } from './shardingTransaction';\nimport { TxParams, TxStatus } from './types';\n\nexport class TransactionFactory {\n  static getContractAddress(tx: Transaction) {\n    const { from, nonce } = tx.txParams;\n    return getAddress(\n      getContractAddress(getAddress(from).checksum, Number.parseInt(`${nonce}`, 10)),\n    ).checksum;\n  }\n\n  messenger: Messenger;\n  constructor(messenger: Messenger) {\n    this.messenger = messenger;\n  }\n  setMessenger(messenger: Messenger) {\n    this.messenger = messenger;\n  }\n\n  /**\n   * Create a new Transaction\n   * @params\n   * ```\n   * // to: Address of the receiver\n   * // value: value transferred in wei\n   * // gasLimit: the maximum gas would pay, can use string\n   * // shardID: send token from shardID\n   * // toShardId: send token to shardID\n   * // gasPrice: you can use Unit class, and use Gwei, then remember to use toWei(), which will be transformed to BN\n   * ```\n   *\n   * @example\n   * ```javascript\n   * const txn = hmy.transactions.newTx({\n   *   to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n   *   value: '10000',\n   *   gasLimit: '210000',\n   *   shardID: 0,\n   *   toShardID: 0,\n   *   gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n   * });\n   * ```\n   */\n  newTx(txParams?: TxParams | any, sharding: boolean = false): Transaction {\n    if (!sharding) {\n      return new Transaction(txParams, this.messenger, TxStatus.INTIALIZED);\n    }\n    return new ShardingTransaction(txParams, this.messenger, TxStatus.INTIALIZED);\n  }\n\n  /**\n   * clone the transaction\n   *\n   * @param transaction\n   *\n   * @example\n   * ```javascript\n   * const cloneTxn = hmy.transactions.clone(txn);\n   * console.log(cloneTxn)\n   * ```\n   */\n  clone(transaction: Transaction): Transaction {\n    return new Transaction(transaction.txParams, this.messenger, TxStatus.INTIALIZED);\n  }\n\n  /**\n   *\n   * @example\n   * ```javascript\n   * txHash = '0xf8698085174876e8008252088080949d72989b68777a1f3ffd6f1db079f1928373ee52830186a08027a0ab8229ff5d5240948098f26372eaed9ab2e9be23e8594b08e358ca56a47f8ae9a0084e5c4d1fec496af444423d8a714f65c079260ff01a1be1de7005dd424adf44'\n   *\n   * const recoverTx = hmy.transactions.recover(txHash);\n   * console.log(recoverTx);\n   * ```\n   */\n  recover(txHash: string): Transaction {\n    const newTxn = new Transaction({}, this.messenger, TxStatus.INTIALIZED);\n    newTxn.recover(txHash);\n    return newTxn;\n  }\n}\n"]}},"error":null,"hash":"30bce63d5c3a51416f81042eceb8e35a","cacheData":{"env":{}}}
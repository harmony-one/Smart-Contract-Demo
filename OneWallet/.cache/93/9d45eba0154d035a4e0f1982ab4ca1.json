{"id":"../node_modules/@harmony-js/network/dist/types.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/types.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/src/types.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/package.json","includedInParent":true,"mtime":1605232158322}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n * @ignore\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SubscribeReturns = exports.MiddlewareType = void 0;\nvar MiddlewareType;\n(function (MiddlewareType) {\n    MiddlewareType[MiddlewareType[\"REQ\"] = 0] = \"REQ\";\n    MiddlewareType[MiddlewareType[\"RES\"] = 1] = \"RES\";\n})(MiddlewareType = exports.MiddlewareType || (exports.MiddlewareType = {}));\nvar SubscribeReturns;\n(function (SubscribeReturns) {\n    SubscribeReturns[\"all\"] = \"all\";\n    SubscribeReturns[\"id\"] = \"id\";\n    SubscribeReturns[\"method\"] = \"method\";\n})(SubscribeReturns = exports.SubscribeReturns || (exports.SubscribeReturns = {}));\n"},"sourceMaps":{"js":{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAOH,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,iDAAG,CAAA;IACH,iDAAG,CAAA;AACL,CAAC,EAHW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAGzB;AAED,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,+BAAW,CAAA;IACX,6BAAS,CAAA;IACT,qCAAiB,CAAA;AACnB,CAAC,EAJW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAI3B","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-network\n * @ignore\n */\n\nimport { RPCMethod, RPCErrorCode } from './rpcMethod/rpc';\n\nexport type ReqMiddleware = Map<string | RPCMethod | RegExp, any[]>;\nexport type ResMiddleware = Map<string | RPCMethod | RegExp, any[]>;\n\nexport enum MiddlewareType {\n  REQ,\n  RES,\n}\n\nexport enum SubscribeReturns {\n  all = 'all',\n  id = 'id',\n  method = 'method',\n}\n\nexport interface Middleware {\n  request: object;\n  response: object;\n}\n\nexport interface RPCRequestPayload<T> {\n  id: number;\n  jsonrpc: string;\n  method: RPCMethod | string;\n  params: T;\n}\n\nexport interface RPCRequestOptions {\n  headers: [];\n  method: string;\n}\n\nexport interface RPCRequest<T> {\n  url: string;\n  payload: RPCRequestPayload<T>;\n  options: RPCRequestOptions;\n}\n\nexport interface RPCResponseBase {\n  jsonrpc: string;\n  id: string;\n}\n\nexport interface RPCResponseBody<R, E> extends RPCResponseBase {\n  result: R;\n  error: E;\n}\n\nexport interface RPCError {\n  code: RPCErrorCode;\n  message: string;\n  data: any;\n}\n\nexport interface RPCResult {\n  resultString: string;\n  resultMap: Map<string, any>;\n  resultList: any[];\n  raw: any;\n}\n\nexport interface ShardingItem {\n  current: boolean;\n  shardID: number | string;\n  http: string;\n  ws: string;\n}\n"]}},"error":null,"hash":"de3df35472b35a3bcab888e7fd518bde","cacheData":{"env":{}}}
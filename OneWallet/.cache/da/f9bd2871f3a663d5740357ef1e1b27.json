{"id":"../node_modules/@harmony-js/core/dist/harmonyExtension.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmonyExtension.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/src/harmonyExtension.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":8,"column":22},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmonyExtension.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"@harmony-js/network","loc":{"line":9,"column":24},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmonyExtension.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/index.js"},{"name":"@harmony-js/crypto","loc":{"line":10,"column":42},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmonyExtension.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/index.js"},{"name":"@harmony-js/utils","loc":{"line":11,"column":41},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmonyExtension.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/utils/dist/index.js"},{"name":"@harmony-js/transaction","loc":{"line":12,"column":28},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmonyExtension.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/index.js"},{"name":"./blockchain","loc":{"line":13,"column":27},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmonyExtension.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/blockchain.js"},{"name":"@harmony-js/contract","loc":{"line":14,"column":25},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmonyExtension.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/contract/dist/index.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-core\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HarmonyExtension = exports.ExtensionType = void 0;\nvar tslib_1 = require(\"tslib\");\nvar network_1 = require(\"@harmony-js/network\");\nvar crypto = tslib_1.__importStar(require(\"@harmony-js/crypto\"));\nvar utils = tslib_1.__importStar(require(\"@harmony-js/utils\"));\nvar transaction_1 = require(\"@harmony-js/transaction\");\nvar blockchain_1 = require(\"./blockchain\");\nvar contract_1 = require(\"@harmony-js/contract\");\n/** @hidden */\nvar ExtensionType;\n(function (ExtensionType) {\n    ExtensionType[\"MathWallet\"] = \"MathWallet\";\n    ExtensionType[\"OneWallet\"] = \"OneWallet\";\n})(ExtensionType = exports.ExtensionType || (exports.ExtensionType = {}));\nvar HarmonyExtension = /** @class */ (function () {\n    /**\n     * Create an blockchain instance support wallet injection\n     *\n     * @param wallet could be MathWallet or OneWallet instance\n     * @param config (optional), using default `Chain_Id` and `Chain_Type`\n     *\n     * @example\n     * ```javascript\n     * // Using Mathwallet instance\n     * export const initEx = async() => {\n     *   hmyEx = new HarmonyExtension(window.harmony);\n     * }\n     * // Using OneWallet instance\n     * export const initEx = async() => {\n     *   hmyEx = new HarmonyExtension(window.onewallet);\n     * }\n     * ```\n     */\n    function HarmonyExtension(wallet, config) {\n        if (config === void 0) { config = {\n            chainId: utils.defaultConfig.Default.Chain_ID,\n            chainType: utils.defaultConfig.Default.Chain_Type,\n        }; }\n        this.extensionType = null;\n        this.wallet = wallet;\n        // check if it is mathwallet or onewallet\n        this.isExtension(this.wallet);\n        if (wallet.messenger) {\n            this.provider = wallet.messenger.provider;\n            this.messenger = wallet.messenger;\n        }\n        else {\n            this.provider = new network_1.Provider(config.chainUrl || wallet.network.chain_url).provider;\n            this.messenger = new network_1.Messenger(this.provider, config.chainType, config.chainId);\n        }\n        this.wallet.messenger = this.messenger;\n        this.blockchain = new blockchain_1.Blockchain(this.messenger);\n        this.transactions = new transaction_1.TransactionFactory(this.messenger);\n        this.contracts = new contract_1.ContractFactory(this.wallet);\n        this.crypto = crypto;\n        this.utils = utils;\n    }\n    /**\n     * Will change the provider for its module.\n     *\n     * @param provider a valid provider, you can replace it with your own working node\n     *\n     * @example\n     * ```javascript\n     * const tmp = hmyEx.setProvider('http://localhost:9500');\n     * ```\n     */\n    HarmonyExtension.prototype.setProvider = function (provider) {\n        this.provider = new network_1.Provider(provider).provider;\n        this.messenger.setProvider(this.provider);\n        this.setMessenger(this.messenger);\n    };\n    /**\n     * Change the Shard ID\n     *\n     * @example\n     * ```\n     * hmyEx.setShardID(2);\n     * ```\n     */\n    HarmonyExtension.prototype.setShardID = function (shardID) {\n        this.defaultShardID = shardID;\n        this.messenger.setDefaultShardID(this.defaultShardID);\n        this.setMessenger(this.messenger);\n    };\n    HarmonyExtension.prototype.isExtension = function (wallet) {\n        var _this = this;\n        var isExtension = false;\n        this.extensionType = null;\n        if (wallet.isMathWallet || wallet.isOneWallet) {\n            isExtension = true;\n            if (wallet.isMathWallet)\n                this.extensionType = ExtensionType.MathWallet;\n            else\n                this.extensionType = ExtensionType.OneWallet;\n            // remake signTransaction of MathWallet or OneWallet\n            var signTransaction_1 = this.wallet.signTransaction;\n            this.wallet.signTransaction = function (transaction, updateNonce, encodeMode, blockNumber) {\n                if (updateNonce === void 0) { updateNonce = true; }\n                if (encodeMode === void 0) { encodeMode = 'rlp'; }\n                if (blockNumber === void 0) { blockNumber = 'latest'; }\n                return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    var extensionAccount, nonce;\n                    return tslib_1.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.wallet.getAccount()];\n                            case 1:\n                                extensionAccount = _a.sent();\n                                if (!updateNonce) return [3 /*break*/, 3];\n                                return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.GetTransactionCount, [crypto.getAddress(extensionAccount.address).checksum, blockNumber], this.messenger.chainPrefix, typeof transaction.txParams.shardID === 'string'\n                                        ? Number.parseInt(transaction.txParams.shardID, 10)\n                                        : transaction.txParams.shardID)];\n                            case 2:\n                                nonce = _a.sent();\n                                transaction.setParams(tslib_1.__assign(tslib_1.__assign({}, transaction.txParams), { from: crypto.getAddress(extensionAccount.address).bech32, nonce: Number.parseInt(utils.hexToNumber(nonce.result), 10) }));\n                                return [3 /*break*/, 4];\n                            case 3:\n                                transaction.setParams(tslib_1.__assign(tslib_1.__assign({}, transaction.txParams), { from: crypto.getAddress(extensionAccount.address).bech32 }));\n                                _a.label = 4;\n                            case 4: return [2 /*return*/, signTransaction_1(transaction, false, encodeMode, blockNumber)];\n                        }\n                    });\n                });\n            };\n        }\n        if (!isExtension) {\n            throw new Error('Extension is not found');\n        }\n        return;\n    };\n    /**\n     * Get the wallet account\n     *\n     * @example\n     * ```javascript\n     * const account = hmyEx.login();\n     * console.log(account);\n     * ```\n     */\n    HarmonyExtension.prototype.login = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var account;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.wallet.getAccount()];\n                    case 1:\n                        account = _a.sent();\n                        // Use address\n                        return [2 /*return*/, account];\n                }\n            });\n        });\n    };\n    /**\n     * Log out the wallet account\n     *\n     * @example\n     * ```javascript\n     * hmyEx.logout();\n     * ```\n     */\n    HarmonyExtension.prototype.logout = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.wallet.forgetIdentity()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Set the sharding Structure\n     *\n     * @param shardingStructures The array of information of sharding structures\n     *\n     * @example\n     * ```javascript\n     * hmyEx.shardingStructures([\n     *   {\"current\":true,\"http\":\"http://127.0.0.1:9500\",\n     *    \"shardID\":0,\"ws\":\"ws://127.0.0.1:9800\"},\n     *   {\"current\":false,\"http\":\"http://127.0.0.1:9501\",\n     *    \"shardID\":1,\"ws\":\"ws://127.0.0.1:9801\"}\n     * ]);\n     * ```\n     */\n    HarmonyExtension.prototype.shardingStructures = function (shardingStructures) {\n        var e_1, _a;\n        try {\n            for (var shardingStructures_1 = tslib_1.__values(shardingStructures), shardingStructures_1_1 = shardingStructures_1.next(); !shardingStructures_1_1.done; shardingStructures_1_1 = shardingStructures_1.next()) {\n                var shard = shardingStructures_1_1.value;\n                var shardID = typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n                this.messenger.shardProviders.set(shardID, {\n                    current: shard.current !== undefined ? shard.current : false,\n                    shardID: shardID,\n                    http: shard.http,\n                    ws: shard.ws,\n                });\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (shardingStructures_1_1 && !shardingStructures_1_1.done && (_a = shardingStructures_1.return)) _a.call(shardingStructures_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.setMessenger(this.messenger);\n    };\n    /**@ignore*/\n    HarmonyExtension.prototype.setMessenger = function (messenger) {\n        this.blockchain.setMessenger(messenger);\n        this.wallet.messenger = messenger;\n        this.transactions.setMessenger(messenger);\n    };\n    return HarmonyExtension;\n}());\nexports.HarmonyExtension = HarmonyExtension;\n"},"sourceMaps":{"js":{"version":3,"file":"harmonyExtension.js","sourceRoot":"","sources":["../src/harmonyExtension.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-core\n */\n\nimport {\n  HttpProvider,\n  WSProvider,\n  Messenger,\n  Provider,\n  RPCMethod,\n  ShardingItem,\n} from '@harmony-js/network';\n\nimport * as crypto from '@harmony-js/crypto';\nimport * as utils from '@harmony-js/utils';\n\nimport { Transaction, TransactionFactory } from '@harmony-js/transaction';\nimport { Blockchain } from './blockchain';\nimport { ContractFactory } from '@harmony-js/contract';\nimport { HarmonyConfig } from './util';\n\n/** @hidden */\nexport enum ExtensionType {\n  MathWallet = 'MathWallet',\n  OneWallet = 'OneWallet',\n}\n\n/** @hidden */\nexport interface ExtensionAccount {\n  address: 'string';\n  name: 'string';\n}\n\n/** @hidden */\nexport interface ExtensionNetwork {\n  chain_url: string;\n  net_version: number;\n}\n\n/** @hidden */\nexport interface ExtensionInterface {\n  signTransaction: (\n    transaction: Transaction,\n    updateNonce: boolean,\n    encodeMode: string,\n    blockNumber: string,\n  ) => Promise<Transaction>;\n  getAccount: () => Promise<ExtensionAccount>;\n  forgetIdentity: () => Promise<void>;\n  messenger?: Messenger;\n  version: string;\n  isMathWallet?: boolean;\n  isOneWallet?: boolean;\n  network: ExtensionNetwork;\n}\n\nexport class HarmonyExtension {\n  /**@ignore*/\n  extensionType: ExtensionType | null;\n  /**@ignore*/\n  wallet: ExtensionInterface;\n  /**@ignore*/\n  provider: HttpProvider | WSProvider;\n  /**@ignore*/\n  messenger: Messenger;\n  /**@ignore*/\n  blockchain: Blockchain;\n  /**@ignore*/\n  transactions: TransactionFactory;\n  /**@ignore*/\n  contracts: ContractFactory;\n  /**@ignore*/\n  crypto: any;\n  /**@ignore*/\n  utils: any;\n  /**@ignore*/\n  defaultShardID?: number;\n\n  /**\n   * Create an blockchain instance support wallet injection\n   *\n   * @param wallet could be MathWallet or OneWallet instance\n   * @param config (optional), using default `Chain_Id` and `Chain_Type`\n   *\n   * @example\n   * ```javascript\n   * // Using Mathwallet instance\n   * export const initEx = async() => {\n   *   hmyEx = new HarmonyExtension(window.harmony);\n   * }\n   * // Using OneWallet instance\n   * export const initEx = async() => {\n   *   hmyEx = new HarmonyExtension(window.onewallet);\n   * }\n   * ```\n   */\n  constructor(\n    wallet: ExtensionInterface,\n    config: HarmonyConfig = {\n      chainId: utils.defaultConfig.Default.Chain_ID,\n      chainType: utils.defaultConfig.Default.Chain_Type,\n    },\n  ) {\n    this.extensionType = null;\n    this.wallet = wallet;\n    // check if it is mathwallet or onewallet\n    this.isExtension(this.wallet);\n\n    if (wallet.messenger) {\n      this.provider = wallet.messenger.provider;\n      this.messenger = wallet.messenger;\n    } else {\n      this.provider = new Provider(config.chainUrl || wallet.network.chain_url).provider;\n      this.messenger = new Messenger(this.provider, config.chainType, config.chainId);\n    }\n    this.wallet.messenger = this.messenger;\n    this.blockchain = new Blockchain(this.messenger);\n    this.transactions = new TransactionFactory(this.messenger);\n    this.contracts = new ContractFactory(this.wallet);\n    this.crypto = crypto;\n    this.utils = utils;\n  }\n\n  /**\n   * Will change the provider for its module.\n   *\n   * @param provider a valid provider, you can replace it with your own working node\n   *\n   * @example\n   * ```javascript\n   * const tmp = hmyEx.setProvider('http://localhost:9500');\n   * ```\n   */\n  public setProvider(provider: string | HttpProvider | WSProvider): void {\n    this.provider = new Provider(provider).provider;\n    this.messenger.setProvider(this.provider);\n    this.setMessenger(this.messenger);\n  }\n\n  /**\n   * Change the Shard ID\n   *\n   * @example\n   * ```\n   * hmyEx.setShardID(2);\n   * ```\n   */\n  public setShardID(shardID: number) {\n    this.defaultShardID = shardID;\n    this.messenger.setDefaultShardID(this.defaultShardID);\n    this.setMessenger(this.messenger);\n  }\n\n  public isExtension(wallet: ExtensionInterface) {\n    let isExtension = false;\n    this.extensionType = null;\n    if (wallet.isMathWallet || wallet.isOneWallet) {\n      isExtension = true;\n      if (wallet.isMathWallet) this.extensionType = ExtensionType.MathWallet;\n      else this.extensionType = ExtensionType.OneWallet;\n\n      // remake signTransaction of MathWallet or OneWallet\n      const { signTransaction } = this.wallet;\n      this.wallet.signTransaction = async (\n        transaction: Transaction,\n        updateNonce: boolean = true,\n        encodeMode: string = 'rlp',\n        blockNumber: string = 'latest',\n      ) => {\n        const extensionAccount = await this.wallet.getAccount();\n\n        if (updateNonce) {\n          const nonce = await this.messenger.send(\n            RPCMethod.GetTransactionCount,\n            [crypto.getAddress(extensionAccount.address).checksum, blockNumber],\n            this.messenger.chainPrefix,\n            typeof transaction.txParams.shardID === 'string'\n              ? Number.parseInt(transaction.txParams.shardID, 10)\n              : transaction.txParams.shardID,\n          );\n          transaction.setParams({\n            ...transaction.txParams,\n            from: crypto.getAddress(extensionAccount.address).bech32,\n            nonce: Number.parseInt(utils.hexToNumber(nonce.result), 10),\n          });\n        } else {\n          transaction.setParams({\n            ...transaction.txParams,\n            from: crypto.getAddress(extensionAccount.address).bech32,\n          });\n        }\n\n        return signTransaction(transaction, false, encodeMode, blockNumber);\n      };\n    }\n    if (!isExtension) {\n      throw new Error('Extension is not found');\n    }\n    return;\n  }\n\n  /**\n   * Get the wallet account\n   *\n   * @example\n   * ```javascript\n   * const account = hmyEx.login();\n   * console.log(account);\n   * ```\n   */\n  public async login() {\n    const account = await this.wallet.getAccount();\n    // Use address\n    return account;\n  }\n\n  /**\n   * Log out the wallet account\n   *\n   * @example\n   * ```javascript\n   * hmyEx.logout();\n   * ```\n   */\n  public async logout() {\n    await this.wallet.forgetIdentity();\n  }\n\n  /**\n   * Set the sharding Structure\n   *\n   * @param shardingStructures The array of information of sharding structures\n   *\n   * @example\n   * ```javascript\n   * hmyEx.shardingStructures([\n   *   {\"current\":true,\"http\":\"http://127.0.0.1:9500\",\n   *    \"shardID\":0,\"ws\":\"ws://127.0.0.1:9800\"},\n   *   {\"current\":false,\"http\":\"http://127.0.0.1:9501\",\n   *    \"shardID\":1,\"ws\":\"ws://127.0.0.1:9801\"}\n   * ]);\n   * ```\n   */\n  public shardingStructures(shardingStructures: ShardingItem[]) {\n    for (const shard of shardingStructures) {\n      const shardID =\n        typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n      this.messenger.shardProviders.set(shardID, {\n        current: shard.current !== undefined ? shard.current : false,\n        shardID,\n        http: shard.http,\n        ws: shard.ws,\n      });\n    }\n    this.setMessenger(this.messenger);\n  }\n\n  /**@ignore*/\n  private setMessenger(messenger: Messenger) {\n    this.blockchain.setMessenger(messenger);\n    this.wallet.messenger = messenger;\n    this.transactions.setMessenger(messenger);\n  }\n}\n"]}},"error":null,"hash":"40a4bd2da7604476ab28f092bf0fc257","cacheData":{"env":{}}}
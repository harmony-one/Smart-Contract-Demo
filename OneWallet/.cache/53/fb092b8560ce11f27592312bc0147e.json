{"id":"../node_modules/@harmony-js/crypto/dist/address.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/address.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/src/address.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/package.json","includedInParent":true,"mtime":1605232158322},{"name":"@harmony-js/utils","loc":{"line":8,"column":22},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/address.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/utils/dist/index.js"},{"name":"./keyTool","loc":{"line":9,"column":24},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/address.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/keyTool.js"},{"name":"./bech32","loc":{"line":10,"column":23},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/address.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/bech32.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-crypto\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAddress = exports.HarmonyAddress = void 0;\nvar utils_1 = require(\"@harmony-js/utils\");\nvar keyTool_1 = require(\"./keyTool\");\nvar bech32_1 = require(\"./bech32\");\n/**\n * ### How to use it?\n *\n * ```\n * // Step 1: import the class\n * const { HarmonyAddress } = require('@harmony-js/crypto');\n *\n * // Step 2: call functions\n * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n * const res = HarmonyAddress.isValidBech32(addr);\n * console.log(res);\n * ```\n */\nvar HarmonyAddress = /** @class */ (function () {\n    function HarmonyAddress(raw) {\n        this.raw = raw;\n        this.basic = this.getBasic(this.raw);\n    }\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const res = HarmonyAddress.isValidBech32(addr);\n     * console.log(res);\n     * ```\n     */\n    HarmonyAddress.isValidBasic = function (str) {\n        var toTest = new HarmonyAddress(str);\n        return toTest.raw === toTest.basic;\n    };\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const res = HarmonyAddress.isValidChecksum(addr);\n     * console.log(res);\n     * ```\n     */\n    HarmonyAddress.isValidChecksum = function (str) {\n        var toTest = new HarmonyAddress(str);\n        return toTest.raw === toTest.checksum;\n    };\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const res = HarmonyAddress.isValidBech32(addr);\n     * console.log(res);\n     * ```\n     */\n    HarmonyAddress.isValidBech32 = function (str) {\n        var toTest = new HarmonyAddress(str);\n        return toTest.raw === toTest.bech32;\n    };\n    /**\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const res = HarmonyAddress.isValidBech32TestNet(addr);\n     * console.log(res);\n     * ```\n     */\n    HarmonyAddress.isValidBech32TestNet = function (str) {\n        var toTest = new HarmonyAddress(str);\n        return toTest.raw === toTest.bech32TestNet;\n    };\n    Object.defineProperty(HarmonyAddress.prototype, \"basicHex\", {\n        /**\n         * get basicHex of the address\n         *\n         * @example\n         * ```\n         * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n         * const instance = new HarmonyAddress(addr);\n         * console.log(instance.basicHex);\n         * ```\n         */\n        get: function () {\n            return \"0x\" + this.basic;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HarmonyAddress.prototype, \"checksum\", {\n        /**\n         * @example\n         * ```\n         * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n         * const instance = new HarmonyAddress(addr);\n         * console.log(instance.checksum);\n         * ```\n         */\n        get: function () {\n            return keyTool_1.toChecksumAddress(\"0x\" + this.basic);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HarmonyAddress.prototype, \"bech32\", {\n        /**\n         * @example\n         * ```\n         * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n         * const instance = new HarmonyAddress(addr);\n         * console.log(instance.bech32);\n         * ```\n         */\n        get: function () {\n            return bech32_1.toBech32(this.basic, bech32_1.HRP);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HarmonyAddress.prototype, \"bech32TestNet\", {\n        /**\n         * @example\n         * ```\n         * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n         * const instance = new HarmonyAddress(addr);\n         * console.log(instance.bech32TestNet);\n         * ```\n         */\n        get: function () {\n            return bech32_1.toBech32(this.basic, bech32_1.tHRP);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Check whether the address has an valid address format\n     *\n     * @param addr string, the address\n     *\n     * @example\n     * ```\n     * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n     * const instance = new HarmonyAddress(addr);\n     * const res = instance.getBasic(addr);\n     * console.log(res)\n     * ```\n     */\n    HarmonyAddress.prototype.getBasic = function (addr) {\n        var basicBool = utils_1.isAddress(addr);\n        var bech32Bool = utils_1.isBech32Address(addr);\n        var bech32TestNetBool = utils_1.isBech32TestNetAddress(addr);\n        if (basicBool) {\n            return addr.replace('0x', '').toLowerCase();\n        }\n        if (bech32Bool) {\n            var fromB32 = bech32_1.fromBech32(addr, bech32_1.HRP);\n            return fromB32.replace('0x', '').toLowerCase();\n        }\n        if (bech32TestNetBool) {\n            var fromB32TestNet = bech32_1.fromBech32(addr, bech32_1.tHRP);\n            return fromB32TestNet.replace('0x', '').toLowerCase();\n        }\n        throw new Error(\"\\\"\" + addr + \"\\\" is an invalid address format\");\n    };\n    return HarmonyAddress;\n}());\nexports.HarmonyAddress = HarmonyAddress;\n/**\n * Using this function to get Harmony format address\n *\n * @param address\n *\n * @example\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n * const { randomBytes } = require('@harmony-js/crypto')\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *   chainType: ChainType.Harmony,\n *   chainId: ChainID.HmyLocal,\n *   },\n * );\n *\n * const bytes = randomBytes(20);\n * const hAddress = hmy.crypto.getAddress(bytes);\n * console.log(hAddress)\n * ```\n */\nfunction getAddress(address) {\n    try {\n        return new HarmonyAddress(address);\n    }\n    catch (error) {\n        throw error;\n    }\n}\nexports.getAddress = getAddress;\n"},"sourceMaps":{"js":{"version":3,"file":"address.js","sourceRoot":"","sources":["../src/address.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-crypto\n */\n\nimport { isAddress, isBech32Address, isBech32TestNetAddress } from '@harmony-js/utils';\n\nimport { toChecksumAddress } from './keyTool';\nimport { fromBech32, toBech32, HRP, tHRP } from './bech32';\n\n/**\n * ### How to use it?\n *\n * ```\n * // Step 1: import the class\n * const { HarmonyAddress } = require('@harmony-js/crypto');\n *\n * // Step 2: call functions\n * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n * const res = HarmonyAddress.isValidBech32(addr);\n * console.log(res);\n * ```\n */\nexport class HarmonyAddress {\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidBech32(addr);\n   * console.log(res);\n   * ```\n   */\n  static isValidBasic(str: string) {\n    const toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.basic;\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidChecksum(addr);\n   * console.log(res);\n   * ```\n   */\n  static isValidChecksum(str: string) {\n    const toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.checksum;\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidBech32(addr);\n   * console.log(res);\n   * ```\n   */\n  static isValidBech32(str: string) {\n    const toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.bech32;\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = HarmonyAddress.isValidBech32TestNet(addr);\n   * console.log(res);\n   * ```\n   */\n  static isValidBech32TestNet(str: string) {\n    const toTest = new HarmonyAddress(str);\n    return toTest.raw === toTest.bech32TestNet;\n  }\n\n  raw: string;\n  basic: string;\n\n  /**\n   * get basicHex of the address\n   *\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new HarmonyAddress(addr);\n   * console.log(instance.basicHex);\n   * ```\n   */\n  get basicHex() {\n    return `0x${this.basic}`;\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new HarmonyAddress(addr);\n   * console.log(instance.checksum);\n   * ```\n   */\n  get checksum() {\n    return toChecksumAddress(`0x${this.basic}`);\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new HarmonyAddress(addr);\n   * console.log(instance.bech32);\n   * ```\n   */\n  get bech32() {\n    return toBech32(this.basic, HRP);\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new HarmonyAddress(addr);\n   * console.log(instance.bech32TestNet);\n   * ```\n   */\n  get bech32TestNet() {\n    return toBech32(this.basic, tHRP);\n  }\n\n  constructor(raw: string) {\n    this.raw = raw;\n    this.basic = this.getBasic(this.raw);\n  }\n\n  /**\n   * Check whether the address has an valid address format\n   *\n   * @param addr string, the address\n   *\n   * @example\n   * ```\n   * const addr = 'one103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new HarmonyAddress(addr);\n   * const res = instance.getBasic(addr);\n   * console.log(res)\n   * ```\n   */\n  private getBasic(addr: string) {\n    const basicBool = isAddress(addr);\n    const bech32Bool = isBech32Address(addr);\n    const bech32TestNetBool = isBech32TestNetAddress(addr);\n\n    if (basicBool) {\n      return addr.replace('0x', '').toLowerCase();\n    }\n\n    if (bech32Bool) {\n      const fromB32 = fromBech32(addr, HRP);\n      return fromB32.replace('0x', '').toLowerCase();\n    }\n\n    if (bech32TestNetBool) {\n      const fromB32TestNet = fromBech32(addr, tHRP);\n      return fromB32TestNet.replace('0x', '').toLowerCase();\n    }\n\n    throw new Error(`\"${addr}\" is an invalid address format`);\n  }\n}\n\n/**\n * Using this function to get Harmony format address\n *\n * @param address\n *\n * @example\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n * const { randomBytes } = require('@harmony-js/crypto')\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *   chainType: ChainType.Harmony,\n *   chainId: ChainID.HmyLocal,\n *   },\n * );\n *\n * const bytes = randomBytes(20);\n * const hAddress = hmy.crypto.getAddress(bytes);\n * console.log(hAddress)\n * ```\n */\nexport function getAddress(address: string) {\n  try {\n    return new HarmonyAddress(address);\n  } catch (error) {\n    throw error;\n  }\n}\n"]}},"error":null,"hash":"e9f902220a4e9b87c46a404ebca70326","cacheData":{"env":{}}}
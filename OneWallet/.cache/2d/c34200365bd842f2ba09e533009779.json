{"id":"../node_modules/@harmony-js/staking/dist/stakingTransaction.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/staking/dist/stakingTransaction.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/staking/src/stakingTransaction.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/staking/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":8,"column":22},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/staking/dist/stakingTransaction.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"@harmony-js/crypto","loc":{"line":10,"column":23},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/staking/dist/stakingTransaction.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/index.js"},{"name":"@harmony-js/network","loc":{"line":11,"column":24},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/staking/dist/stakingTransaction.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/index.js"},{"name":"@harmony-js/transaction","loc":{"line":12,"column":28},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/staking/dist/stakingTransaction.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/index.js"},{"name":"@harmony-js/utils","loc":{"line":13,"column":22},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/staking/dist/stakingTransaction.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/utils/dist/index.js"},{"name":"text-encoding","loc":{"line":14,"column":30},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/staking/dist/stakingTransaction.js","resolved":"/home/rachit/Projects/demo/web/node_modules/text-encoding/index.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-staking\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CollectRewards = exports.Undelegate = exports.Delegate = exports.EditValidator = exports.CreateValidator = exports.CommissionRate = exports.Decimal = exports.Description = exports.StakingTransaction = exports.Directive = exports.StakingSettings = void 0;\nvar tslib_1 = require(\"tslib\");\n// tslint:disable: max-classes-per-file\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar network_1 = require(\"@harmony-js/network\");\nvar transaction_1 = require(\"@harmony-js/transaction\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar text_encoding_1 = require(\"text-encoding\");\n/** @hidden */\nvar StakingSettings = /** @class */ (function () {\n    function StakingSettings() {\n    }\n    StakingSettings.PRECISION = 18;\n    StakingSettings.MAX_DECIMAL = 1000000000000000000;\n    return StakingSettings;\n}());\nexports.StakingSettings = StakingSettings;\n/** @hidden */\nvar Directive;\n(function (Directive) {\n    Directive[Directive[\"DirectiveCreateValidator\"] = 0] = \"DirectiveCreateValidator\";\n    Directive[Directive[\"DirectiveEditValidator\"] = 1] = \"DirectiveEditValidator\";\n    Directive[Directive[\"DirectiveDelegate\"] = 2] = \"DirectiveDelegate\";\n    Directive[Directive[\"DirectiveUndelegate\"] = 3] = \"DirectiveUndelegate\";\n    Directive[Directive[\"DirectiveCollectRewards\"] = 4] = \"DirectiveCollectRewards\";\n})(Directive = exports.Directive || (exports.Directive = {}));\nvar StakingTransaction = /** @class */ (function (_super) {\n    tslib_1.__extends(StakingTransaction, _super);\n    function StakingTransaction(directive, stakeMsg, nonce, gasPrice, gasLimit, chainID, messenger, txStatus) {\n        if (messenger === void 0) { messenger = transaction_1.defaultMessenger; }\n        if (txStatus === void 0) { txStatus = transaction_1.TxStatus.INTIALIZED; }\n        var _this = _super.call(this, messenger, txStatus) || this;\n        _this.directive = directive;\n        _this.stakeMsg = stakeMsg;\n        _this.nonce = nonce;\n        _this.gasLimit = gasLimit;\n        _this.gasPrice = gasPrice;\n        _this.rawTransaction = '0x';\n        _this.unsignedRawTransaction = '0x';\n        _this.signature = {\n            r: '',\n            s: '',\n            recoveryParam: 0,\n            v: 0,\n        };\n        _this.chainId = chainID;\n        _this.from = '0x';\n        return _this;\n    }\n    StakingTransaction.prototype.encode = function () {\n        var raw = [];\n        // TODO: temporary hack for converting 0x00 to 0x\n        if (!this.directive) {\n            raw.push('0x');\n        }\n        else {\n            raw.push(crypto_1.hexlify(this.directive));\n        }\n        raw.push(this.stakeMsg.encode());\n        if (!this.nonce) {\n            raw.push('0x');\n        }\n        else {\n            raw.push(crypto_1.hexlify(this.nonce));\n        }\n        raw.push(crypto_1.hexlify(this.gasPrice));\n        raw.push(crypto_1.hexlify(this.gasLimit));\n        if (this.chainId != null && this.chainId !== 0) {\n            raw.push(crypto_1.hexlify(this.chainId));\n            raw.push('0x');\n            raw.push('0x');\n        }\n        return [crypto_1.encode(raw), raw];\n    };\n    StakingTransaction.prototype.rlpSign = function (prv) {\n        var _a = tslib_1.__read(this.encode(), 2), unsignedRawTransaction = _a[0], raw = _a[1];\n        this.setUnsigned(unsignedRawTransaction);\n        var signature = crypto_1.sign(crypto_1.keccak256(unsignedRawTransaction), prv);\n        var signed = this.getRLPSigned(raw, signature);\n        return [signature, signed];\n    };\n    StakingTransaction.prototype.getRLPSigned = function (raw, signature) {\n        var sig = crypto_1.splitSignature(signature);\n        var v = 27 + (sig.recoveryParam || 0);\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += this.chainId * 2 + 8;\n        raw.push(crypto_1.hexlify(v));\n        raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.r) || []));\n        raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.s) || []));\n        return crypto_1.encode(raw);\n    };\n    StakingTransaction.prototype.sendTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var res;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n                            throw new Error('Transaction not signed');\n                        }\n                        if (!this.messenger) {\n                            throw new Error('Messenger not found');\n                        }\n                        return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.SendRawStakingTransaction, this.rawTransaction, this.messenger.chainType, this.messenger.currentShard)];\n                    case 1:\n                        res = _a.sent();\n                        if (res.isResult()) {\n                            this.id = res.result;\n                            this.emitTransactionHash(this.id);\n                            this.setTxStatus(transaction_1.TxStatus.PENDING);\n                            return [2 /*return*/, [this, res.result]];\n                        }\n                        else if (res.isError()) {\n                            this.emitConfirm(\"transaction failed:\" + res.error.message);\n                            this.setTxStatus(transaction_1.TxStatus.REJECTED);\n                            return [2 /*return*/, [this, \"transaction failed:\" + res.error.message]];\n                        }\n                        else {\n                            this.emitError('transaction failed');\n                            throw new Error('transaction failed');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StakingTransaction.prototype.setUnsigned = function (unSigned) {\n        this.unsignedRawTransaction = unSigned;\n    };\n    StakingTransaction.prototype.setRawTransaction = function (rawTransaction) {\n        this.rawTransaction = rawTransaction;\n    };\n    StakingTransaction.prototype.setSignature = function (signature) {\n        this.signature = {\n            r: signature.r,\n            s: signature.s,\n            v: signature.v,\n            recoveryParam: signature.recoveryParam,\n        };\n    };\n    StakingTransaction.prototype.setNonce = function (nonce) {\n        this.nonce = nonce;\n    };\n    StakingTransaction.prototype.setFromAddress = function (address) {\n        this.from = address;\n    };\n    StakingTransaction.prototype.getUnsignedRawTransaction = function () {\n        return this.unsignedRawTransaction;\n    };\n    StakingTransaction.prototype.getRawTransaction = function () {\n        return this.rawTransaction;\n    };\n    StakingTransaction.prototype.getSignature = function () {\n        return this.signature;\n    };\n    StakingTransaction.prototype.getFromAddress = function () {\n        return this.from;\n    };\n    StakingTransaction.prototype.confirm = function (txHash, maxAttempts, interval, shardID, toShardID) {\n        if (maxAttempts === void 0) { maxAttempts = 20; }\n        if (interval === void 0) { interval = 1000; }\n        if (shardID === void 0) { shardID = this.messenger.currentShard; }\n        if (toShardID === void 0) { toShardID = 0; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var txConfirmed, cxConfirmed;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.txConfirm(txHash, maxAttempts, interval, shardID)];\n                    case 1:\n                        txConfirmed = _a.sent();\n                        if (shardID === toShardID) {\n                            return [2 /*return*/, txConfirmed];\n                        }\n                        if (!txConfirmed.isConfirmed()) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.cxConfirm(txHash, maxAttempts, interval, toShardID)];\n                    case 2:\n                        cxConfirmed = _a.sent();\n                        return [2 /*return*/, cxConfirmed];\n                    case 3: return [2 /*return*/, txConfirmed];\n                }\n            });\n        });\n    };\n    return StakingTransaction;\n}(transaction_1.TransactionBase));\nexports.StakingTransaction = StakingTransaction;\n/** @hidden */\nvar Description = /** @class */ (function () {\n    function Description(name, identity, website, securityContact, details) {\n        this.name = name;\n        this.identity = identity;\n        this.website = website;\n        this.securityContact = securityContact;\n        this.details = details;\n    }\n    Description.prototype.encode = function () {\n        var raw = [];\n        var enc = new text_encoding_1.TextEncoder();\n        raw.push(enc.encode(this.name));\n        raw.push(enc.encode(this.identity));\n        raw.push(enc.encode(this.website));\n        raw.push(enc.encode(this.securityContact));\n        raw.push(enc.encode(this.details));\n        return raw;\n    };\n    return Description;\n}());\nexports.Description = Description;\n/** @hidden */\nvar Decimal = /** @class */ (function () {\n    function Decimal(value) {\n        if (value.length === 0) {\n            throw new Error(\"decimal string is empty\");\n        }\n        var value1 = value;\n        if (value[0] === '-') {\n            throw new Error(\"decimal fraction should be be between [0, 1]\");\n        }\n        if (value[0] === '+') {\n            value1 = value.substr(1);\n        }\n        if (value1.length === 0) {\n            throw new Error(\"decimal string is empty\");\n        }\n        var spaced = value1.split(' ');\n        if (spaced.length > 1) {\n            throw new Error(\"bad decimal string\");\n        }\n        var splitted = value1.split('.');\n        var len = 0;\n        var combinedStr = splitted[0];\n        if (splitted.length === 2) {\n            len = splitted[1].length;\n            if (len === 0 || combinedStr.length === 0) {\n                throw new Error(\"bad decimal length\");\n            }\n            if (splitted[1][0] === '-') {\n                throw new Error(\"bad decimal string\");\n            }\n            combinedStr += splitted[1];\n        }\n        else if (splitted.length > 2) {\n            throw new Error(\"too many periods to be a decimal string\");\n        }\n        if (len > StakingSettings.PRECISION) {\n            throw new Error(\"too much precision: precision should be less than \" + StakingSettings.PRECISION);\n        }\n        var zerosToAdd = StakingSettings.PRECISION - len;\n        combinedStr += '0'.repeat(zerosToAdd);\n        combinedStr = combinedStr.replace(/^0+/, '');\n        var val = new utils_1.Unit(combinedStr).asWei().toWei();\n        if (val.gt(new utils_1.Unit(StakingSettings.MAX_DECIMAL.toString()).asWei().toWei())) {\n            throw new Error(\"too large decimal fraction\");\n        }\n        this.value = val;\n    }\n    Decimal.prototype.encode = function () {\n        var raw = [];\n        raw.push(utils_1.numberToHex(this.value));\n        return raw;\n    };\n    return Decimal;\n}());\nexports.Decimal = Decimal;\n/** @hidden */\nvar CommissionRate = /** @class */ (function () {\n    function CommissionRate(rate, maxRate, maxChangeRate) {\n        this.rate = rate;\n        this.maxRate = maxRate;\n        this.maxChangeRate = maxChangeRate;\n    }\n    CommissionRate.prototype.encode = function () {\n        var raw = [];\n        raw.push(this.rate.encode());\n        raw.push(this.maxRate.encode());\n        raw.push(this.maxChangeRate.encode());\n        return raw;\n    };\n    return CommissionRate;\n}());\nexports.CommissionRate = CommissionRate;\nvar CreateValidator = /** @class */ (function () {\n    function CreateValidator(validatorAddress, description, commissionRates, minSelfDelegation, maxTotalDelegation, slotPubKeys, amount) {\n        this.validatorAddress = validatorAddress;\n        this.description = description;\n        this.commissionRates = commissionRates;\n        this.minSelfDelegation = minSelfDelegation;\n        this.maxTotalDelegation = maxTotalDelegation;\n        this.slotPubKeys = slotPubKeys;\n        this.amount = amount;\n    }\n    CreateValidator.prototype.encode = function () {\n        var raw = [];\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n        raw.push(this.description.encode());\n        raw.push(this.commissionRates.encode());\n        raw.push(crypto_1.hexlify(this.minSelfDelegation));\n        raw.push(crypto_1.hexlify(this.maxTotalDelegation));\n        raw.push(this.encodeArr());\n        raw.push(crypto_1.hexlify(this.amount));\n        return raw;\n    };\n    CreateValidator.prototype.encodeArr = function () {\n        var raw = [];\n        this.slotPubKeys.forEach(function (pubKey) {\n            raw.push(pubKey);\n        });\n        return raw;\n    };\n    return CreateValidator;\n}());\nexports.CreateValidator = CreateValidator;\nvar EditValidator = /** @class */ (function () {\n    function EditValidator(validatorAddress, description, commissionRate, minSelfDelegation, maxTotalDelegation, slotKeyToRemove, slotKeyToAdd) {\n        this.validatorAddress = validatorAddress;\n        this.description = description;\n        this.commissionRate = commissionRate;\n        this.minSelfDelegation = minSelfDelegation;\n        this.maxTotalDelegation = maxTotalDelegation;\n        this.slotKeyToRemove = slotKeyToRemove;\n        this.slotKeyToAdd = slotKeyToAdd;\n    }\n    EditValidator.prototype.encode = function () {\n        var raw = [];\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n        raw.push(this.description.encode());\n        raw.push(this.commissionRate.encode());\n        raw.push(crypto_1.hexlify(this.minSelfDelegation));\n        raw.push(crypto_1.hexlify(this.maxTotalDelegation));\n        raw.push(this.slotKeyToRemove);\n        raw.push(this.slotKeyToAdd);\n        return raw;\n    };\n    return EditValidator;\n}());\nexports.EditValidator = EditValidator;\nvar Delegate = /** @class */ (function () {\n    function Delegate(delegatorAddress, validatorAddress, amount) {\n        this.delegatorAddress = delegatorAddress;\n        this.validatorAddress = validatorAddress;\n        this.amount = amount;\n    }\n    Delegate.prototype.encode = function () {\n        var raw = [];\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.delegatorAddress)));\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n        raw.push(crypto_1.hexlify(this.amount));\n        return raw;\n    };\n    return Delegate;\n}());\nexports.Delegate = Delegate;\nvar Undelegate = /** @class */ (function () {\n    function Undelegate(delegatorAddress, validatorAddress, amount) {\n        this.delegatorAddress = delegatorAddress;\n        this.validatorAddress = validatorAddress;\n        this.amount = amount;\n    }\n    Undelegate.prototype.encode = function () {\n        var raw = [];\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.delegatorAddress)));\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.validatorAddress)));\n        raw.push(crypto_1.hexlify(this.amount));\n        return raw;\n    };\n    return Undelegate;\n}());\nexports.Undelegate = Undelegate;\nvar CollectRewards = /** @class */ (function () {\n    function CollectRewards(delegatorAddress) {\n        this.delegatorAddress = delegatorAddress;\n    }\n    CollectRewards.prototype.encode = function () {\n        var raw = [];\n        raw.push(crypto_1.hexlify(transaction_1.TransactionBase.normalizeAddress(this.delegatorAddress)));\n        return raw;\n    };\n    return CollectRewards;\n}());\nexports.CollectRewards = CollectRewards;\n"},"sourceMaps":{"js":{"version":3,"file":"stakingTransaction.js","sourceRoot":"","sources":["../src/stakingTransaction.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;AAEH,uCAAuC;AAEvC,6CAU4B;AAC5B,+CAA2D;AAC3D,uDAAsF;AACtF,2CAAsD;AACtD,+CAA4C;AAE5C,cAAc;AACd;IAAA;IAGA,CAAC;IAFe,yBAAS,GAAG,EAAE,CAAC;IACf,2BAAW,GAAG,mBAAmB,CAAC;IAClD,sBAAC;CAAA,AAHD,IAGC;AAHY,0CAAe;AAK5B,cAAc;AACd,IAAY,SAMX;AAND,WAAY,SAAS;IACnB,iFAAwB,CAAA;IACxB,6EAAsB,CAAA;IACtB,mEAAiB,CAAA;IACjB,uEAAmB,CAAA;IACnB,+EAAuB,CAAA;AACzB,CAAC,EANW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAMpB;AAED;IAAwC,8CAAe;IAYrD,4BACE,SAAoB,EACpB,QAAkF,EAClF,KAAsB,EACtB,QAAyB,EACzB,QAAyB,EACzB,OAAe,EACf,SAAuC,EACvC,QAA8B;QAD9B,0BAAA,EAAA,YAAuB,8BAAgB;QACvC,yBAAA,EAAA,WAAW,sBAAQ,CAAC,UAAU;QARhC,YAUE,kBAAM,SAAS,EAAE,QAAQ,CAAC,SAiB3B;QAfC,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,KAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;QACnC,KAAI,CAAC,SAAS,GAAG;YACf,CAAC,EAAE,EAAE;YACL,CAAC,EAAE,EAAE;YACL,aAAa,EAAE,CAAC;YAChB,CAAC,EAAE,CAAC;SACL,CAAC;QACF,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;IACnB,CAAC;IAED,mCAAM,GAAN;QACE,IAAM,GAAG,GAA4D,EAAE,CAAC;QACxE,iDAAiD;QACjD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChB;aAAM;YACL,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;SACnC;QACD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChB;aAAM;YACL,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/B;QACD,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjC,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjC,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,EAAE;YAC9C,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAChC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACf,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChB;QACD,OAAO,CAAC,eAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED,oCAAO,GAAP,UAAQ,GAAW;QACX,IAAA,KAAA,eAAgC,IAAI,CAAC,MAAM,EAAE,IAAA,EAA5C,sBAAsB,QAAA,EAAE,GAAG,QAAiB,CAAC;QACpD,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;QACzC,IAAM,SAAS,GAAG,aAAI,CAAC,kBAAS,CAAC,sBAAsB,CAAC,EAAE,GAAG,CAAC,CAAC;QAC/D,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QACjD,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED,yCAAY,GAAZ,UAAa,GAAU,EAAE,SAAoB;QAC3C,IAAM,GAAG,GAAG,uBAAc,CAAC,SAAS,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC;QACtC,GAAG,CAAC,GAAG,EAAE,CAAC;QACV,GAAG,CAAC,GAAG,EAAE,CAAC;QACV,GAAG,CAAC,GAAG,EAAE,CAAC;QACV,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QAE1B,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACrB,GAAG,CAAC,IAAI,CAAC,mBAAU,CAAC,iBAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC5C,GAAG,CAAC,IAAI,CAAC,mBAAU,CAAC,iBAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAE5C,OAAO,eAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IAEY,4CAAe,GAA5B;;;;;;wBACE,IAAI,IAAI,CAAC,cAAc,KAAK,IAAI,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE;4BACrE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;yBAC3C;wBACD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;4BACnB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;yBACxC;wBAEW,qBAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CACnC,mBAAS,CAAC,yBAAyB,EACnC,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,SAAS,CAAC,SAAS,EACxB,IAAI,CAAC,SAAS,CAAC,YAAY,CAE5B,EAAA;;wBANK,GAAG,GAAG,SAMX;wBAED,IAAI,GAAG,CAAC,QAAQ,EAAE,EAAE;4BAClB,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;4BACrB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;4BAClC,IAAI,CAAC,WAAW,CAAC,sBAAQ,CAAC,OAAO,CAAC,CAAC;4BACnC,sBAAO,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,EAAC;yBAC3B;6BAAM,IAAI,GAAG,CAAC,OAAO,EAAE,EAAE;4BACxB,IAAI,CAAC,WAAW,CAAC,wBAAsB,GAAG,CAAC,KAAK,CAAC,OAAS,CAAC,CAAC;4BAC5D,IAAI,CAAC,WAAW,CAAC,sBAAQ,CAAC,QAAQ,CAAC,CAAC;4BACpC,sBAAO,CAAC,IAAI,EAAE,wBAAsB,GAAG,CAAC,KAAK,CAAC,OAAS,CAAC,EAAC;yBAC1D;6BAAM;4BACL,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;4BACrC,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;yBACvC;;;;;KACF;IAED,wCAAW,GAAX,UAAY,QAAgB;QAC1B,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC;IACzC,CAAC;IACD,8CAAiB,GAAjB,UAAkB,cAAsB;QACtC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IACD,yCAAY,GAAZ,UAAa,SAAoB;QAC/B,IAAI,CAAC,SAAS,GAAG;YACf,CAAC,EAAE,SAAS,CAAC,CAAC;YACd,CAAC,EAAE,SAAS,CAAC,CAAC;YACd,CAAC,EAAE,SAAS,CAAC,CAAC;YACd,aAAa,EAAE,SAAS,CAAC,aAAa;SACvC,CAAC;IACJ,CAAC;IACD,qCAAQ,GAAR,UAAS,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IACD,2CAAc,GAAd,UAAe,OAAe;QAC5B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;IACtB,CAAC;IACD,sDAAyB,GAAzB;QACE,OAAO,IAAI,CAAC,sBAAsB,CAAC;IACrC,CAAC;IACD,8CAAiB,GAAjB;QACE,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IACD,yCAAY,GAAZ;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,2CAAc,GAAd;QACE,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IACK,oCAAO,GAAb,UACE,MAAc,EACd,WAAwB,EACxB,QAAuB,EACvB,OAAsD,EACtD,SAA8B;QAH9B,4BAAA,EAAA,gBAAwB;QACxB,yBAAA,EAAA,eAAuB;QACvB,wBAAA,EAAA,UAA2B,IAAI,CAAC,SAAS,CAAC,YAAY;QACtD,0BAAA,EAAA,aAA8B;;;;;4BAEV,qBAAM,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,EAAA;;wBAA1E,WAAW,GAAG,SAA4D;wBAChF,IAAI,OAAO,KAAK,SAAS,EAAE;4BACzB,sBAAO,WAAW,EAAC;yBACpB;6BACG,WAAW,CAAC,WAAW,EAAE,EAAzB,wBAAyB;wBACP,qBAAM,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,CAAC,EAAA;;wBAA5E,WAAW,GAAG,SAA8D;wBAClF,sBAAO,WAAW,EAAC;4BAEnB,sBAAO,WAAW,EAAC;;;;KAEtB;IACH,yBAAC;AAAD,CAAC,AA1KD,CAAwC,6BAAe,GA0KtD;AA1KY,gDAAkB;AA4K/B,cAAc;AACd;IAOE,qBACE,IAAY,EACZ,QAAgB,EAChB,OAAe,EACf,eAAuB,EACvB,OAAe;QAEf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,4BAAM,GAAN;QACE,IAAM,GAAG,GAA+B,EAAE,CAAC;QAC3C,IAAM,GAAG,GAAG,IAAI,2BAAW,EAAE,CAAC;QAC9B,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACpC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACnC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;QAC3C,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QACnC,OAAO,GAAG,CAAC;IACb,CAAC;IACH,kBAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,kCAAW;AAiCxB,cAAc;AACd;IAGE,iBAAY,KAAa;QACvB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC5C;QACD,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;QACD,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACpB,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAC1B;QACD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC5C;QACD,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;SACvC;QACD,IAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACzB,IAAI,GAAG,KAAK,CAAC,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBACzC,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACvC;YACD,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACvC;YACD,WAAW,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC;SAC5B;aAAM,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC5D;QACD,IAAI,GAAG,GAAG,eAAe,CAAC,SAAS,EAAE;YACnC,MAAM,IAAI,KAAK,CACb,uDAAqD,eAAe,CAAC,SAAW,CACjF,CAAC;SACH;QACD,IAAM,UAAU,GAAG,eAAe,CAAC,SAAS,GAAG,GAAG,CAAC;QACnD,WAAW,IAAI,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACtC,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7C,IAAM,GAAG,GAAG,IAAI,YAAI,CAAC,WAAW,CAAC,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC;QAClD,IAAI,GAAG,CAAC,EAAE,CAAC,IAAI,YAAI,CAAC,eAAe,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE;YAC5E,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC/C;QACD,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;IACnB,CAAC;IAED,wBAAM,GAAN;QACE,IAAM,GAAG,GAA+B,EAAE,CAAC;QAC3C,GAAG,CAAC,IAAI,CAAC,mBAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,OAAO,GAAG,CAAC;IACb,CAAC;IACH,cAAC;AAAD,CAAC,AAxDD,IAwDC;AAxDY,0BAAO;AA0DpB,cAAc;AACd;IAIE,wBAAY,IAAa,EAAE,OAAgB,EAAE,aAAsB;QACjE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAED,+BAAM,GAAN;QACE,IAAM,GAAG,GAA4D,EAAE,CAAC;QACxE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAC7B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QAChC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC;QACtC,OAAO,GAAG,CAAC;IACb,CAAC;IACH,qBAAC;AAAD,CAAC,AAjBD,IAiBC;AAjBY,wCAAc;AAmB3B;IAQE,yBACE,gBAAwB,EACxB,WAAwB,EACxB,eAA+B,EAC/B,iBAAyB,EACzB,kBAA0B,EAC1B,WAAqB,EACrB,MAAc;QAEd,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,gCAAM,GAAN;QACE,IAAM,GAAG,GAA4D,EAAE,CAAC;QACxE,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,6BAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC3E,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;QACpC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC;QACxC,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC1C,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC3C,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QAC3B,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/B,OAAO,GAAG,CAAC;IACb,CAAC;IAED,mCAAS,GAAT;QACE,IAAM,GAAG,GAA4D,EAAE,CAAC;QACxE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,MAAM;YAC9B,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC;IACH,sBAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,0CAAe;AA+C5B;IAQE,uBACE,gBAAwB,EACxB,WAAwB,EACxB,cAAuB,EACvB,iBAAyB,EACzB,kBAA0B,EAC1B,eAAuB,EACvB,YAAoB;QAEpB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IACD,8BAAM,GAAN;QACE,IAAM,GAAG,GAA4D,EAAE,CAAC;QACxE,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,6BAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC3E,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;QACpC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC;QACvC,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC1C,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC3C,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC/B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5B,OAAO,GAAG,CAAC;IACb,CAAC;IACH,oBAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,sCAAa;AAsC1B;IAIE,kBAAY,gBAAwB,EAAE,gBAAwB,EAAE,MAAc;QAC5E,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IACD,yBAAM,GAAN;QACE,IAAM,GAAG,GAA+B,EAAE,CAAC;QAC3C,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,6BAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC3E,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,6BAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC3E,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/B,OAAO,GAAG,CAAC;IACb,CAAC;IACH,eAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBY,4BAAQ;AAkBrB;IAIE,oBAAY,gBAAwB,EAAE,gBAAwB,EAAE,MAAc;QAC5E,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IACD,2BAAM,GAAN;QACE,IAAM,GAAG,GAA+B,EAAE,CAAC;QAC3C,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,6BAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC3E,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,6BAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC3E,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/B,OAAO,GAAG,CAAC;IACb,CAAC;IACH,iBAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBY,gCAAU;AAkBvB;IAEE,wBAAY,gBAAwB;QAClC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IACD,+BAAM,GAAN;QACE,IAAM,GAAG,GAA+B,EAAE,CAAC;QAC3C,GAAG,CAAC,IAAI,CAAC,gBAAO,CAAC,6BAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC3E,OAAO,GAAG,CAAC;IACb,CAAC;IACH,qBAAC;AAAD,CAAC,AAVD,IAUC;AAVY,wCAAc","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-staking\n */\n\n// tslint:disable: max-classes-per-file\n\nimport {\n  arrayify,\n  BN,\n  encode,\n  hexlify,\n  keccak256,\n  sign,\n  Signature,\n  splitSignature,\n  stripZeros,\n} from '@harmony-js/crypto';\nimport { Messenger, RPCMethod } from '@harmony-js/network';\nimport { defaultMessenger, TransactionBase, TxStatus } from '@harmony-js/transaction';\nimport { numberToHex, Unit } from '@harmony-js/utils';\nimport { TextEncoder } from 'text-encoding';\n\n/** @hidden */\nexport class StakingSettings {\n  public static PRECISION = 18;\n  public static MAX_DECIMAL = 1000000000000000000;\n}\n\n/** @hidden */\nexport enum Directive {\n  DirectiveCreateValidator,\n  DirectiveEditValidator,\n  DirectiveDelegate,\n  DirectiveUndelegate,\n  DirectiveCollectRewards,\n}\n\nexport class StakingTransaction extends TransactionBase {\n  private directive: Directive;\n  private stakeMsg: CreateValidator | EditValidator | Delegate | Undelegate | CollectRewards;\n  private nonce: number | string;\n  private gasLimit: number | string;\n  private gasPrice: number | string;\n  private chainId: number;\n  private rawTransaction: string;\n  private unsignedRawTransaction: string;\n  private signature: Signature;\n  private from: string;\n\n  constructor(\n    directive: Directive,\n    stakeMsg: CreateValidator | EditValidator | Delegate | Undelegate | CollectRewards,\n    nonce: number | string,\n    gasPrice: number | string,\n    gasLimit: number | string,\n    chainID: number,\n    messenger: Messenger = defaultMessenger,\n    txStatus = TxStatus.INTIALIZED,\n  ) {\n    super(messenger, txStatus);\n\n    this.directive = directive;\n    this.stakeMsg = stakeMsg;\n    this.nonce = nonce;\n    this.gasLimit = gasLimit;\n    this.gasPrice = gasPrice;\n    this.rawTransaction = '0x';\n    this.unsignedRawTransaction = '0x';\n    this.signature = {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0,\n    };\n    this.chainId = chainID;\n    this.from = '0x';\n  }\n\n  encode(): [string, any[]] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    // TODO: temporary hack for converting 0x00 to 0x\n    if (!this.directive) {\n      raw.push('0x');\n    } else {\n      raw.push(hexlify(this.directive));\n    }\n    raw.push(this.stakeMsg.encode());\n    if (!this.nonce) {\n      raw.push('0x');\n    } else {\n      raw.push(hexlify(this.nonce));\n    }\n    raw.push(hexlify(this.gasPrice));\n    raw.push(hexlify(this.gasLimit));\n    if (this.chainId != null && this.chainId !== 0) {\n      raw.push(hexlify(this.chainId));\n      raw.push('0x');\n      raw.push('0x');\n    }\n    return [encode(raw), raw];\n  }\n\n  rlpSign(prv: string): [Signature, string] {\n    const [unsignedRawTransaction, raw] = this.encode();\n    this.setUnsigned(unsignedRawTransaction);\n    const signature = sign(keccak256(unsignedRawTransaction), prv);\n    const signed = this.getRLPSigned(raw, signature);\n    return [signature, signed];\n  }\n\n  getRLPSigned(raw: any[], signature: Signature): string {\n    const sig = splitSignature(signature);\n    let v = 27 + (sig.recoveryParam || 0);\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += this.chainId * 2 + 8;\n\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r) || []));\n    raw.push(stripZeros(arrayify(sig.s) || []));\n\n    return encode(raw);\n  }\n\n  public async sendTransaction(): Promise<[StakingTransaction, string]> {\n    if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n      throw new Error('Transaction not signed');\n    }\n    if (!this.messenger) {\n      throw new Error('Messenger not found');\n    }\n\n    const res = await this.messenger.send(\n      RPCMethod.SendRawStakingTransaction,\n      this.rawTransaction,\n      this.messenger.chainType,\n      this.messenger.currentShard,\n      // 0, // Staking tx always sent to shard 0\n    );\n\n    if (res.isResult()) {\n      this.id = res.result;\n      this.emitTransactionHash(this.id);\n      this.setTxStatus(TxStatus.PENDING);\n      return [this, res.result];\n    } else if (res.isError()) {\n      this.emitConfirm(`transaction failed:${res.error.message}`);\n      this.setTxStatus(TxStatus.REJECTED);\n      return [this, `transaction failed:${res.error.message}`];\n    } else {\n      this.emitError('transaction failed');\n      throw new Error('transaction failed');\n    }\n  }\n\n  setUnsigned(unSigned: string) {\n    this.unsignedRawTransaction = unSigned;\n  }\n  setRawTransaction(rawTransaction: string) {\n    this.rawTransaction = rawTransaction;\n  }\n  setSignature(signature: Signature) {\n    this.signature = {\n      r: signature.r,\n      s: signature.s,\n      v: signature.v,\n      recoveryParam: signature.recoveryParam,\n    };\n  }\n  setNonce(nonce: number) {\n    this.nonce = nonce;\n  }\n  setFromAddress(address: string) {\n    this.from = address;\n  }\n  getUnsignedRawTransaction() {\n    return this.unsignedRawTransaction;\n  }\n  getRawTransaction() {\n    return this.rawTransaction;\n  }\n  getSignature() {\n    return this.signature;\n  }\n\n  getFromAddress() {\n    return this.from;\n  }\n  async confirm(\n    txHash: string,\n    maxAttempts: number = 20,\n    interval: number = 1000,\n    shardID: number | string = this.messenger.currentShard,\n    toShardID: number | string = 0,\n  ) {\n    const txConfirmed = await this.txConfirm(txHash, maxAttempts, interval, shardID);\n    if (shardID === toShardID) {\n      return txConfirmed;\n    }\n    if (txConfirmed.isConfirmed()) {\n      const cxConfirmed = await this.cxConfirm(txHash, maxAttempts, interval, toShardID);\n      return cxConfirmed;\n    } else {\n      return txConfirmed;\n    }\n  }\n}\n\n/** @hidden */\nexport class Description {\n  name: string;\n  identity: string;\n  website: string;\n  securityContact: string;\n  details: string;\n\n  constructor(\n    name: string,\n    identity: string,\n    website: string,\n    securityContact: string,\n    details: string,\n  ) {\n    this.name = name;\n    this.identity = identity;\n    this.website = website;\n    this.securityContact = securityContact;\n    this.details = details;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    const enc = new TextEncoder();\n    raw.push(enc.encode(this.name));\n    raw.push(enc.encode(this.identity));\n    raw.push(enc.encode(this.website));\n    raw.push(enc.encode(this.securityContact));\n    raw.push(enc.encode(this.details));\n    return raw;\n  }\n}\n\n/** @hidden */\nexport class Decimal {\n  value: BN;\n\n  constructor(value: string) {\n    if (value.length === 0) {\n      throw new Error(`decimal string is empty`);\n    }\n    let value1 = value;\n    if (value[0] === '-') {\n      throw new Error(`decimal fraction should be be between [0, 1]`);\n    }\n    if (value[0] === '+') {\n      value1 = value.substr(1);\n    }\n    if (value1.length === 0) {\n      throw new Error(`decimal string is empty`);\n    }\n    const spaced = value1.split(' ');\n    if (spaced.length > 1) {\n      throw new Error(`bad decimal string`);\n    }\n    const splitted = value1.split('.');\n    let len = 0;\n    let combinedStr = splitted[0];\n    if (splitted.length === 2) {\n      len = splitted[1].length;\n      if (len === 0 || combinedStr.length === 0) {\n        throw new Error(`bad decimal length`);\n      }\n      if (splitted[1][0] === '-') {\n        throw new Error(`bad decimal string`);\n      }\n      combinedStr += splitted[1];\n    } else if (splitted.length > 2) {\n      throw new Error(`too many periods to be a decimal string`);\n    }\n    if (len > StakingSettings.PRECISION) {\n      throw new Error(\n        `too much precision: precision should be less than ${StakingSettings.PRECISION}`,\n      );\n    }\n    const zerosToAdd = StakingSettings.PRECISION - len;\n    combinedStr += '0'.repeat(zerosToAdd);\n    combinedStr = combinedStr.replace(/^0+/, '');\n    const val = new Unit(combinedStr).asWei().toWei();\n    if (val.gt(new Unit(StakingSettings.MAX_DECIMAL.toString()).asWei().toWei())) {\n      throw new Error(`too large decimal fraction`);\n    }\n    this.value = val;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(numberToHex(this.value));\n    return raw;\n  }\n}\n\n/** @hidden */\nexport class CommissionRate {\n  rate: Decimal;\n  maxRate: Decimal;\n  maxChangeRate: Decimal;\n  constructor(rate: Decimal, maxRate: Decimal, maxChangeRate: Decimal) {\n    this.rate = rate;\n    this.maxRate = maxRate;\n    this.maxChangeRate = maxChangeRate;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    raw.push(this.rate.encode());\n    raw.push(this.maxRate.encode());\n    raw.push(this.maxChangeRate.encode());\n    return raw;\n  }\n}\n\nexport class CreateValidator {\n  validatorAddress: string;\n  description: Description;\n  commissionRates: CommissionRate;\n  minSelfDelegation: number;\n  maxTotalDelegation: number;\n  slotPubKeys: string[];\n  amount: number;\n  constructor(\n    validatorAddress: string,\n    description: Description,\n    commissionRates: CommissionRate,\n    minSelfDelegation: number,\n    maxTotalDelegation: number,\n    slotPubKeys: string[],\n    amount: number,\n  ) {\n    this.validatorAddress = validatorAddress;\n    this.description = description;\n    this.commissionRates = commissionRates;\n    this.minSelfDelegation = minSelfDelegation;\n    this.maxTotalDelegation = maxTotalDelegation;\n    this.slotPubKeys = slotPubKeys;\n    this.amount = amount;\n  }\n\n  encode(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(this.description.encode());\n    raw.push(this.commissionRates.encode());\n    raw.push(hexlify(this.minSelfDelegation));\n    raw.push(hexlify(this.maxTotalDelegation));\n    raw.push(this.encodeArr());\n    raw.push(hexlify(this.amount));\n    return raw;\n  }\n\n  encodeArr(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    this.slotPubKeys.forEach((pubKey) => {\n      raw.push(pubKey);\n    });\n    return raw;\n  }\n}\n\nexport class EditValidator {\n  validatorAddress: string;\n  description: Description;\n  commissionRate: Decimal;\n  minSelfDelegation: number;\n  maxTotalDelegation: number;\n  slotKeyToRemove: string;\n  slotKeyToAdd: string;\n  constructor(\n    validatorAddress: string,\n    description: Description,\n    commissionRate: Decimal,\n    minSelfDelegation: number,\n    maxTotalDelegation: number,\n    slotKeyToRemove: string,\n    slotKeyToAdd: string,\n  ) {\n    this.validatorAddress = validatorAddress;\n    this.description = description;\n    this.commissionRate = commissionRate;\n    this.minSelfDelegation = minSelfDelegation;\n    this.maxTotalDelegation = maxTotalDelegation;\n    this.slotKeyToRemove = slotKeyToRemove;\n    this.slotKeyToAdd = slotKeyToAdd;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array | Array<string | Uint8Array>> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(this.description.encode());\n    raw.push(this.commissionRate.encode());\n    raw.push(hexlify(this.minSelfDelegation));\n    raw.push(hexlify(this.maxTotalDelegation));\n    raw.push(this.slotKeyToRemove);\n    raw.push(this.slotKeyToAdd);\n    return raw;\n  }\n}\n\nexport class Delegate {\n  delegatorAddress: string;\n  validatorAddress: string;\n  amount: number;\n  constructor(delegatorAddress: string, validatorAddress: string, amount: number) {\n    this.delegatorAddress = delegatorAddress;\n    this.validatorAddress = validatorAddress;\n    this.amount = amount;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.delegatorAddress)));\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(hexlify(this.amount));\n    return raw;\n  }\n}\n\nexport class Undelegate {\n  delegatorAddress: string;\n  validatorAddress: string;\n  amount: number;\n  constructor(delegatorAddress: string, validatorAddress: string, amount: number) {\n    this.delegatorAddress = delegatorAddress;\n    this.validatorAddress = validatorAddress;\n    this.amount = amount;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.delegatorAddress)));\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.validatorAddress)));\n    raw.push(hexlify(this.amount));\n    return raw;\n  }\n}\n\nexport class CollectRewards {\n  delegatorAddress: string;\n  constructor(delegatorAddress: string) {\n    this.delegatorAddress = delegatorAddress;\n  }\n  encode(): any[] {\n    const raw: Array<string | Uint8Array> = [];\n    raw.push(hexlify(TransactionBase.normalizeAddress(this.delegatorAddress)));\n    return raw;\n  }\n}\n"]}},"error":null,"hash":"383951d02249687b68bb2595e0b9ac0b","cacheData":{"env":{}}}
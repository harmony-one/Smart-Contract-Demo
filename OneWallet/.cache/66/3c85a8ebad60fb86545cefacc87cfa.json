{"id":"../node_modules/@harmony-js/network/dist/rpcMethod/rpc.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/rpcMethod/rpc.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/src/rpcMethod/rpc.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/package.json","includedInParent":true,"mtime":1605232158322}],"generated":{"js":"\"use strict\";\n/**\n * ## About this package\n *\n * `@harmony-js/network` provides functions to handle messenger, providers and subscriptions...\n *\n * ## How to use this package\n *\n * ### 1. Create a Message\n * ```javascript\n * const { HttpProvider, Messenger } = require('@harmony-js/network');\n * const { ChainType, ChainID } = require('@harmony-js/utils');\n *\n * // create a custom messenger\n * const customMessenger = new Messenger(\n *   new HttpProvider('http://localhost:9500'),\n *   ChainType.Harmony, // if you are connected to Harmony's blockchain\n *   ChainID.HmyLocal, // check if the chainId is correct\n * )\n * ```\n *\n * @packageDocumentation\n * @module harmony-network\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RPCErrorCode = exports.RPCMethod = void 0;\n/**@ignore */\nvar RPCMethod;\n(function (RPCMethod) {\n    // 1. hmy_getBlockByHash\n    RPCMethod[\"GetBlockByHash\"] = \"hmy_getBlockByHash\";\n    // 2. hmy_getBlockByNumber\n    RPCMethod[\"GetBlockByNumber\"] = \"hmy_getBlockByNumber\";\n    // 3. hmy_getBlockTransactionCountByHash\n    RPCMethod[\"GetBlockTransactionCountByHash\"] = \"hmy_getBlockTransactionCountByHash\";\n    // 4. hmy_getBlockTransactionCountByNumber\n    RPCMethod[\"GetBlockTransactionCountByNumber\"] = \"hmy_getBlockTransactionCountByNumber\";\n    // 5. hmy_getCode\n    RPCMethod[\"GetCode\"] = \"hmy_getCode\";\n    // 6. hmy_getTransactionByBlockHashAndIndex\n    RPCMethod[\"GetTransactionByBlockHashAndIndex\"] = \"hmy_getTransactionByBlockHashAndIndex\";\n    // 7. hmy_getTransactionByBlockNumberAndIndex\n    RPCMethod[\"GetTransactionByBlockNumberAndIndex\"] = \"hmy_getTransactionByBlockNumberAndIndex\";\n    // 8. hmy_getTransactionByHash\n    RPCMethod[\"GetTransactionByHash\"] = \"hmy_getTransactionByHash\";\n    RPCMethod[\"GetTransactionReceipt\"] = \"hmy_getTransactionReceipt\";\n    RPCMethod[\"GetCXReceiptByHash\"] = \"hmy_getCXReceiptByHash\";\n    // 9. hmy_syncing\n    RPCMethod[\"Syncing\"] = \"hmy_syncing\";\n    // 10. net_peerCount\n    RPCMethod[\"PeerCount\"] = \"net_peerCount\";\n    // 11. hmy_getBalance\n    RPCMethod[\"GetBalance\"] = \"hmy_getBalance\";\n    // 12. hmy_getStorageAt\n    RPCMethod[\"GetStorageAt\"] = \"hmy_getStorageAt\";\n    // 13. hmy_getTransactionCount\n    RPCMethod[\"GetTransactionCount\"] = \"hmy_getTransactionCount\";\n    // 14. hmy_sendTransaction\n    RPCMethod[\"SendTransaction\"] = \"hmy_sendTransaction\";\n    // 15. hmy_sendRawTransaction\n    RPCMethod[\"SendRawTransaction\"] = \"hmy_sendRawTransaction\";\n    // 16. hmy_subscribe\n    RPCMethod[\"Subscribe\"] = \"hmy_subscribe\";\n    // 17. hmy_getlogs\n    RPCMethod[\"GetPastLogs\"] = \"hmy_getLogs\";\n    // 18. hmy_getWork\n    RPCMethod[\"GetWork\"] = \"hmy_getWork\";\n    // 19. hmy_submitWork\n    // SubmitWork = 'hmy_submitWork',\n    // 20. hmy_getProof\n    RPCMethod[\"GetProof\"] = \"hmy_getProof\";\n    // 21, hmy_getFilterChanges\n    RPCMethod[\"GetFilterChanges\"] = \"hmy_getFilterChanges\";\n    // 22. hmy_newPendingTransactionFilter\n    RPCMethod[\"NewPendingTransactionFilter\"] = \"hmy_newPendingTransactionFilter\";\n    // 23. hmy_newBlockFilter\n    RPCMethod[\"NewBlockFilter\"] = \"hmy_newBlockFilter\";\n    // 24. hmy_newFilter\n    RPCMethod[\"NewFilter\"] = \"hmy_newFilter\";\n    // 25. hmy_call\n    RPCMethod[\"Call\"] = \"hmy_call\";\n    // 26. hmy_estimateGas\n    RPCMethod[\"EstimateGas\"] = \"hmy_estimateGas\";\n    // 27. hmy_gasPrice\n    RPCMethod[\"GasPrice\"] = \"hmy_gasPrice\";\n    // 28. hmy_blockNumber\n    RPCMethod[\"BlockNumber\"] = \"hmy_blockNumber\";\n    // 29. hmy_unsubscribe\n    RPCMethod[\"UnSubscribe\"] = \"hmy_unsubscribe\";\n    // 30. net_version\n    RPCMethod[\"NetVersion\"] = \"net_version\";\n    // 31. hmy_protocolVersion\n    RPCMethod[\"ProtocolVersion\"] = \"hmy_protocolVersion\";\n    // 32. hmy_getShardingStructure\n    RPCMethod[\"GetShardingStructure\"] = \"hmy_getShardingStructure\";\n    // 33. hmy_sendRawStakingTransaction\n    RPCMethod[\"SendRawStakingTransaction\"] = \"hmy_sendRawStakingTransaction\";\n})(RPCMethod = exports.RPCMethod || (exports.RPCMethod = {}));\n/**@ignore */\nvar RPCErrorCode;\n(function (RPCErrorCode) {\n    // Standard JSON-RPC 2.0 errors\n    // RPC_INVALID_REQUEST is internally mapped to HTTP_BAD_REQUEST (400).\n    // It should not be used for application-layer errors.\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_REQUEST\"] = -32600] = \"RPC_INVALID_REQUEST\";\n    // RPC_METHOD_NOT_FOUND is internally mapped to HTTP_NOT_FOUND (404).\n    // It should not be used for application-layer errors.\n    RPCErrorCode[RPCErrorCode[\"RPC_METHOD_NOT_FOUND\"] = -32601] = \"RPC_METHOD_NOT_FOUND\";\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_PARAMS\"] = -32602] = \"RPC_INVALID_PARAMS\";\n    // RPC_INTERNAL_ERROR should only be used for genuine errors in bitcoind\n    // (for example datadir corruption).\n    RPCErrorCode[RPCErrorCode[\"RPC_INTERNAL_ERROR\"] = -32603] = \"RPC_INTERNAL_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_PARSE_ERROR\"] = -32700] = \"RPC_PARSE_ERROR\";\n    // General application defined errors\n    RPCErrorCode[RPCErrorCode[\"RPC_MISC_ERROR\"] = -1] = \"RPC_MISC_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_TYPE_ERROR\"] = -3] = \"RPC_TYPE_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_ADDRESS_OR_KEY\"] = -5] = \"RPC_INVALID_ADDRESS_OR_KEY\";\n    RPCErrorCode[RPCErrorCode[\"RPC_INVALID_PARAMETER\"] = -8] = \"RPC_INVALID_PARAMETER\";\n    RPCErrorCode[RPCErrorCode[\"RPC_DATABASE_ERROR\"] = -20] = \"RPC_DATABASE_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_DESERIALIZATION_ERROR\"] = -22] = \"RPC_DESERIALIZATION_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_VERIFY_ERROR\"] = -25] = \"RPC_VERIFY_ERROR\";\n    RPCErrorCode[RPCErrorCode[\"RPC_VERIFY_REJECTED\"] = -26] = \"RPC_VERIFY_REJECTED\";\n    RPCErrorCode[RPCErrorCode[\"RPC_IN_WARMUP\"] = -28] = \"RPC_IN_WARMUP\";\n    RPCErrorCode[RPCErrorCode[\"RPC_METHOD_DEPRECATED\"] = -32] = \"RPC_METHOD_DEPRECATED\";\n})(RPCErrorCode = exports.RPCErrorCode || (exports.RPCErrorCode = {}));\n"},"sourceMaps":{"js":{"version":3,"file":"rpc.js","sourceRoot":"","sources":["../../src/rpcMethod/rpc.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;GAsBG;;;AAEH,aAAa;AACb,IAAY,SAwEX;AAxED,WAAY,SAAS;IACnB,wBAAwB;IACxB,kDAAqC,CAAA;IACrC,0BAA0B;IAC1B,sDAAyC,CAAA;IACzC,wCAAwC;IACxC,kFAAqE,CAAA;IACrE,0CAA0C;IAC1C,sFAAyE,CAAA;IACzE,iBAAiB;IACjB,oCAAuB,CAAA;IACvB,2CAA2C;IAC3C,wFAA2E,CAAA;IAC3E,6CAA6C;IAC7C,4FAA+E,CAAA;IAC/E,8BAA8B;IAC9B,8DAAiD,CAAA;IAEjD,gEAAmD,CAAA;IAEnD,0DAA6C,CAAA;IAC7C,iBAAiB;IACjB,oCAAuB,CAAA;IACvB,oBAAoB;IACpB,wCAA2B,CAAA;IAE3B,qBAAqB;IACrB,0CAA6B,CAAA;IAC7B,uBAAuB;IACvB,8CAAiC,CAAA;IACjC,8BAA8B;IAC9B,4DAA+C,CAAA;IAC/C,0BAA0B;IAC1B,oDAAuC,CAAA;IACvC,6BAA6B;IAC7B,0DAA6C,CAAA;IAC7C,oBAAoB;IACpB,wCAA2B,CAAA;IAC3B,kBAAkB;IAClB,wCAA2B,CAAA;IAC3B,kBAAkB;IAClB,oCAAuB,CAAA;IACvB,qBAAqB;IACrB,iCAAiC;IACjC,mBAAmB;IACnB,sCAAyB,CAAA;IACzB,2BAA2B;IAC3B,sDAAyC,CAAA;IACzC,sCAAsC;IACtC,4EAA+D,CAAA;IAC/D,yBAAyB;IACzB,kDAAqC,CAAA;IACrC,oBAAoB;IACpB,wCAA2B,CAAA;IAC3B,eAAe;IACf,8BAAiB,CAAA;IACjB,sBAAsB;IACtB,4CAA+B,CAAA;IAC/B,mBAAmB;IACnB,sCAAyB,CAAA;IACzB,sBAAsB;IACtB,4CAA+B,CAAA;IAC/B,sBAAsB;IACtB,4CAA+B,CAAA;IAC/B,kBAAkB;IAClB,uCAA0B,CAAA;IAC1B,0BAA0B;IAC1B,oDAAuC,CAAA;IACvC,+BAA+B;IAC/B,8DAAiD,CAAA;IACjD,oCAAoC;IACpC,wEAA2D,CAAA;AAC7D,CAAC,EAxEW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAwEpB;AAED,aAAa;AACb,IAAY,YAyBX;AAzBD,WAAY,YAAY;IACtB,+BAA+B;IAC/B,sEAAsE;IACtE,sDAAsD;IACtD,kFAA4B,CAAA;IAC5B,qEAAqE;IACrE,sDAAsD;IACtD,oFAA6B,CAAA;IAC7B,gFAA2B,CAAA;IAC3B,wEAAwE;IACxE,oCAAoC;IACpC,gFAA2B,CAAA;IAC3B,0EAAwB,CAAA;IAExB,qCAAqC;IACrC,oEAAmB,CAAA;IACnB,oEAAmB,CAAA;IACnB,4FAA+B,CAAA;IAC/B,kFAA0B,CAAA;IAC1B,6EAAwB,CAAA;IACxB,2FAA+B,CAAA;IAC/B,yEAAsB,CAAA;IACtB,+EAAyB,CAAA;IACzB,mEAAmB,CAAA;IACnB,mFAA2B,CAAA;AAC7B,CAAC,EAzBW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAyBvB","sourcesContent":["/**\n * ## About this package\n *\n * `@harmony-js/network` provides functions to handle messenger, providers and subscriptions...\n *\n * ## How to use this package\n *\n * ### 1. Create a Message\n * ```javascript\n * const { HttpProvider, Messenger } = require('@harmony-js/network');\n * const { ChainType, ChainID } = require('@harmony-js/utils');\n *\n * // create a custom messenger\n * const customMessenger = new Messenger(\n *   new HttpProvider('http://localhost:9500'),\n *   ChainType.Harmony, // if you are connected to Harmony's blockchain\n *   ChainID.HmyLocal, // check if the chainId is correct\n * )\n * ```\n *\n * @packageDocumentation\n * @module harmony-network\n */\n\n/**@ignore */\nexport enum RPCMethod {\n  // 1. hmy_getBlockByHash\n  GetBlockByHash = 'hmy_getBlockByHash',\n  // 2. hmy_getBlockByNumber\n  GetBlockByNumber = 'hmy_getBlockByNumber',\n  // 3. hmy_getBlockTransactionCountByHash\n  GetBlockTransactionCountByHash = 'hmy_getBlockTransactionCountByHash',\n  // 4. hmy_getBlockTransactionCountByNumber\n  GetBlockTransactionCountByNumber = 'hmy_getBlockTransactionCountByNumber',\n  // 5. hmy_getCode\n  GetCode = 'hmy_getCode',\n  // 6. hmy_getTransactionByBlockHashAndIndex\n  GetTransactionByBlockHashAndIndex = 'hmy_getTransactionByBlockHashAndIndex',\n  // 7. hmy_getTransactionByBlockNumberAndIndex\n  GetTransactionByBlockNumberAndIndex = 'hmy_getTransactionByBlockNumberAndIndex',\n  // 8. hmy_getTransactionByHash\n  GetTransactionByHash = 'hmy_getTransactionByHash',\n\n  GetTransactionReceipt = 'hmy_getTransactionReceipt',\n\n  GetCXReceiptByHash = 'hmy_getCXReceiptByHash',\n  // 9. hmy_syncing\n  Syncing = 'hmy_syncing',\n  // 10. net_peerCount\n  PeerCount = 'net_peerCount',\n\n  // 11. hmy_getBalance\n  GetBalance = 'hmy_getBalance',\n  // 12. hmy_getStorageAt\n  GetStorageAt = 'hmy_getStorageAt',\n  // 13. hmy_getTransactionCount\n  GetTransactionCount = 'hmy_getTransactionCount',\n  // 14. hmy_sendTransaction\n  SendTransaction = 'hmy_sendTransaction',\n  // 15. hmy_sendRawTransaction\n  SendRawTransaction = 'hmy_sendRawTransaction',\n  // 16. hmy_subscribe\n  Subscribe = 'hmy_subscribe',\n  // 17. hmy_getlogs\n  GetPastLogs = 'hmy_getLogs',\n  // 18. hmy_getWork\n  GetWork = 'hmy_getWork',\n  // 19. hmy_submitWork\n  // SubmitWork = 'hmy_submitWork',\n  // 20. hmy_getProof\n  GetProof = 'hmy_getProof',\n  // 21, hmy_getFilterChanges\n  GetFilterChanges = 'hmy_getFilterChanges',\n  // 22. hmy_newPendingTransactionFilter\n  NewPendingTransactionFilter = 'hmy_newPendingTransactionFilter',\n  // 23. hmy_newBlockFilter\n  NewBlockFilter = 'hmy_newBlockFilter',\n  // 24. hmy_newFilter\n  NewFilter = 'hmy_newFilter',\n  // 25. hmy_call\n  Call = 'hmy_call',\n  // 26. hmy_estimateGas\n  EstimateGas = 'hmy_estimateGas',\n  // 27. hmy_gasPrice\n  GasPrice = 'hmy_gasPrice',\n  // 28. hmy_blockNumber\n  BlockNumber = 'hmy_blockNumber',\n  // 29. hmy_unsubscribe\n  UnSubscribe = 'hmy_unsubscribe',\n  // 30. net_version\n  NetVersion = 'net_version',\n  // 31. hmy_protocolVersion\n  ProtocolVersion = 'hmy_protocolVersion',\n  // 32. hmy_getShardingStructure\n  GetShardingStructure = 'hmy_getShardingStructure',\n  // 33. hmy_sendRawStakingTransaction\n  SendRawStakingTransaction = 'hmy_sendRawStakingTransaction',\n}\n\n/**@ignore */\nexport enum RPCErrorCode {\n  // Standard JSON-RPC 2.0 errors\n  // RPC_INVALID_REQUEST is internally mapped to HTTP_BAD_REQUEST (400).\n  // It should not be used for application-layer errors.\n  RPC_INVALID_REQUEST = -32600,\n  // RPC_METHOD_NOT_FOUND is internally mapped to HTTP_NOT_FOUND (404).\n  // It should not be used for application-layer errors.\n  RPC_METHOD_NOT_FOUND = -32601,\n  RPC_INVALID_PARAMS = -32602,\n  // RPC_INTERNAL_ERROR should only be used for genuine errors in bitcoind\n  // (for example datadir corruption).\n  RPC_INTERNAL_ERROR = -32603,\n  RPC_PARSE_ERROR = -32700,\n\n  // General application defined errors\n  RPC_MISC_ERROR = -1, // std::exception thrown in command handling\n  RPC_TYPE_ERROR = -3, // Unexpected type was passed as parameter\n  RPC_INVALID_ADDRESS_OR_KEY = -5, // Invalid address or key\n  RPC_INVALID_PARAMETER = -8, // Invalid, missing or duplicate parameter\n  RPC_DATABASE_ERROR = -20, // Database error\n  RPC_DESERIALIZATION_ERROR = -22, // Error parsing or validating structure in raw format\n  RPC_VERIFY_ERROR = -25, // General error during transaction or block submission\n  RPC_VERIFY_REJECTED = -26, // Transaction or block was rejected by network rules\n  RPC_IN_WARMUP = -28, // Client still warming up\n  RPC_METHOD_DEPRECATED = -32, // RPC method is deprecated\n}\n"]}},"error":null,"hash":"1a57a155a24241848cb645085f52e286","cacheData":{"env":{}}}
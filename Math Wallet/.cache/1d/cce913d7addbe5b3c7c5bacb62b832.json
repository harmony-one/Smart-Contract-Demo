{"id":"../node_modules/@harmony-js/contract/dist/abi/api.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/contract/dist/abi/api.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/contract/src/abi/api.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/contract/package.json","includedInParent":true,"mtime":1605275414276},{"name":"./abiCoder","loc":{"line":9,"column":25},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/contract/dist/abi/api.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/contract/dist/abi/abiCoder.js"},{"name":"@harmony-js/utils","loc":{"line":10,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/contract/dist/abi/api.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/utils/dist/index.js"},{"name":"@harmony-js/crypto","loc":{"line":11,"column":23},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/contract/dist/abi/api.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/crypto/dist/index.js"},{"name":"./utils","loc":{"line":12,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/contract/dist/abi/api.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/contract/dist/abi/utils.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-contract\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbiCoderClass = void 0;\nvar abiCoder_1 = require(\"./abiCoder\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar utils_2 = require(\"./utils\");\nvar AbiCoderClass = /** @class */ (function () {\n    function AbiCoderClass(coder) {\n        this.coder = coder;\n    }\n    AbiCoderClass.prototype.encodeFunctionSignature = function (functionName) {\n        if (utils_1.isObject(functionName)) {\n            functionName = utils_2.jsonInterfaceMethodToString(functionName);\n        }\n        var result = crypto_1.keccak256(abiCoder_1.toUtf8Bytes(functionName));\n        return result.slice(0, 10);\n    };\n    AbiCoderClass.prototype.encodeEventSignature = function (functionName) {\n        if (utils_1.isObject(functionName)) {\n            functionName = utils_2.jsonInterfaceMethodToString(functionName);\n        }\n        var result = crypto_1.keccak256(abiCoder_1.toUtf8Bytes(functionName));\n        return result;\n    };\n    AbiCoderClass.prototype.encodeParameter = function (types, param) {\n        return this.encodeParameters([types], [param]);\n    };\n    AbiCoderClass.prototype.encodeParameters = function (types, params) {\n        return this.coder.encode(types, params);\n    };\n    AbiCoderClass.prototype.encodeFunctionCall = function (jsonInterface, params) {\n        return (this.encodeFunctionSignature(jsonInterface) +\n            this.encodeParameters(jsonInterface.inputs, params).replace('0x', ''));\n    };\n    AbiCoderClass.prototype.decodeParameter = function (type, bytes) {\n        return this.decodeParameters([type], bytes)[0];\n    };\n    AbiCoderClass.prototype.decodeParameters = function (outputs, bytes) {\n        if (utils_1.isArray(outputs) && outputs.length === 0) {\n            throw new Error('Empty outputs array given!');\n        }\n        if (!bytes || bytes === '0x' || bytes === '0X') {\n            throw new Error(\"Invalid bytes string given: \" + bytes);\n        }\n        var result = this.coder.decode(outputs, bytes);\n        var returnValues = {};\n        var decodedValue;\n        if (utils_1.isArray(result)) {\n            if (outputs.length > 1) {\n                outputs.forEach(function (output, i) {\n                    decodedValue = result[i];\n                    if (decodedValue === '0x') {\n                        decodedValue = null;\n                    }\n                    returnValues[i] = utils_2.bnToString(decodedValue);\n                    if (utils_1.isObject(output) && output.name) {\n                        returnValues[output.name] = utils_2.bnToString(decodedValue);\n                    }\n                });\n                return returnValues;\n            }\n            return utils_2.bnToString(result);\n        }\n        if (utils_1.isObject(outputs[0]) && outputs[0].name) {\n            returnValues[outputs[0].name] = utils_2.bnToString(result);\n        }\n        returnValues[0] = utils_2.bnToString(result);\n        return returnValues;\n    };\n    AbiCoderClass.prototype.decodeLog = function (inputs, data, topics) {\n        var _this = this;\n        if (data === void 0) { data = ''; }\n        var returnValues = {};\n        var topicCount = 0;\n        var value;\n        var nonIndexedInputKeys = [];\n        var nonIndexedInputItems = [];\n        if (!utils_1.isArray(topics)) {\n            topics = [topics];\n        }\n        inputs.forEach(function (input, i) {\n            if (input.indexed) {\n                if (input.type === 'string') {\n                    return;\n                }\n                value = topics[topicCount];\n                if (_this.isStaticType(input.type)) {\n                    value = _this.decodeParameter(input.type, topics[topicCount]);\n                }\n                returnValues[i] = utils_2.bnToString(value);\n                returnValues[input.name] = utils_2.bnToString(value);\n                topicCount++;\n                return;\n            }\n            nonIndexedInputKeys.push(i);\n            nonIndexedInputItems.push(input);\n        });\n        if (data) {\n            var values_1 = this.decodeParameters(nonIndexedInputItems, data);\n            var decodedValue_1;\n            nonIndexedInputKeys.forEach(function (itemKey, index) {\n                decodedValue_1 = values_1[index];\n                returnValues[itemKey] = utils_2.bnToString(decodedValue_1);\n                returnValues[nonIndexedInputItems[index].name] = utils_2.bnToString(decodedValue_1);\n            });\n        }\n        return returnValues;\n    };\n    AbiCoderClass.prototype.isStaticType = function (type) {\n        if (type === 'bytes') {\n            return false;\n        }\n        if (type === 'string') {\n            return false;\n        }\n        if (type.indexOf('[') && type.slice(type.indexOf('[')).length === 2) {\n            return false;\n        }\n        return true;\n    };\n    return AbiCoderClass;\n}());\nexports.AbiCoderClass = AbiCoderClass;\n"},"sourceMaps":{"js":{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/abi/api.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-contract\n * @hidden\n */\n\nimport { AbiCoder as ABICoder, ParamType, toUtf8Bytes } from './abiCoder';\nimport { isObject, isArray } from '@harmony-js/utils';\nimport { keccak256, Arrayish } from '@harmony-js/crypto';\nimport { jsonInterfaceMethodToString, bnToString } from './utils';\n\nexport class AbiCoderClass {\n  coder: ABICoder;\n  constructor(coder: ABICoder) {\n    this.coder = coder;\n  }\n  encodeFunctionSignature(functionName: any) {\n    if (isObject(functionName)) {\n      functionName = jsonInterfaceMethodToString(functionName);\n    }\n    const result = keccak256(toUtf8Bytes(functionName));\n    return result.slice(0, 10);\n  }\n  encodeEventSignature(functionName: any) {\n    if (isObject(functionName)) {\n      functionName = jsonInterfaceMethodToString(functionName);\n    }\n    const result = keccak256(toUtf8Bytes(functionName));\n    return result;\n  }\n  encodeParameter(types: string | ParamType, param: any) {\n    return this.encodeParameters([types], [param]);\n  }\n  encodeParameters(types: Array<string | ParamType>, params: any[]) {\n    return this.coder.encode(types, params);\n  }\n  encodeFunctionCall(jsonInterface: any, params: any[]) {\n    return (\n      this.encodeFunctionSignature(jsonInterface) +\n      this.encodeParameters(jsonInterface.inputs, params).replace('0x', '')\n    );\n  }\n  decodeParameter(type: ParamType, bytes: Arrayish) {\n    return this.decodeParameters([type], bytes)[0];\n  }\n  decodeParameters(outputs: ParamType[], bytes: Arrayish) {\n    if (isArray(outputs) && outputs.length === 0) {\n      throw new Error('Empty outputs array given!');\n    }\n\n    if (!bytes || bytes === '0x' || bytes === '0X') {\n      throw new Error(`Invalid bytes string given: ${bytes}`);\n    }\n\n    const result = this.coder.decode(outputs, bytes);\n\n    const returnValues: any = {};\n    let decodedValue;\n\n    if (isArray(result)) {\n      if (outputs.length > 1) {\n        outputs.forEach((output: any, i) => {\n          decodedValue = result[i];\n\n          if (decodedValue === '0x') {\n            decodedValue = null;\n          }\n\n          returnValues[i] = bnToString(decodedValue);\n\n          if (isObject(output) && output.name) {\n            returnValues[output.name] = bnToString(decodedValue);\n          }\n        });\n\n        return returnValues;\n      }\n\n      return bnToString(result);\n    }\n\n    if (isObject(outputs[0]) && outputs[0].name) {\n      returnValues[outputs[0].name] = bnToString(result);\n    }\n\n    returnValues[0] = bnToString(result);\n\n    return returnValues;\n  }\n\n  decodeLog(inputs: any, data = '', topics: any) {\n    const returnValues: any = {};\n    let topicCount = 0;\n    let value;\n    const nonIndexedInputKeys: any[] = [];\n    const nonIndexedInputItems: any[] = [];\n\n    if (!isArray(topics)) {\n      topics = [topics];\n    }\n\n    inputs.forEach((input: any, i: number) => {\n      if (input.indexed) {\n        if (input.type === 'string') {\n          return;\n        }\n\n        value = topics[topicCount];\n\n        if (this.isStaticType(input.type)) {\n          value = this.decodeParameter(input.type, topics[topicCount]);\n        }\n\n        returnValues[i] = bnToString(value);\n        returnValues[input.name] = bnToString(value);\n        topicCount++;\n\n        return;\n      }\n\n      nonIndexedInputKeys.push(i);\n      nonIndexedInputItems.push(input);\n    });\n\n    if (data) {\n      const values = this.decodeParameters(nonIndexedInputItems, data);\n\n      let decodedValue;\n      nonIndexedInputKeys.forEach((itemKey, index) => {\n        decodedValue = values[index];\n\n        returnValues[itemKey] = bnToString(decodedValue);\n        returnValues[nonIndexedInputItems[index].name] = bnToString(decodedValue);\n      });\n    }\n\n    return returnValues;\n  }\n  isStaticType(type: any) {\n    if (type === 'bytes') {\n      return false;\n    }\n\n    if (type === 'string') {\n      return false;\n    }\n\n    if (type.indexOf('[') && type.slice(type.indexOf('[')).length === 2) {\n      return false;\n    }\n\n    return true;\n  }\n}\n"]}},"error":null,"hash":"d9f0a29bc4ca9549f2d0db4b716c2b8e","cacheData":{"env":{}}}
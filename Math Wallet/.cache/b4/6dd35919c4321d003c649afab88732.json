{"id":"../node_modules/@harmony-js/core/dist/harmony.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmony.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/src/harmony.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":8,"column":22},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmony.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"@harmony-js/crypto","loc":{"line":9,"column":42},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmony.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/index.js"},{"name":"@harmony-js/utils","loc":{"line":10,"column":41},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmony.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/utils/dist/index.js"},{"name":"@harmony-js/network","loc":{"line":11,"column":24},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmony.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/index.js"},{"name":"@harmony-js/transaction","loc":{"line":12,"column":28},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmony.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/transaction/dist/index.js"},{"name":"@harmony-js/staking","loc":{"line":13,"column":24},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmony.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/staking/dist/index.js"},{"name":"@harmony-js/contract","loc":{"line":14,"column":25},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmony.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/contract/dist/index.js"},{"name":"@harmony-js/account","loc":{"line":15,"column":24},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmony.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/account/dist/index.js"},{"name":"./blockchain","loc":{"line":16,"column":27},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/harmony.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/blockchain.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-core\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Harmony = void 0;\nvar tslib_1 = require(\"tslib\");\nvar crypto = tslib_1.__importStar(require(\"@harmony-js/crypto\"));\nvar utils = tslib_1.__importStar(require(\"@harmony-js/utils\"));\nvar network_1 = require(\"@harmony-js/network\");\nvar transaction_1 = require(\"@harmony-js/transaction\");\nvar staking_1 = require(\"@harmony-js/staking\");\nvar contract_1 = require(\"@harmony-js/contract\");\nvar account_1 = require(\"@harmony-js/account\");\nvar blockchain_1 = require(\"./blockchain\");\nvar Harmony = /** @class */ (function (_super) {\n    tslib_1.__extends(Harmony, _super);\n    /**\n     * Create a harmony instance\n     *\n     * @param url The end-points of the hmy blockchain\n     * @param config set up `ChainID` and `ChainType`, typically we can use the default values\n     *\n     * @example\n     * ```\n     * // import or require Harmony class\n     * const { Harmony } = require('@harmony-js/core');\n     *\n     * // import or require settings\n     * const { ChainID, ChainType } = require('@harmony-js/utils');\n     *\n     * // Initialize the Harmony instance\n     * const hmy = new Harmony(\n     *   // rpc url:\n     *   // local: http://localhost:9500\n     *   // testnet: https://api.s0.b.hmny.io/\n     *   // mainnet: https://api.s0.t.hmny.io/\n     *   'http://localhost:9500',\n     *   {\n     *     // chainType set to Harmony\n     *     chainType: ChainType.Harmony,\n     *     // chainType set to HmyLocal\n     *     chainId: ChainID.HmyLocal,\n     *   },\n     * );\n     * ```\n     */\n    function Harmony(url, config) {\n        if (config === void 0) { config = {\n            chainId: utils.defaultConfig.Default.Chain_ID,\n            chainType: utils.defaultConfig.Default.Chain_Type,\n        }; }\n        var _this = _super.call(this, config.chainType, config.chainId) || this;\n        /**@ignore*/\n        _this.Modules = {\n            HttpProvider: network_1.HttpProvider,\n            WSProvider: network_1.WSProvider,\n            Messenger: network_1.Messenger,\n            Blockchain: blockchain_1.Blockchain,\n            TransactionFactory: transaction_1.TransactionFactory,\n            StakingFactory: staking_1.StakingFactory,\n            Wallet: account_1.Wallet,\n            Transaction: transaction_1.Transaction,\n            StakingTransaction: staking_1.StakingTransaction,\n            Account: account_1.Account,\n            Contract: contract_1.Contract,\n        };\n        var providerUrl = config.chainUrl || url || utils.defaultConfig.Default.Chain_URL;\n        _this.provider = new network_1.Provider(providerUrl).provider;\n        _this.messenger = new network_1.Messenger(_this.provider, _this.chainType, _this.chainId);\n        _this.blockchain = new blockchain_1.Blockchain(_this.messenger);\n        _this.transactions = new transaction_1.TransactionFactory(_this.messenger);\n        _this.stakings = new staking_1.StakingFactory(_this.messenger);\n        _this.wallet = new account_1.Wallet(_this.messenger);\n        _this.contracts = new contract_1.ContractFactory(_this.wallet);\n        _this.crypto = crypto;\n        _this.utils = utils;\n        _this.defaultShardID = config.shardID;\n        if (_this.defaultShardID !== undefined) {\n            _this.setShardID(_this.defaultShardID);\n        }\n        return _this;\n    }\n    /**\n     * Will change the provider for its module.\n     *\n     * @param provider a valid provider, you can replace it with your own working node\n     *\n     * @example\n     * ```javascript\n     * const tmp = hmy.setProvider('http://localhost:9500');\n     * ```\n     */\n    Harmony.prototype.setProvider = function (provider) {\n        this.provider = new network_1.Provider(provider).provider;\n        this.messenger.setProvider(this.provider);\n        this.setMessenger(this.messenger);\n    };\n    /**\n     * set the chainID\n     *\n     * @hint\n     * ```\n     * Default = 0,\n     * EthMainnet = 1,\n      Morden = 2,\n      Ropsten = 3,\n      Rinkeby = 4,\n      RootstockMainnet = 30,\n      RootstockTestnet = 31,\n      Kovan = 42,\n      EtcMainnet = 61,\n      EtcTestnet = 62,\n      Geth = 1337,\n      Ganache = 0,\n      HmyMainnet = 1,\n      HmyTestnet = 2,\n      HmyLocal = 2,\n      HmyPangaea = 3\n     * ```\n     * @param chainId\n     *\n     * @example\n     * ```\n     * hmy.setChainId(2);\n     * ```\n     */\n    Harmony.prototype.setChainId = function (chainId) {\n        this.chainId = chainId;\n        this.messenger.setChainId(this.chainId);\n        this.setMessenger(this.messenger);\n    };\n    /**\n     * Change the Shard ID\n     *\n     * @example\n     * ```\n     * hmy.setShardID(2);\n     * ```\n     */\n    Harmony.prototype.setShardID = function (shardID) {\n        this.defaultShardID = shardID;\n        this.messenger.setDefaultShardID(this.defaultShardID);\n        this.setMessenger(this.messenger);\n    };\n    /**\n     * set the chainType\n     *\n     * @param chainType `hmy` or `eth`\n     *\n     * @example\n     * ```\n     * // set chainType to hmy\n     * hmy.setChainType('hmy');\n     * // set chainType to eth\n     * hmy.setChainType('eth');\n     * ```\n     */\n    Harmony.prototype.setChainType = function (chainType) {\n        this.chainType = chainType;\n        this.messenger.setChainType(this.chainType);\n        this.setMessenger(this.messenger);\n    };\n    /**\n     * Set the sharding Structure\n     *\n     * @param shardingStructures The array of information of sharding structures\n     *\n     * @example\n     * ```javascript\n     * hmy.shardingStructures([\n     *   {\"current\":true,\"http\":\"http://127.0.0.1:9500\",\n     *    \"shardID\":0,\"ws\":\"ws://127.0.0.1:9800\"},\n     *   {\"current\":false,\"http\":\"http://127.0.0.1:9501\",\n     *    \"shardID\":1,\"ws\":\"ws://127.0.0.1:9801\"}\n     * ]);\n     * ```\n     */\n    Harmony.prototype.shardingStructures = function (shardingStructures) {\n        var e_1, _a;\n        try {\n            for (var shardingStructures_1 = tslib_1.__values(shardingStructures), shardingStructures_1_1 = shardingStructures_1.next(); !shardingStructures_1_1.done; shardingStructures_1_1 = shardingStructures_1.next()) {\n                var shard = shardingStructures_1_1.value;\n                var shardID = typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n                this.messenger.shardProviders.set(shardID, {\n                    current: shard.current !== undefined ? shard.current : false,\n                    shardID: shardID,\n                    http: shard.http,\n                    ws: shard.ws,\n                });\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (shardingStructures_1_1 && !shardingStructures_1_1.done && (_a = shardingStructures_1.return)) _a.call(shardingStructures_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.setMessenger(this.messenger);\n    };\n    /**@ignore*/\n    Harmony.prototype.setMessenger = function (messenger) {\n        this.blockchain.setMessenger(messenger);\n        this.wallet.setMessenger(messenger);\n        this.transactions.setMessenger(messenger);\n        this.stakings.setMessenger(messenger);\n    };\n    return Harmony;\n}(utils.HarmonyCore));\nexports.Harmony = Harmony;\n"},"sourceMaps":{"js":{"version":3,"file":"harmony.js","sourceRoot":"","sources":["../src/harmony.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-core\n */\n\nimport * as crypto from '@harmony-js/crypto';\nimport * as utils from '@harmony-js/utils';\n\nimport { Provider, HttpProvider, Messenger, WSProvider, ShardingItem } from '@harmony-js/network';\nimport { TransactionFactory, Transaction } from '@harmony-js/transaction';\nimport { StakingTransaction, StakingFactory } from '@harmony-js/staking';\nimport { ContractFactory, Contract } from '@harmony-js/contract';\nimport { Wallet, Account } from '@harmony-js/account';\nimport { Blockchain } from './blockchain';\nimport { HarmonyConfig } from './util';\n\nexport class Harmony extends utils.HarmonyCore {\n  /**@ignore*/\n  Modules = {\n    HttpProvider,\n    WSProvider,\n    Messenger,\n    Blockchain,\n    TransactionFactory,\n    StakingFactory,\n    Wallet,\n    Transaction,\n    StakingTransaction,\n    Account,\n    Contract,\n  };\n  /**@ignore*/\n  messenger: Messenger;\n  /**@ignore*/\n  transactions: TransactionFactory;\n  /**@ignore*/\n  stakings: StakingFactory;\n  /**@ignore*/\n  wallet: Wallet;\n  /**@ignore*/\n  blockchain: Blockchain;\n  /**@ignore*/\n  contracts: ContractFactory;\n  /**@ignore*/\n  crypto: any;\n  /**@ignore*/\n  utils: any;\n  /**@ignore*/\n  defaultShardID?: number;\n  /**@ignore*/\n  private provider: HttpProvider | WSProvider;\n\n  /**\n   * Create a harmony instance\n   *\n   * @param url The end-points of the hmy blockchain\n   * @param config set up `ChainID` and `ChainType`, typically we can use the default values\n   *\n   * @example\n   * ```\n   * // import or require Harmony class\n   * const { Harmony } = require('@harmony-js/core');\n   *\n   * // import or require settings\n   * const { ChainID, ChainType } = require('@harmony-js/utils');\n   *\n   * // Initialize the Harmony instance\n   * const hmy = new Harmony(\n   *   // rpc url:\n   *   // local: http://localhost:9500\n   *   // testnet: https://api.s0.b.hmny.io/\n   *   // mainnet: https://api.s0.t.hmny.io/\n   *   'http://localhost:9500',\n   *   {\n   *     // chainType set to Harmony\n   *     chainType: ChainType.Harmony,\n   *     // chainType set to HmyLocal\n   *     chainId: ChainID.HmyLocal,\n   *   },\n   * );\n   * ```\n   */\n  constructor(\n    url: string,\n    config: HarmonyConfig = {\n      chainId: utils.defaultConfig.Default.Chain_ID,\n      chainType: utils.defaultConfig.Default.Chain_Type,\n    },\n  ) {\n    super(config.chainType, config.chainId);\n\n    const providerUrl = config.chainUrl || url || utils.defaultConfig.Default.Chain_URL;\n\n    this.provider = new Provider(providerUrl).provider;\n    this.messenger = new Messenger(this.provider, this.chainType, this.chainId);\n    this.blockchain = new Blockchain(this.messenger);\n    this.transactions = new TransactionFactory(this.messenger);\n    this.stakings = new StakingFactory(this.messenger);\n    this.wallet = new Wallet(this.messenger);\n    this.contracts = new ContractFactory(this.wallet);\n    this.crypto = crypto;\n    this.utils = utils;\n    this.defaultShardID = config.shardID;\n    if (this.defaultShardID !== undefined) {\n      this.setShardID(this.defaultShardID);\n    }\n  }\n\n  /**\n   * Will change the provider for its module.\n   *\n   * @param provider a valid provider, you can replace it with your own working node\n   *\n   * @example\n   * ```javascript\n   * const tmp = hmy.setProvider('http://localhost:9500');\n   * ```\n   */\n  public setProvider(provider: string | HttpProvider | WSProvider): void {\n    this.provider = new Provider(provider).provider;\n    this.messenger.setProvider(this.provider);\n    this.setMessenger(this.messenger);\n  }\n\n  /**\n   * set the chainID\n   * \n   * @hint\n   * ```\n   * Default = 0,\n   * EthMainnet = 1,\n    Morden = 2,\n    Ropsten = 3,\n    Rinkeby = 4,\n    RootstockMainnet = 30,\n    RootstockTestnet = 31,\n    Kovan = 42,\n    EtcMainnet = 61,\n    EtcTestnet = 62,\n    Geth = 1337,\n    Ganache = 0,\n    HmyMainnet = 1,\n    HmyTestnet = 2,\n    HmyLocal = 2,\n    HmyPangaea = 3\n   * ```\n   * @param chainId \n   * \n   * @example\n   * ```\n   * hmy.setChainId(2);\n   * ```\n   */\n  public setChainId(chainId: utils.ChainID) {\n    this.chainId = chainId;\n    this.messenger.setChainId(this.chainId);\n    this.setMessenger(this.messenger);\n  }\n\n  /**\n   * Change the Shard ID\n   *\n   * @example\n   * ```\n   * hmy.setShardID(2);\n   * ```\n   */\n  public setShardID(shardID: number) {\n    this.defaultShardID = shardID;\n    this.messenger.setDefaultShardID(this.defaultShardID);\n    this.setMessenger(this.messenger);\n  }\n\n  /**\n   * set the chainType\n   *\n   * @param chainType `hmy` or `eth`\n   *\n   * @example\n   * ```\n   * // set chainType to hmy\n   * hmy.setChainType('hmy');\n   * // set chainType to eth\n   * hmy.setChainType('eth');\n   * ```\n   */\n  public setChainType(chainType: utils.ChainType) {\n    this.chainType = chainType;\n    this.messenger.setChainType(this.chainType);\n    this.setMessenger(this.messenger);\n  }\n\n  /**\n   * Set the sharding Structure\n   *\n   * @param shardingStructures The array of information of sharding structures\n   *\n   * @example\n   * ```javascript\n   * hmy.shardingStructures([\n   *   {\"current\":true,\"http\":\"http://127.0.0.1:9500\",\n   *    \"shardID\":0,\"ws\":\"ws://127.0.0.1:9800\"},\n   *   {\"current\":false,\"http\":\"http://127.0.0.1:9501\",\n   *    \"shardID\":1,\"ws\":\"ws://127.0.0.1:9801\"}\n   * ]);\n   * ```\n   */\n  public shardingStructures(shardingStructures: ShardingItem[]) {\n    for (const shard of shardingStructures) {\n      const shardID =\n        typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n      this.messenger.shardProviders.set(shardID, {\n        current: shard.current !== undefined ? shard.current : false,\n        shardID,\n        http: shard.http,\n        ws: shard.ws,\n      });\n    }\n    this.setMessenger(this.messenger);\n  }\n\n  /**@ignore*/\n  private setMessenger(messenger: Messenger) {\n    this.blockchain.setMessenger(messenger);\n    this.wallet.setMessenger(messenger);\n    this.transactions.setMessenger(messenger);\n    this.stakings.setMessenger(messenger);\n  }\n}\n"]}},"error":null,"hash":"5ddacec7b4ac8a42cbb40c6a9b2435af","cacheData":{"env":{}}}
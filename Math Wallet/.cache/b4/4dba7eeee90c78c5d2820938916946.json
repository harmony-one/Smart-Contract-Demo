{"id":"../node_modules/@harmony-js/network/dist/subscriptions/NewHeadersSub.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/subscriptions/NewHeadersSub.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/src/subscriptions/NewHeadersSub.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":8,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/subscriptions/NewHeadersSub.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"./Subscription","loc":{"line":9,"column":29},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/subscriptions/NewHeadersSub.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/subscriptions/Subscription.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NewHeaders = void 0;\nvar tslib_1 = require(\"tslib\");\nvar Subscription_1 = require(\"./Subscription\");\n/**\n * ### Description:\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n */\nvar NewHeaders = /** @class */ (function (_super) {\n    tslib_1.__extends(NewHeaders, _super);\n    function NewHeaders(messenger, shardID) {\n        if (shardID === void 0) { shardID = 0; }\n        var _this = _super.call(this, 'newHeads', undefined, messenger, shardID) || this;\n        _this.start();\n        return _this;\n    }\n    return NewHeaders;\n}(Subscription_1.SubscriptionMethod));\nexports.NewHeaders = NewHeaders;\n"},"sourceMaps":{"js":{"version":3,"file":"NewHeadersSub.js","sourceRoot":"","sources":["../../src/subscriptions/NewHeadersSub.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;AAGH,+CAAoD;AAEpD;;;GAGG;AACH;IAAgC,sCAAkB;IAChD,oBAAY,SAAoB,EAAE,OAAmB;QAAnB,wBAAA,EAAA,WAAmB;QAArD,YACE,kBAAM,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,SAEjD;QADC,KAAI,CAAC,KAAK,EAAE,CAAC;;IACf,CAAC;IACH,iBAAC;AAAD,CAAC,AALD,CAAgC,iCAAkB,GAKjD;AALY,gCAAU","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-network\n */\n\nimport { Messenger } from '../messenger/messenger';\nimport { SubscriptionMethod } from './Subscription';\n\n/**\n * ### Description:\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n */\nexport class NewHeaders extends SubscriptionMethod {\n  constructor(messenger: Messenger, shardID: number = 0) {\n    super('newHeads', undefined, messenger, shardID);\n    this.start();\n  }\n}\n"]}},"error":null,"hash":"30c0eefe1bd4123ba7b35ef3bddfe6b4","cacheData":{"env":{}}}
{"id":"../node_modules/@harmony-js/network/dist/providers/provider.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/provider.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/src/providers/provider.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/package.json","includedInParent":true,"mtime":1605232158322},{"name":"./http","loc":{"line":8,"column":21},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/provider.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/http.js"},{"name":"./ws","loc":{"line":9,"column":19},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/provider.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/ws.js"},{"name":"@harmony-js/utils","loc":{"line":10,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/provider.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/utils/dist/index.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Provider = exports.ProviderType = void 0;\nvar http_1 = require(\"./http\");\nvar ws_1 = require(\"./ws\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar ProviderType;\n(function (ProviderType) {\n    ProviderType[\"http\"] = \"http\";\n    ProviderType[\"ws\"] = \"ws\";\n})(ProviderType = exports.ProviderType || (exports.ProviderType = {}));\nvar Provider = /** @class */ (function () {\n    function Provider(url) {\n        this.provider = this.onInitSetProvider(url);\n        this.providerType = this.getType(this.provider);\n    }\n    Provider.getProvider = function (provider) {\n        try {\n            this.getProvider(provider);\n            return new Provider(provider);\n        }\n        catch (error) {\n            throw error;\n        }\n    };\n    Provider.prototype.onInitSetProvider = function (providerUrl) {\n        if (typeof providerUrl === 'string') {\n            return utils_1.isHttp(providerUrl)\n                ? new http_1.HttpProvider(providerUrl)\n                : utils_1.isWs(providerUrl)\n                    ? new ws_1.WSProvider(providerUrl)\n                    : new http_1.HttpProvider(utils_1.defaultConfig.Default.Chain_URL);\n        }\n        try {\n            var providerType = this.getType(providerUrl);\n            if (providerType === ProviderType.http || providerType === ProviderType.ws) {\n                return providerUrl;\n            }\n            else {\n                throw new Error('cannot get provider type');\n            }\n        }\n        catch (error) {\n            throw error;\n        }\n    };\n    Provider.prototype.getType = function (provider) {\n        if (provider instanceof http_1.HttpProvider) {\n            return ProviderType.http;\n        }\n        if (provider instanceof ws_1.WSProvider) {\n            return ProviderType.ws;\n        }\n        throw new Error('provider is not correct');\n    };\n    return Provider;\n}());\nexports.Provider = Provider;\n"},"sourceMaps":{"js":{"version":3,"file":"provider.js","sourceRoot":"","sources":["../../src/providers/provider.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAEH,+BAAsC;AACtC,2BAAkC;AAClC,2CAAgE;AAEhE,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,6BAAa,CAAA;IACb,yBAAS,CAAA;AACX,CAAC,EAHW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAGvB;AAED;IAWE,kBAAY,GAAuC;QACjD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC;IAbM,oBAAW,GAAlB,UAAmB,QAA4C;QAC7D,IAAI;YACF,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC3B,OAAO,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC;SAC/B;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAOO,oCAAiB,GAAzB,UACE,WAA+C;QAE/C,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;YACnC,OAAO,cAAM,CAAC,WAAW,CAAC;gBACxB,CAAC,CAAC,IAAI,mBAAY,CAAC,WAAW,CAAC;gBAC/B,CAAC,CAAC,YAAI,CAAC,WAAW,CAAC;oBACnB,CAAC,CAAC,IAAI,eAAU,CAAC,WAAW,CAAC;oBAC7B,CAAC,CAAC,IAAI,mBAAY,CAAC,qBAAa,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SACvD;QACD,IAAI;YACF,IAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC/C,IAAI,YAAY,KAAK,YAAY,CAAC,IAAI,IAAI,YAAY,KAAK,YAAY,CAAC,EAAE,EAAE;gBAC1E,OAAO,WAAW,CAAC;aACpB;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC7C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IACO,0BAAO,GAAf,UAAgB,QAAmC;QACjD,IAAI,QAAQ,YAAY,mBAAY,EAAE;YACpC,OAAO,YAAY,CAAC,IAAI,CAAC;SAC1B;QACD,IAAI,QAAQ,YAAY,eAAU,EAAE;YAClC,OAAO,YAAY,CAAC,EAAE,CAAC;SACxB;QACD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACH,eAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,4BAAQ","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-network\n */\n\nimport { HttpProvider } from './http';\nimport { WSProvider } from './ws';\nimport { defaultConfig, isHttp, isWs } from '@harmony-js/utils';\n\nexport enum ProviderType {\n  http = 'http',\n  ws = 'ws',\n}\n\nexport class Provider {\n  static getProvider(provider: string | HttpProvider | WSProvider) {\n    try {\n      this.getProvider(provider);\n      return new Provider(provider);\n    } catch (error) {\n      throw error;\n    }\n  }\n  public provider: WSProvider | HttpProvider;\n  public providerType: ProviderType;\n  constructor(url: string | WSProvider | HttpProvider) {\n    this.provider = this.onInitSetProvider(url);\n    this.providerType = this.getType(this.provider);\n  }\n  private onInitSetProvider(\n    providerUrl: string | HttpProvider | WSProvider,\n  ): HttpProvider | WSProvider {\n    if (typeof providerUrl === 'string') {\n      return isHttp(providerUrl)\n        ? new HttpProvider(providerUrl)\n        : isWs(providerUrl)\n        ? new WSProvider(providerUrl)\n        : new HttpProvider(defaultConfig.Default.Chain_URL);\n    }\n    try {\n      const providerType = this.getType(providerUrl);\n      if (providerType === ProviderType.http || providerType === ProviderType.ws) {\n        return providerUrl;\n      } else {\n        throw new Error('cannot get provider type');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n  private getType(provider: HttpProvider | WSProvider) {\n    if (provider instanceof HttpProvider) {\n      return ProviderType.http;\n    }\n    if (provider instanceof WSProvider) {\n      return ProviderType.ws;\n    }\n    throw new Error('provider is not correct');\n  }\n}\n"]}},"error":null,"hash":"03c5aae221489436bc884600a0694c2b","cacheData":{"env":{}}}
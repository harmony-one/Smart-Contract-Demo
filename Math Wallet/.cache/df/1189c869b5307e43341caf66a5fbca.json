{"id":"../node_modules/@harmony-js/core/dist/truffleProvider.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/truffleProvider.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/src/truffleProvider.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":9,"column":22},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/truffleProvider.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"@harmony-js/utils","loc":{"line":10,"column":22},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/truffleProvider.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/utils/dist/index.js"},{"name":"@harmony-js/account","loc":{"line":11,"column":24},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/truffleProvider.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/account/dist/index.js"},{"name":"@harmony-js/crypto","loc":{"line":12,"column":23},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/core/dist/truffleProvider.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/index.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-core\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TruffleProvider = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar account_1 = require(\"@harmony-js/account\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar packageInfo = { version: '1.0.0' };\nvar TruffleProvider = /** @class */ (function (_super) {\n    tslib_1.__extends(TruffleProvider, _super);\n    function TruffleProvider(provider, hdOptions, chainOptions, transactionOptions) {\n        if (provider === void 0) { provider = 'http://localhost:9500'; }\n        if (hdOptions === void 0) { hdOptions = {\n            menmonic: undefined,\n            index: 0,\n            addressCount: 1,\n        }; }\n        if (chainOptions === void 0) { chainOptions = {\n            shardID: 0,\n            chainType: utils_1.ChainType.Harmony,\n            chainId: utils_1.ChainID.HmyLocal,\n        }; }\n        if (transactionOptions === void 0) { transactionOptions = {\n            gasLimit: '10000000',\n            gasPrice: '20000000000',\n        }; }\n        var _this = _super.call(this, provider, hdOptions.menmonic, hdOptions.index, hdOptions.addressCount, chainOptions.shardID, chainOptions.chainType, chainOptions.chainId, transactionOptions.gasLimit, transactionOptions.gasPrice) || this;\n        _this.resolveResult = function (response) {\n            var final = response.getRaw || response;\n            delete final.req;\n            delete final.responseType;\n            return final;\n        };\n        _this.resolveCallback = function (err, res, callback) {\n            try {\n                if (err) {\n                    callback(err);\n                }\n                var response = _this.resolveResult(res);\n                callback(null, response);\n            }\n            catch (error) {\n                throw error;\n            }\n        };\n        return _this;\n    }\n    TruffleProvider.prototype.send = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, newArgs, id, params, newMethod, callback, _b, accounts, txObj, rawTxn, result, result, result, result;\n            var _this = this;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _a = this.resolveArgs.apply(this, tslib_1.__spread(args)), newArgs = _a.newArgs, id = _a.id, params = _a.params, newMethod = _a.newMethod, callback = _a.callback;\n                        _b = newMethod;\n                        switch (_b) {\n                            case 'hmy_accounts': return [3 /*break*/, 1];\n                            case 'hmy_sendTransaction': return [3 /*break*/, 2];\n                            case 'hmy_getTransactionReceipt': return [3 /*break*/, 5];\n                            case 'net_version': return [3 /*break*/, 7];\n                            case 'web3_clientVersion': return [3 /*break*/, 8];\n                            case 'hmy_getBlockByNumber': return [3 /*break*/, 9];\n                        }\n                        return [3 /*break*/, 11];\n                    case 1:\n                        {\n                            accounts = this.getAccounts();\n                            callback(null, {\n                                result: accounts,\n                                id: id,\n                                jsonrpc: '2.0',\n                            });\n                            return [2 /*return*/, {\n                                    result: accounts,\n                                    id: id,\n                                    jsonrpc: '2.0',\n                                }];\n                            // break;\n                        }\n                        _c.label = 2;\n                    case 2:\n                        txObj = params[0];\n                        return [4 /*yield*/, this.signTransaction(txObj)];\n                    case 3:\n                        rawTxn = _c.sent();\n                        return [4 /*yield*/, this.provider.send({\n                                id: id,\n                                method: 'hmy_sendRawTransaction',\n                                params: [rawTxn],\n                                jsonrpc: '2.0',\n                            }, function (err, res) { return _this.resolveCallback(err, res, callback); })];\n                    case 4:\n                        result = _c.sent();\n                        return [2 /*return*/, this.resolveResult(result)];\n                    case 5: return [4 /*yield*/, this.provider.send({\n                            id: id,\n                            method: 'hmy_getTransactionReceipt',\n                            params: [params[0]],\n                            jsonrpc: '2.0',\n                        }, function (err, res) {\n                            try {\n                                if (err) {\n                                    callback(err);\n                                }\n                                var response = _this.resolveResult(res);\n                                if (response.result !== null) {\n                                    response.result.status = '0x1';\n                                }\n                                callback(null, response);\n                            }\n                            catch (error) {\n                                throw error;\n                            }\n                        })];\n                    case 6:\n                        result = _c.sent();\n                        return [2 /*return*/, this.resolveResult(result)];\n                    case 7:\n                        {\n                            callback(null, {\n                                result: String(this.messenger.chainId),\n                                id: id,\n                                jsonrpc: '2.0',\n                            });\n                            return [2 /*return*/, {\n                                    result: String(this.messenger.chainId),\n                                    id: id,\n                                    jsonrpc: '2.0',\n                                }];\n                        }\n                        _c.label = 8;\n                    case 8:\n                        {\n                            callback(null, {\n                                result: \"Harmony/\" + packageInfo.version + \"/@harmony-js\",\n                                id: id,\n                                jsonrpc: '2.0',\n                            });\n                            return [2 /*return*/, {\n                                    result: \"Harmony/\" + packageInfo.version + \"/@harmony-js\",\n                                    id: id,\n                                    jsonrpc: '2.0',\n                                }];\n                        }\n                        _c.label = 9;\n                    case 9: return [4 /*yield*/, this.provider.send(newArgs, function (err, res) {\n                            try {\n                                if (err) {\n                                    callback(err);\n                                }\n                                var response = _this.resolveResult(res);\n                                if (new utils_1.Unit(response.result.gasLimit)\n                                    .asWei()\n                                    .toWei()\n                                    .gt(new utils_1.Unit(_this.gasLimit).asWei().toWei())) {\n                                    response.result.gasLimit = \"0x\" + new utils_1.Unit(_this.gasLimit)\n                                        .asWei()\n                                        .toWei()\n                                        .toString('hex');\n                                }\n                                if (utils_1.isBech32Address(response.result.miner)) {\n                                    response.result.miner = crypto_1.fromBech32(response.result.miner, crypto_1.HRP);\n                                }\n                                callback(null, response);\n                            }\n                            catch (error) {\n                                throw error;\n                            }\n                        })];\n                    case 10:\n                        result = _c.sent();\n                        return [2 /*return*/, this.resolveResult(result)];\n                    case 11: return [4 /*yield*/, this.provider.send(newArgs, function (err, res) { return _this.resolveCallback(err, res, callback); })];\n                    case 12:\n                        result = _c.sent();\n                        return [2 /*return*/, this.resolveResult(result)];\n                }\n            });\n        });\n    };\n    TruffleProvider.prototype.sendAsync = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return this.send.apply(this, tslib_1.__spread(args));\n    };\n    TruffleProvider.prototype.resolveArgs = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var method = args[0].method;\n        var params = args[0].params;\n        var newMethod = method;\n        if (method.startsWith('eth')) {\n            newMethod = method.replace('eth', 'hmy');\n        }\n        args[0].method = newMethod;\n        var id = args[0].id;\n        return {\n            newArgs: args[0],\n            id: id,\n            params: params,\n            newMethod: newMethod,\n            callback: args[1],\n        };\n    };\n    return TruffleProvider;\n}(account_1.HDNode));\nexports.TruffleProvider = TruffleProvider;\n"},"sourceMaps":{"js":{"version":3,"file":"truffleProvider.js","sourceRoot":"","sources":["../src/truffleProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-core\n * @hidden\n */\n\nimport {\n  HttpProvider,\n  WSProvider,\n  RPCRequestPayload,\n  ResponseMiddleware,\n} from '@harmony-js/network';\n\nimport { ChainID, ChainType, Unit, isBech32Address } from '@harmony-js/utils';\nimport { HDNode } from '@harmony-js/account';\nimport { fromBech32, HRP } from '@harmony-js/crypto';\n\nconst packageInfo = { version: '1.0.0' };\n\nexport interface ArgsResolver {\n  newArgs: any;\n  id: number;\n  params: any;\n  newMethod: string;\n  callback: (error: any, res?: any) => void;\n}\n\nexport interface HDOptions {\n  menmonic?: string;\n  index: number;\n  addressCount: number;\n}\n\nexport interface ChainOptions {\n  shardID: number;\n  chainType: ChainType;\n  chainId: ChainID;\n}\n\nexport interface TransactionOptions {\n  gasLimit: string;\n  gasPrice: string;\n}\n\nexport class TruffleProvider extends HDNode {\n  constructor(\n    provider: string | HttpProvider | WSProvider = 'http://localhost:9500',\n    hdOptions: HDOptions = {\n      menmonic: undefined,\n      index: 0,\n      addressCount: 1,\n    },\n    chainOptions: ChainOptions = {\n      shardID: 0,\n      chainType: ChainType.Harmony,\n      chainId: ChainID.HmyLocal,\n    },\n    transactionOptions: TransactionOptions = {\n      gasLimit: '10000000',\n      gasPrice: '20000000000',\n    },\n  ) {\n    super(\n      provider,\n      hdOptions.menmonic,\n      hdOptions.index,\n      hdOptions.addressCount,\n      chainOptions.shardID,\n      chainOptions.chainType,\n      chainOptions.chainId,\n      transactionOptions.gasLimit,\n      transactionOptions.gasPrice,\n    );\n  }\n  async send(...args: [RPCRequestPayload<any>, any]) {\n    const { newArgs, id, params, newMethod, callback } = this.resolveArgs(...args);\n\n    switch (newMethod) {\n      case 'hmy_accounts': {\n        const accounts = this.getAccounts();\n        callback(null, {\n          result: accounts,\n          id,\n          jsonrpc: '2.0',\n        });\n        return {\n          result: accounts,\n          id,\n          jsonrpc: '2.0',\n        };\n        // break;\n      }\n      case 'hmy_sendTransaction': {\n        const txObj = params[0];\n        const rawTxn = await this.signTransaction(txObj);\n        const result = await this.provider.send(\n          {\n            id,\n            method: 'hmy_sendRawTransaction',\n            params: [rawTxn],\n            jsonrpc: '2.0',\n          },\n          (err: any, res: ResponseMiddleware | any) => this.resolveCallback(err, res, callback),\n        );\n        return this.resolveResult(result);\n\n        //  break;\n      }\n      case 'hmy_getTransactionReceipt': {\n        const result = await this.provider.send(\n          {\n            id,\n            method: 'hmy_getTransactionReceipt',\n            params: [params[0]],\n            jsonrpc: '2.0',\n          },\n          (err: any, res: any) => {\n            try {\n              if (err) {\n                callback(err);\n              }\n              const response = this.resolveResult(res);\n\n              if (response.result !== null) {\n                response.result.status = '0x1';\n              }\n              callback(null, response);\n            } catch (error) {\n              throw error;\n            }\n          },\n        );\n        return this.resolveResult(result);\n      }\n      case 'net_version': {\n        callback(null, {\n          result: String(this.messenger.chainId),\n          id,\n          jsonrpc: '2.0',\n        });\n        return {\n          result: String(this.messenger.chainId),\n          id,\n          jsonrpc: '2.0',\n        };\n      }\n      case 'web3_clientVersion': {\n        callback(null, {\n          result: `Harmony/${packageInfo.version}/@harmony-js`,\n          id,\n          jsonrpc: '2.0',\n        });\n        return {\n          result: `Harmony/${packageInfo.version}/@harmony-js`,\n          id,\n          jsonrpc: '2.0',\n        };\n      }\n      case 'hmy_getBlockByNumber': {\n        const result = await this.provider.send(newArgs, (err: any, res: any) => {\n          try {\n            if (err) {\n              callback(err);\n            }\n            const response = this.resolveResult(res);\n\n            if (\n              new Unit(response.result.gasLimit)\n                .asWei()\n                .toWei()\n                .gt(new Unit(this.gasLimit).asWei().toWei())\n            ) {\n              response.result.gasLimit = `0x${new Unit(this.gasLimit)\n                .asWei()\n                .toWei()\n                .toString('hex')}`;\n            }\n            if (isBech32Address(response.result.miner)) {\n              response.result.miner = fromBech32(response.result.miner, HRP);\n            }\n            callback(null, response);\n          } catch (error) {\n            throw error;\n          }\n        });\n        return this.resolveResult(result);\n      }\n\n      default: {\n        // hmy_getBlockByNumber\n\n        const result = await this.provider.send(\n          newArgs,\n          (err: any, res: ResponseMiddleware | any) => this.resolveCallback(err, res, callback),\n        );\n\n        return this.resolveResult(result);\n        //  break;\n      }\n    }\n  }\n\n  sendAsync(...args: [RPCRequestPayload<any>, any]) {\n    return this.send(...args);\n  }\n\n  resolveArgs(...args: [RPCRequestPayload<any>, any]): ArgsResolver {\n    const method = args[0].method;\n    const params = args[0].params;\n    let newMethod: string = method;\n    if (method.startsWith('eth')) {\n      newMethod = method.replace('eth', 'hmy');\n    }\n    args[0].method = newMethod;\n\n    const { id } = args[0];\n\n    return {\n      newArgs: args[0],\n      id,\n      params,\n      newMethod,\n      callback: args[1],\n    };\n  }\n\n  resolveResult = (response: ResponseMiddleware | any) => {\n    const final = response.getRaw || response;\n    delete final.req;\n    delete final.responseType;\n    return final;\n  };\n  resolveCallback = (\n    err: any,\n    res: any,\n    callback: (error: any, res?: ResponseMiddleware | any) => void,\n  ) => {\n    try {\n      if (err) {\n        callback(err);\n      }\n      const response = this.resolveResult(res);\n      callback(null, response);\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n"]}},"error":null,"hash":"9dbbeb3ec19ba120960a10d0628d5960","cacheData":{"env":{}}}
{"id":"../node_modules/@harmony-js/network/dist/providers/baseProvider.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/baseProvider.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/src/providers/baseProvider.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":9,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/baseProvider.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"../types","loc":{"line":10,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/baseProvider.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/types.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseProvider = void 0;\nvar tslib_1 = require(\"tslib\");\nvar types_1 = require(\"../types\");\nvar BaseProvider = /** @class */ (function () {\n    function BaseProvider(url, reqMiddleware, resMiddleware) {\n        var _this = this;\n        if (reqMiddleware === void 0) { reqMiddleware = new Map(); }\n        if (resMiddleware === void 0) { resMiddleware = new Map(); }\n        this.middlewares = {\n            request: {\n                use: function (fn, match) {\n                    if (match === void 0) { match = '*'; }\n                    _this.pushMiddleware(fn, types_1.MiddlewareType.REQ, match);\n                },\n            },\n            response: {\n                use: function (fn, match) {\n                    if (match === void 0) { match = '*'; }\n                    _this.pushMiddleware(fn, types_1.MiddlewareType.RES, match);\n                },\n            },\n        };\n        this.reqMiddleware = new Map().set('*', []);\n        this.resMiddleware = new Map().set('*', []);\n        this.reqMiddleware = reqMiddleware;\n        this.resMiddleware = resMiddleware;\n        this.url = url;\n    }\n    BaseProvider.prototype.pushMiddleware = function (fn, type, match) {\n        if (type !== types_1.MiddlewareType.REQ && type !== types_1.MiddlewareType.RES) {\n            throw new Error('Please specify the type of middleware being added');\n        }\n        if (type === types_1.MiddlewareType.REQ) {\n            var current = this.reqMiddleware.get(match) || [];\n            this.reqMiddleware.set(match, tslib_1.__spread(current, [fn]));\n        }\n        else {\n            var current = this.resMiddleware.get(match) || [];\n            this.resMiddleware.set(match, tslib_1.__spread(current, [fn]));\n        }\n    };\n    BaseProvider.prototype.getMiddleware = function (method) {\n        var e_1, _a, e_2, _b;\n        var requests = [];\n        var responses = [];\n        try {\n            for (var _c = tslib_1.__values(this.reqMiddleware.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var _e = tslib_1.__read(_d.value, 2), key = _e[0], transformers = _e[1];\n                if (typeof key === 'string' && key !== '*' && key === method) {\n                    requests.push.apply(requests, tslib_1.__spread(transformers));\n                }\n                if (key instanceof RegExp && key.test(method)) {\n                    requests.push.apply(requests, tslib_1.__spread(transformers));\n                }\n                if (key === '*') {\n                    requests.push.apply(requests, tslib_1.__spread(transformers));\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        try {\n            for (var _f = tslib_1.__values(this.resMiddleware.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {\n                var _h = tslib_1.__read(_g.value, 2), key = _h[0], transformers = _h[1];\n                if (typeof key === 'string' && key !== '*' && key === method) {\n                    responses.push.apply(responses, tslib_1.__spread(transformers));\n                }\n                if (key instanceof RegExp && key.test(method)) {\n                    responses.push.apply(responses, tslib_1.__spread(transformers));\n                }\n                if (key === '*') {\n                    responses.push.apply(responses, tslib_1.__spread(transformers));\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return [requests, responses];\n    };\n    return BaseProvider;\n}());\nexports.BaseProvider = BaseProvider;\n"},"sourceMaps":{"js":{"version":3,"file":"baseProvider.js","sourceRoot":"","sources":["../../src/providers/baseProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-network\n * @hidden\n */\n\nimport { ReqMiddleware, ResMiddleware, MiddlewareType } from '../types';\nimport { RPCMethod } from '../rpcMethod/rpc';\n\nclass BaseProvider {\n  middlewares = {\n    request: {\n      use: (fn: ReqMiddleware, match: string | RPCMethod | RegExp = '*') => {\n        this.pushMiddleware(fn, MiddlewareType.REQ, match);\n      },\n    },\n    response: {\n      use: (fn: ResMiddleware, match: string | RPCMethod | RegExp = '*') => {\n        this.pushMiddleware(fn, MiddlewareType.RES, match);\n      },\n    },\n  };\n  protected url: string;\n  protected reqMiddleware: ReqMiddleware = new Map().set('*', []);\n  protected resMiddleware: ResMiddleware = new Map().set('*', []);\n\n  constructor(\n    url: string,\n    reqMiddleware: ReqMiddleware = new Map(),\n    resMiddleware: ResMiddleware = new Map(),\n  ) {\n    this.reqMiddleware = reqMiddleware;\n    this.resMiddleware = resMiddleware;\n    this.url = url;\n  }\n\n  protected pushMiddleware(fn: any, type: MiddlewareType, match: string | RPCMethod | RegExp) {\n    if (type !== MiddlewareType.REQ && type !== MiddlewareType.RES) {\n      throw new Error('Please specify the type of middleware being added');\n    }\n    if (type === MiddlewareType.REQ) {\n      const current = this.reqMiddleware.get(match) || [];\n      this.reqMiddleware.set(match, [...current, <ReqMiddleware>fn]);\n    } else {\n      const current = this.resMiddleware.get(match) || [];\n      this.resMiddleware.set(match, [...current, <ResMiddleware>fn]);\n    }\n  }\n  protected getMiddleware(method: RPCMethod | string): [ReqMiddleware[], ResMiddleware[]] {\n    const requests: ReqMiddleware[] = [];\n    const responses: ResMiddleware[] = [];\n\n    for (const [key, transformers] of this.reqMiddleware.entries()) {\n      if (typeof key === 'string' && key !== '*' && key === method) {\n        requests.push(...transformers);\n      }\n\n      if (key instanceof RegExp && key.test(method)) {\n        requests.push(...transformers);\n      }\n\n      if (key === '*') {\n        requests.push(...transformers);\n      }\n    }\n\n    for (const [key, transformers] of this.resMiddleware.entries()) {\n      if (typeof key === 'string' && key !== '*' && key === method) {\n        responses.push(...transformers);\n      }\n\n      if (key instanceof RegExp && key.test(method)) {\n        responses.push(...transformers);\n      }\n\n      if (key === '*') {\n        responses.push(...transformers);\n      }\n    }\n\n    return [requests, responses];\n  }\n}\n\nexport { BaseProvider };\n"]}},"error":null,"hash":"4cbafb97fa0742ea6687f23524be3639","cacheData":{"env":{}}}
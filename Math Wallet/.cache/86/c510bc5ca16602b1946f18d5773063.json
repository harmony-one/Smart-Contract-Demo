{"id":"../node_modules/@harmony-js/contract/dist/abi/utils.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/contract/dist/abi/utils.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/contract/src/abi/utils.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/contract/package.json","includedInParent":true,"mtime":1605275414276},{"name":"@harmony-js/utils","loc":{"line":9,"column":22},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/contract/dist/abi/utils.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/utils/dist/index.js"},{"name":"@harmony-js/crypto","loc":{"line":10,"column":23},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/contract/dist/abi/utils.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/crypto/dist/index.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-contract\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bnToString = exports.flattenTypes = exports.jsonInterfaceMethodToString = void 0;\nvar utils_1 = require(\"@harmony-js/utils\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nexports.jsonInterfaceMethodToString = function (json) {\n    if (utils_1.isObject(json) && json.name && json.name.includes('(')) {\n        return json.name;\n    }\n    return json.name + \"(\" + exports.flattenTypes(false, json.inputs).join(',') + \")\";\n};\nexports.flattenTypes = function (includeTuple, puts) {\n    // console.log(\"entered _flattenTypes. inputs/outputs: \" + puts)\n    var types = [];\n    puts.forEach(function (param) {\n        if (typeof param.components === 'object') {\n            if (param.type.substring(0, 5) !== 'tuple') {\n                throw new Error('components found but type is not tuple; report on GitHub');\n            }\n            var suffix = '';\n            var arrayBracket = param.type.indexOf('[');\n            if (arrayBracket >= 0) {\n                suffix = param.type.substring(arrayBracket);\n            }\n            var result = exports.flattenTypes(includeTuple, param.components);\n            // console.log(\"result should have things: \" + result)\n            if (utils_1.isArray(result) && includeTuple) {\n                // console.log(\"include tuple word, and its an array. joining...: \" + result.types)\n                types.push(\"tuple(\" + result.join(',') + \")\" + suffix);\n            }\n            else if (!includeTuple) {\n                // console.log(\"don't include tuple, but its an array. joining...: \" + result)\n                types.push(\"(\" + result.join(',') + \")\" + suffix);\n            }\n            else {\n                // console.log(\"its a single type within a tuple: \" + result.types)\n                types.push(\"(\" + result + \")\");\n            }\n        }\n        else {\n            // console.log(\"its a type and not directly in a tuple: \" + param.type)\n            types.push(param.type);\n        }\n    });\n    return types;\n};\nfunction bnToString(result) {\n    if (crypto_1.BN.isBN(result)) {\n        return result.toString();\n    }\n    else {\n        return result;\n    }\n}\nexports.bnToString = bnToString;\n"},"sourceMaps":{"js":{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/abi/utils.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEH,2CAAsD;AACtD,6CAAwC;AAE3B,QAAA,2BAA2B,GAAG,UAAC,IAAS;IACnD,IAAI,gBAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC1D,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;IAED,OAAU,IAAI,CAAC,IAAI,SAAI,oBAAY,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAG,CAAC;AACvE,CAAC,CAAC;AAEW,QAAA,YAAY,GAAG,UAAC,YAAiB,EAAE,IAAW;IACzD,gEAAgE;IAChE,IAAM,KAAK,GAAU,EAAE,CAAC;IAExB,IAAI,CAAC,OAAO,CAAC,UAAC,KAAU;QACtB,IAAI,OAAO,KAAK,CAAC,UAAU,KAAK,QAAQ,EAAE;YACxC,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,OAAO,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;aAC7E;YACD,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,IAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC7C,IAAI,YAAY,IAAI,CAAC,EAAE;gBACrB,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;aAC7C;YACD,IAAM,MAAM,GAAG,oBAAY,CAAC,YAAY,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;YAC5D,sDAAsD;YACtD,IAAI,eAAO,CAAC,MAAM,CAAC,IAAI,YAAY,EAAE;gBACnC,mFAAmF;gBACnF,KAAK,CAAC,IAAI,CAAC,WAAS,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,SAAI,MAAQ,CAAC,CAAC;aACnD;iBAAM,IAAI,CAAC,YAAY,EAAE;gBACxB,8EAA8E;gBAC9E,KAAK,CAAC,IAAI,CAAC,MAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,SAAI,MAAQ,CAAC,CAAC;aAC9C;iBAAM;gBACL,mEAAmE;gBACnE,KAAK,CAAC,IAAI,CAAC,MAAI,MAAM,MAAG,CAAC,CAAC;aAC3B;SACF;aAAM;YACL,uEAAuE;YACvE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACxB;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,SAAgB,UAAU,CAAC,MAAW;IACpC,IAAI,WAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QACnB,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;KAC1B;SAAM;QACL,OAAO,MAAM,CAAC;KACf;AACH,CAAC;AAND,gCAMC","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-contract\n * @hidden\n */\n\nimport { isObject, isArray } from '@harmony-js/utils';\nimport { BN } from '@harmony-js/crypto';\n\nexport const jsonInterfaceMethodToString = (json: any): string => {\n  if (isObject(json) && json.name && json.name.includes('(')) {\n    return json.name;\n  }\n\n  return `${json.name}(${flattenTypes(false, json.inputs).join(',')})`;\n};\n\nexport const flattenTypes = (includeTuple: any, puts: any[]) => {\n  // console.log(\"entered _flattenTypes. inputs/outputs: \" + puts)\n  const types: any[] = [];\n\n  puts.forEach((param: any) => {\n    if (typeof param.components === 'object') {\n      if (param.type.substring(0, 5) !== 'tuple') {\n        throw new Error('components found but type is not tuple; report on GitHub');\n      }\n      let suffix = '';\n      const arrayBracket = param.type.indexOf('[');\n      if (arrayBracket >= 0) {\n        suffix = param.type.substring(arrayBracket);\n      }\n      const result = flattenTypes(includeTuple, param.components);\n      // console.log(\"result should have things: \" + result)\n      if (isArray(result) && includeTuple) {\n        // console.log(\"include tuple word, and its an array. joining...: \" + result.types)\n        types.push(`tuple(${result.join(',')})${suffix}`);\n      } else if (!includeTuple) {\n        // console.log(\"don't include tuple, but its an array. joining...: \" + result)\n        types.push(`(${result.join(',')})${suffix}`);\n      } else {\n        // console.log(\"its a single type within a tuple: \" + result.types)\n        types.push(`(${result})`);\n      }\n    } else {\n      // console.log(\"its a type and not directly in a tuple: \" + param.type)\n      types.push(param.type);\n    }\n  });\n\n  return types;\n};\n\nexport function bnToString(result: any): string | any {\n  if (BN.isBN(result)) {\n    return result.toString();\n  } else {\n    return result;\n  }\n}\n"]}},"error":null,"hash":"fc83676c8624f8949e35befe43d32af1","cacheData":{"env":{}}}
{"id":"../node_modules/@harmony-js/transaction/dist/types.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/types.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/src/types.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/package.json","includedInParent":true,"mtime":1605232158322}],"generated":{"js":"\"use strict\";\n/**\n * ## About this package\n *\n * `@harmony-js/transaction` provides the functions to build transactions\n *\n * Develop can use this package to:\n * - build a transaction offline!\n * - set params of transaction\n * -\n *\n * ## How to use this package\n * ### Step 1: create a Harmony Instance\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n * const { BN } = require('@harmony-js/crypto');\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *     chainType: ChainType.Harmony,\n *     chainId: ChainID.HmyLocal,\n *   },\n * );\n * ```\n *\n * ### Step 2: build a transaction\n * ```javascript\n * const txn = hmy.transactions.newTx({\n *   to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n *   value: '10000',\n *   gasLimit: '210000',\n *   shardID: 0,\n *   toShardID: 0,\n *   gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n * });\n * ```\n *\n * ## some important information\n * Transaction Parameters\n * ```java\n * // interface TxParams\n * id:               string;\n * from:             string;\n * to:               string;\n * nonce:            number | string;\n * gasLimit:         number | string | BN;\n * gasPrice:         number | string | BN;\n * shardID:          number | string;\n * toShardID:        number | string;\n * data:             string;\n * value:            number | string | BN;\n * chainId:          number;\n * rawTransaction:   string;\n * unsignedRawTransaction: string;\n * signature:        Signature;\n * receipt?:         TransasctionReceipt;\n * ```\n *\n * Transaction Receipt\n * ```java\n * // interface TransasctionReceipt\n * transactionHash:   string;\n * transactionIndex:  string;\n * blockHash:         string;\n * blockNumber:       string; // 11\n * from:              string;\n * to:                string;\n * gasUsed:           string;\n * cumulativeGasUsed: string; // 13244\n * contractAddress?:  string | null; // or null, if none was created\n * logs:              any[];\n * logsBloom:         string; // 256 byte bloom filter\n * v:                 string;\n * r:                 string;\n * s:                 string;\n * responseType?:     string;\n * byzantium?:        boolean;\n * status?:           string; // post Byzantium will return `0x0` or `0x1`\n * root?:             string; // pre Byzantium will return `root`\n * ```\n *\n * @packageDocumentation\n * @module harmony-transaction\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TxStatus = void 0;\nvar TxStatus;\n(function (TxStatus) {\n    TxStatus[\"NONE\"] = \"NONE\";\n    TxStatus[\"INTIALIZED\"] = \"INITIALIZED\";\n    TxStatus[\"SIGNED\"] = \"SIGNED\";\n    TxStatus[\"PENDING\"] = \"PENDING\";\n    TxStatus[\"CONFIRMED\"] = \"CONFIRMED\";\n    TxStatus[\"REJECTED\"] = \"REJECTED\";\n})(TxStatus = exports.TxStatus || (exports.TxStatus = {}));\n"},"sourceMaps":{"js":{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoFG;;;AAsBH,IAAY,QAOX;AAPD,WAAY,QAAQ;IAClB,yBAAa,CAAA;IACb,sCAA0B,CAAA;IAC1B,6BAAiB,CAAA;IACjB,+BAAmB,CAAA;IACnB,mCAAuB,CAAA;IACvB,iCAAqB,CAAA;AACvB,CAAC,EAPW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAOnB","sourcesContent":["/**\n * ## About this package\n *\n * `@harmony-js/transaction` provides the functions to build transactions\n *\n * Develop can use this package to:\n * - build a transaction offline!\n * - set params of transaction\n * -\n *\n * ## How to use this package\n * ### Step 1: create a Harmony Instance\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n * const { BN } = require('@harmony-js/crypto');\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *     chainType: ChainType.Harmony,\n *     chainId: ChainID.HmyLocal,\n *   },\n * );\n * ```\n *\n * ### Step 2: build a transaction\n * ```javascript\n * const txn = hmy.transactions.newTx({\n *   to: 'one166axnkjmghkf3df7xfvd0hn4dft8kemrza4cd2',\n *   value: '10000',\n *   gasLimit: '210000',\n *   shardID: 0,\n *   toShardID: 0,\n *   gasPrice: new hmy.utils.Unit('100').asGwei().toWei(),\n * });\n * ```\n *\n * ## some important information\n * Transaction Parameters\n * ```java\n * // interface TxParams\n * id:               string;\n * from:             string;\n * to:               string;\n * nonce:            number | string;\n * gasLimit:         number | string | BN;\n * gasPrice:         number | string | BN;\n * shardID:          number | string;\n * toShardID:        number | string;\n * data:             string;\n * value:            number | string | BN;\n * chainId:          number;\n * rawTransaction:   string;\n * unsignedRawTransaction: string;\n * signature:        Signature;\n * receipt?:         TransasctionReceipt;\n * ```\n *\n * Transaction Receipt\n * ```java\n * // interface TransasctionReceipt\n * transactionHash:   string;\n * transactionIndex:  string;\n * blockHash:         string;\n * blockNumber:       string; // 11\n * from:              string;\n * to:                string;\n * gasUsed:           string;\n * cumulativeGasUsed: string; // 13244\n * contractAddress?:  string | null; // or null, if none was created\n * logs:              any[];\n * logsBloom:         string; // 256 byte bloom filter\n * v:                 string;\n * r:                 string;\n * s:                 string;\n * responseType?:     string;\n * byzantium?:        boolean;\n * status?:           string; // post Byzantium will return `0x0` or `0x1`\n * root?:             string; // pre Byzantium will return `root`\n * ```\n *\n * @packageDocumentation\n * @module harmony-transaction\n */\n\nimport { BN, Signature } from '@harmony-js/crypto';\n\nexport interface TxParams {\n  id: string;\n  from: string;\n  to: string;\n  nonce: number | string;\n  gasLimit: number | string | BN;\n  gasPrice: number | string | BN;\n  shardID: number | string;\n  toShardID: number | string;\n  data: string;\n  value: number | string | BN;\n  chainId: number;\n  rawTransaction: string;\n  unsignedRawTransaction: string;\n  signature: Signature;\n  receipt?: TransasctionReceipt;\n}\n\nexport enum TxStatus {\n  NONE = 'NONE',\n  INTIALIZED = 'INITIALIZED',\n  SIGNED = 'SIGNED',\n  PENDING = 'PENDING',\n  CONFIRMED = 'CONFIRMED',\n  REJECTED = 'REJECTED',\n}\n\nexport interface TransasctionReceipt {\n  transactionHash: string;\n  transactionIndex: string;\n  blockHash: string;\n  blockNumber: string; // 11\n  from: string;\n  to: string;\n  gasUsed: string;\n  cumulativeGasUsed: string; // 13244\n  contractAddress?: string | null; // or null, if none was created\n  logs: any[];\n  logsBloom: string; // 256 byte bloom filter\n  v: string;\n  r: string;\n  s: string;\n  responseType?: string;\n  byzantium?: boolean;\n  status?: string; // post Byzantium will return `0x0` or `0x1`\n  root?: string; // pre Byzantium will return `root`\n}\n"]}},"error":null,"hash":"9bfca966d3a561e4edf2298b8734b5bf","cacheData":{"env":{}}}
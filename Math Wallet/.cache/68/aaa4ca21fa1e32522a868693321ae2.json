{"id":"../node_modules/@harmony-js/transaction/dist/transaction.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/transaction.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/src/transaction.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":8,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/transaction.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"@harmony-js/crypto","loc":{"line":9,"column":23},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/transaction.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/crypto/dist/index.js"},{"name":"@harmony-js/utils","loc":{"line":10,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/transaction.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/utils/dist/index.js"},{"name":"@harmony-js/network","loc":{"line":11,"column":24},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/transaction.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/index.js"},{"name":"./types","loc":{"line":12,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/transaction.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/types.js"},{"name":"./utils","loc":{"line":13,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/transaction.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/utils.js"},{"name":"./transactionBase","loc":{"line":14,"column":32},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/transaction.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/transactionBase.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-transaction\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transaction = void 0;\nvar tslib_1 = require(\"tslib\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar network_1 = require(\"@harmony-js/network\");\nvar types_1 = require(\"./types\");\nvar utils_2 = require(\"./utils\");\nvar transactionBase_1 = require(\"./transactionBase\");\nvar Transaction = /** @class */ (function (_super) {\n    tslib_1.__extends(Transaction, _super);\n    /**\n     *\n     * @Params\n     * ```javascript\n     * id:               string;\n      from:             string;\n      to:               string;\n      nonce:            number | string;\n      gasLimit:         number | string | BN;\n      gasPrice:         number | string | BN;\n      shardID:          number | string;\n      toShardID:        number | string;\n      data:             string;\n      value:            number | string | BN;\n      chainId:          number;\n      rawTransaction:   string;\n      unsignedRawTransaction: string;\n      signature:        Signature;\n      receipt?:         TransasctionReceipt;\n     * ```\n     */\n    function Transaction(params, messenger, txStatus) {\n        if (messenger === void 0) { messenger = utils_2.defaultMessenger; }\n        if (txStatus === void 0) { txStatus = types_1.TxStatus.INTIALIZED; }\n        var _this = _super.call(this, messenger, txStatus) || this;\n        // intialize transaction\n        _this.id = params && params.id ? params.id : '0x';\n        _this.from = params && params.from ? params.from : '0x';\n        _this.nonce = params && params.nonce ? params.nonce : 0;\n        _this.gasPrice =\n            params && params.gasPrice\n                ? new utils_1.Unit(params.gasPrice).asWei().toWei()\n                : new utils_1.Unit(0).asWei().toWei();\n        _this.gasLimit =\n            params && params.gasLimit\n                ? new utils_1.Unit(params.gasLimit).asWei().toWei()\n                : new utils_1.Unit(0).asWei().toWei();\n        _this.shardID =\n            params && params.shardID !== undefined ? params.shardID : _this.messenger.currentShard;\n        _this.toShardID =\n            params && params.toShardID !== undefined ? params.toShardID : _this.messenger.currentShard;\n        _this.to = params && params.to ? Transaction.normalizeAddress(params.to) : '0x';\n        _this.value =\n            params && params.value ? new utils_1.Unit(params.value).asWei().toWei() : new utils_1.Unit(0).asWei().toWei();\n        _this.data = params && params.data ? params.data : '0x';\n        // chainid should change with different network settings\n        _this.chainId = params && params.chainId ? params.chainId : _this.messenger.chainId;\n        _this.rawTransaction = params && params.rawTransaction ? params.rawTransaction : '0x';\n        _this.unsignedRawTransaction =\n            params && params.unsignedRawTransaction ? params.unsignedRawTransaction : '0x';\n        _this.signature =\n            params && params.signature\n                ? params.signature\n                : {\n                    r: '',\n                    s: '',\n                    recoveryParam: 0,\n                    v: 0,\n                };\n        _this.receipt = params && params.receipt ? params.receipt : undefined;\n        _this.cxStatus = _this.isCrossShard() ? types_1.TxStatus.INTIALIZED : types_1.TxStatus.NONE;\n        return _this;\n    }\n    /**\n     *\n     * @example\n     * ```javascript\n     * const unsigned = txn.getRLPUnsigned(txn);\n     * console.log(unsigned);\n     * ```\n     */\n    Transaction.prototype.getRLPUnsigned = function () {\n        var _this = this;\n        var raw = [];\n        // temp setting to be compatible with eth\n        var fields = this.messenger.chainType === utils_1.ChainType.Harmony ? utils_2.transactionFields : utils_2.transactionFieldsETH;\n        fields.forEach(function (field) {\n            var value = _this.txParams[field.name] || [];\n            value = crypto_1.arrayify(crypto_1.hexlify(field.transform === 'hex' ? utils_1.add0xToString(value.toString(16)) : value));\n            // Fixed-width field\n            if (field.fix === true && field.length && value.length !== field.length && value.length > 0) {\n                throw new Error(\"invalid length for \" + field.name);\n            }\n            // Variable-width (with a maximum)\n            if (field.fix === false && field.length) {\n                value = crypto_1.stripZeros(value);\n                if (value.length > field.length) {\n                    throw new Error(\"invalid length for \" + field.name);\n                }\n            }\n            raw.push(crypto_1.hexlify(value));\n        });\n        if (this.txParams.chainId != null && this.txParams.chainId !== 0) {\n            raw.push(crypto_1.hexlify(this.txParams.chainId));\n            raw.push('0x');\n            raw.push('0x');\n        }\n        return [crypto_1.encode(raw), raw];\n    };\n    Transaction.prototype.getRLPSigned = function (raw, signature) {\n        // temp setting to be compatible with eth\n        var rawLength = this.messenger.chainType === utils_1.ChainType.Harmony ? 11 : 9;\n        var sig = crypto_1.splitSignature(signature);\n        var v = 27 + (sig.recoveryParam || 0);\n        if (raw.length === rawLength) {\n            raw.pop();\n            raw.pop();\n            raw.pop();\n            v += this.chainId * 2 + 8;\n        }\n        raw.push(crypto_1.hexlify(v));\n        raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.r) || []));\n        raw.push(crypto_1.stripZeros(crypto_1.arrayify(sig.s) || []));\n        return crypto_1.encode(raw);\n    };\n    /**\n     * @example\n     * ```javascript\n     * console.log(txn.getRawTransaction());\n     * ```\n     */\n    Transaction.prototype.getRawTransaction = function () {\n        return this.rawTransaction;\n    };\n    /** @hidden */\n    Transaction.prototype.recover = function (rawTransaction) {\n        // temp setting to be compatible with eth\n        var recovered = this.messenger.chainType === utils_1.ChainType.Harmony\n            ? utils_2.recover(rawTransaction)\n            : utils_2.recoverETH(rawTransaction);\n        this.setParams(recovered);\n        return this;\n    };\n    Object.defineProperty(Transaction.prototype, \"txPayload\", {\n        /**\n         * get the payload of transaction\n         *\n         * @example\n         * ```\n         * const payload = txn.txPayload;\n         * console.log(payload);\n         * ```\n         */\n        get: function () {\n            return {\n                from: this.txParams.from || '0x',\n                to: this.txParams.to || '0x',\n                shardID: this.txParams.shardID ? utils_1.numberToHex(this.shardID) : '0x',\n                toShardID: this.txParams.toShardID ? utils_1.numberToHex(this.toShardID) : '0x',\n                gas: this.txParams.gasLimit ? utils_1.numberToHex(this.txParams.gasLimit) : '0x',\n                gasPrice: this.txParams.gasPrice ? utils_1.numberToHex(this.txParams.gasPrice) : '0x',\n                value: this.txParams.value ? utils_1.numberToHex(this.txParams.value) : '0x',\n                data: this.txParams.data || '0x',\n                nonce: this.txParams.nonce ? utils_1.numberToHex(this.nonce) : '0x',\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Transaction.prototype, \"txParams\", {\n        /**\n         * get transaction params\n         *\n         * @example\n         * ```\n         * const txParams = txn.txParams;\n         * console.log(txParams)\n         * ```\n         */\n        get: function () {\n            return {\n                id: this.id || '0x',\n                from: this.from || '',\n                nonce: this.nonce || 0,\n                gasPrice: this.gasPrice || new utils_1.Unit(0).asWei().toWei(),\n                gasLimit: this.gasLimit || new utils_1.Unit(0).asWei().toWei(),\n                shardID: this.shardID !== undefined ? this.shardID : this.messenger.currentShard,\n                toShardID: this.toShardID !== undefined ? this.toShardID : this.messenger.currentShard,\n                to: Transaction.normalizeAddress(this.to) || '0x',\n                value: this.value || new utils_1.Unit(0).asWei().toWei(),\n                data: this.data || '0x',\n                chainId: this.chainId || 0,\n                rawTransaction: this.rawTransaction || '0x',\n                unsignedRawTransaction: this.unsignedRawTransaction || '0x',\n                signature: this.signature || '0x',\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * set the params to the txn\n     *\n     * @example\n     * ```\n     * txn.setParams({\n     *   to: 'one1ew56rqrucu6p6n598fmjmnfh8dd4xpg6atne9c',\n     *   value: '1200',\n     *   gasLimit: '230000',\n     *   shardID: 1,\n     *   toShardID: 0,\n     *   gasPrice: new hmy.utils.Unit('101').asGwei().toWei(),\n     *   signature: {\n     *     r: '0xd693b532a80fed6392b428604171fb32fdbf953728a3a7ecc7d4062b1652c042',\n     *     s: '0x24e9c602ac800b983b035700a14b23f78a253ab762deab5dc27e3555a750b354',\n     *     v: 0\n     *   },\n     * });\n     * console.log(txn);\n     * ```\n     */\n    Transaction.prototype.setParams = function (params) {\n        this.id = params && params.id ? params.id : '0x';\n        this.from = params && params.from ? params.from : '0x';\n        this.nonce = params && params.nonce ? params.nonce : 0;\n        this.gasPrice =\n            params && params.gasPrice\n                ? new utils_1.Unit(params.gasPrice).asWei().toWei()\n                : new utils_1.Unit(0).asWei().toWei();\n        this.gasLimit =\n            params && params.gasLimit\n                ? new utils_1.Unit(params.gasLimit).asWei().toWei()\n                : new utils_1.Unit(0).asWei().toWei();\n        this.shardID =\n            params && params.shardID !== undefined ? params.shardID : this.messenger.currentShard;\n        this.toShardID =\n            params && params.toShardID !== undefined ? params.toShardID : this.messenger.currentShard;\n        this.to = params && params.to ? Transaction.normalizeAddress(params.to) : '0x';\n        this.value =\n            params && params.value ? new utils_1.Unit(params.value).asWei().toWei() : new utils_1.Unit(0).asWei().toWei();\n        this.data = params && params.data ? params.data : '0x';\n        this.chainId = params && params.chainId ? params.chainId : 0;\n        this.rawTransaction = params && params.rawTransaction ? params.rawTransaction : '0x';\n        this.unsignedRawTransaction =\n            params && params.unsignedRawTransaction ? params.unsignedRawTransaction : '0x';\n        this.signature =\n            params && params.signature\n                ? params.signature\n                : {\n                    r: '',\n                    s: '',\n                    recoveryParam: 0,\n                    v: 0,\n                };\n        if (this.rawTransaction !== '0x') {\n            this.setTxStatus(types_1.TxStatus.SIGNED);\n        }\n        else {\n            this.setTxStatus(types_1.TxStatus.INTIALIZED);\n        }\n    };\n    /** @hidden */\n    Transaction.prototype.map = function (fn) {\n        var newParams = fn(this.txParams);\n        this.setParams(newParams);\n        return this;\n    };\n    /**\n     * Check whether the transaction is cross shard\n     *\n     * @example\n     * ```javascript\n     * console.log(txn.isCrossShard());\n     * ```\n     */\n    Transaction.prototype.isCrossShard = function () {\n        return new crypto_1.BN(this.txParams.shardID).toString() !== new crypto_1.BN(this.txParams.toShardID).toString();\n    };\n    /**\n     *\n     * @example\n     * ```\n     * txn.sendTransaction().then((value) => {\n     *   console.log(value);\n     * });\n     * ```\n     */\n    Transaction.prototype.sendTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var res;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n                            throw new Error('Transaction not signed');\n                        }\n                        if (!this.messenger) {\n                            throw new Error('Messenger not found');\n                        }\n                        return [4 /*yield*/, this.messenger.send(network_1.RPCMethod.SendRawTransaction, this.rawTransaction, this.messenger.chainType, typeof this.shardID === 'string' ? Number.parseInt(this.shardID, 10) : this.shardID)];\n                    case 1:\n                        res = _a.sent();\n                        // temporarilly hard coded\n                        if (res.isResult()) {\n                            this.id = res.result;\n                            this.emitTransactionHash(this.id);\n                            this.setTxStatus(types_1.TxStatus.PENDING);\n                            // await this.confirm(this.id, 20, 1000);\n                            return [2 /*return*/, [this, res.result]];\n                        }\n                        else if (res.isError()) {\n                            this.emitConfirm(\"transaction failed:\" + res.error.message);\n                            this.setTxStatus(types_1.TxStatus.REJECTED);\n                            return [2 /*return*/, [this, \"transaction failed:\" + res.error.message]];\n                        }\n                        else {\n                            this.emitError('transaction failed');\n                            throw new Error('transaction failed');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Transaction.prototype.confirm = function (txHash, maxAttempts, interval, shardID, toShardID) {\n        if (maxAttempts === void 0) { maxAttempts = 20; }\n        if (interval === void 0) { interval = 1000; }\n        if (shardID === void 0) { shardID = this.txParams.shardID; }\n        if (toShardID === void 0) { toShardID = this.txParams.toShardID; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var txConfirmed, cxConfirmed;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.txConfirm(txHash, maxAttempts, interval, shardID)];\n                    case 1:\n                        txConfirmed = _a.sent();\n                        if (!this.isCrossShard()) {\n                            return [2 /*return*/, txConfirmed];\n                        }\n                        if (!txConfirmed.isConfirmed()) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.cxConfirm(txHash, maxAttempts, interval, toShardID)];\n                    case 2:\n                        cxConfirmed = _a.sent();\n                        return [2 /*return*/, cxConfirmed];\n                    case 3: return [2 /*return*/, txConfirmed];\n                }\n            });\n        });\n    };\n    return Transaction;\n}(transactionBase_1.TransactionBase));\nexports.Transaction = Transaction;\n"},"sourceMaps":{"js":{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../src/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-transaction\n */\n\nimport {\n  BN,\n  encode,\n  arrayify,\n  hexlify,\n  stripZeros,\n  Signature,\n  splitSignature,\n} from '@harmony-js/crypto';\nimport { add0xToString, numberToHex, ChainType, Unit } from '@harmony-js/utils';\nimport { Messenger, RPCMethod } from '@harmony-js/network';\nimport { TxParams, TxStatus } from './types';\nimport {\n  recover,\n  transactionFields,\n  defaultMessenger,\n  transactionFieldsETH,\n  recoverETH,\n} from './utils';\n\nimport { TransactionBase } from './transactionBase';\n\nclass Transaction extends TransactionBase {\n  /** @hidden */\n  private from: string;\n  /** @hidden */\n  private nonce: number | string;\n  /** @hidden */\n  private to: string;\n  // private shardID: number | string;\n  /** @hidden */\n  private toShardID: number | string;\n  /** @hidden */\n  private gasLimit: BN;\n  /** @hidden */\n  private gasPrice: BN;\n  /** @hidden */\n  private data: string;\n  /** @hidden */\n  private value: BN;\n  /** @hidden */\n  private chainId: number;\n  /** @hidden */\n  private rawTransaction: string;\n  /** @hidden */\n  private unsignedRawTransaction: string;\n  /** @hidden */\n  private signature: Signature;\n\n  /**\n   * \n   * @Params\n   * ```javascript\n   * id:               string;\n    from:             string;\n    to:               string;\n    nonce:            number | string;\n    gasLimit:         number | string | BN;\n    gasPrice:         number | string | BN;\n    shardID:          number | string;\n    toShardID:        number | string;\n    data:             string;\n    value:            number | string | BN;\n    chainId:          number;\n    rawTransaction:   string;\n    unsignedRawTransaction: string;\n    signature:        Signature;\n    receipt?:         TransasctionReceipt;\n   * ```\n   */\n  constructor(\n    params?: TxParams | any,\n    messenger: Messenger = defaultMessenger,\n    txStatus = TxStatus.INTIALIZED,\n  ) {\n    super(messenger, txStatus);\n    // intialize transaction\n    this.id = params && params.id ? params.id : '0x';\n    this.from = params && params.from ? params.from : '0x';\n    this.nonce = params && params.nonce ? params.nonce : 0;\n    this.gasPrice =\n      params && params.gasPrice\n        ? new Unit(params.gasPrice).asWei().toWei()\n        : new Unit(0).asWei().toWei();\n    this.gasLimit =\n      params && params.gasLimit\n        ? new Unit(params.gasLimit).asWei().toWei()\n        : new Unit(0).asWei().toWei();\n    this.shardID =\n      params && params.shardID !== undefined ? params.shardID : this.messenger.currentShard;\n    this.toShardID =\n      params && params.toShardID !== undefined ? params.toShardID : this.messenger.currentShard;\n\n    this.to = params && params.to ? Transaction.normalizeAddress(params.to) : '0x';\n    this.value =\n      params && params.value ? new Unit(params.value).asWei().toWei() : new Unit(0).asWei().toWei();\n    this.data = params && params.data ? params.data : '0x';\n    // chainid should change with different network settings\n    this.chainId = params && params.chainId ? params.chainId : this.messenger.chainId;\n    this.rawTransaction = params && params.rawTransaction ? params.rawTransaction : '0x';\n    this.unsignedRawTransaction =\n      params && params.unsignedRawTransaction ? params.unsignedRawTransaction : '0x';\n    this.signature =\n      params && params.signature\n        ? params.signature\n        : {\n            r: '',\n            s: '',\n            recoveryParam: 0,\n            v: 0,\n          };\n\n    this.receipt = params && params.receipt ? params.receipt : undefined;\n    this.cxStatus = this.isCrossShard() ? TxStatus.INTIALIZED : TxStatus.NONE;\n  }\n\n  /**\n   *\n   * @example\n   * ```javascript\n   * const unsigned = txn.getRLPUnsigned(txn);\n   * console.log(unsigned);\n   * ```\n   */\n  getRLPUnsigned(): [string, any[]] {\n    const raw: Array<string | Uint8Array> = [];\n\n    // temp setting to be compatible with eth\n    const fields =\n      this.messenger.chainType === ChainType.Harmony ? transactionFields : transactionFieldsETH;\n\n    fields.forEach((field: any) => {\n      let value = (<any>this.txParams)[field.name] || [];\n      value = arrayify(\n        hexlify(field.transform === 'hex' ? add0xToString(value.toString(16)) : value),\n      );\n      // Fixed-width field\n      if (field.fix === true && field.length && value.length !== field.length && value.length > 0) {\n        throw new Error(`invalid length for ${field.name}`);\n      }\n\n      // Variable-width (with a maximum)\n      if (field.fix === false && field.length) {\n        value = stripZeros(value);\n        if (value.length > field.length) {\n          throw new Error(`invalid length for ${field.name}`);\n        }\n      }\n\n      raw.push(hexlify(value));\n    });\n\n    if (this.txParams.chainId != null && this.txParams.chainId !== 0) {\n      raw.push(hexlify(this.txParams.chainId));\n      raw.push('0x');\n      raw.push('0x');\n    }\n\n    return [encode(raw), raw];\n  }\n\n  getRLPSigned(raw: any[], signature: Signature): string {\n    // temp setting to be compatible with eth\n    const rawLength = this.messenger.chainType === ChainType.Harmony ? 11 : 9;\n    const sig = splitSignature(signature);\n    let v = 27 + (sig.recoveryParam || 0);\n    if (raw.length === rawLength) {\n      raw.pop();\n      raw.pop();\n      raw.pop();\n      v += this.chainId * 2 + 8;\n    }\n\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r) || []));\n    raw.push(stripZeros(arrayify(sig.s) || []));\n\n    return encode(raw);\n  }\n\n  /**\n   * @example\n   * ```javascript\n   * console.log(txn.getRawTransaction());\n   * ```\n   */\n  getRawTransaction(): string {\n    return this.rawTransaction;\n  }\n\n  /** @hidden */\n  recover(rawTransaction: string): Transaction {\n    // temp setting to be compatible with eth\n    const recovered =\n      this.messenger.chainType === ChainType.Harmony\n        ? recover(rawTransaction)\n        : recoverETH(rawTransaction);\n\n    this.setParams(recovered);\n    return this;\n  }\n\n  /**\n   * get the payload of transaction\n   *\n   * @example\n   * ```\n   * const payload = txn.txPayload;\n   * console.log(payload);\n   * ```\n   */\n  get txPayload() {\n    return {\n      from: this.txParams.from || '0x',\n      to: this.txParams.to || '0x',\n      shardID: this.txParams.shardID ? numberToHex(this.shardID) : '0x',\n      toShardID: this.txParams.toShardID ? numberToHex(this.toShardID) : '0x',\n      gas: this.txParams.gasLimit ? numberToHex(this.txParams.gasLimit) : '0x',\n      gasPrice: this.txParams.gasPrice ? numberToHex(this.txParams.gasPrice) : '0x',\n      value: this.txParams.value ? numberToHex(this.txParams.value) : '0x',\n      data: this.txParams.data || '0x',\n      nonce: this.txParams.nonce ? numberToHex(this.nonce) : '0x',\n    };\n  }\n\n  /**\n   * get transaction params\n   *\n   * @example\n   * ```\n   * const txParams = txn.txParams;\n   * console.log(txParams)\n   * ```\n   */\n  get txParams(): TxParams {\n    return {\n      id: this.id || '0x',\n      from: this.from || '',\n      nonce: this.nonce || 0,\n      gasPrice: this.gasPrice || new Unit(0).asWei().toWei(),\n      gasLimit: this.gasLimit || new Unit(0).asWei().toWei(),\n      shardID: this.shardID !== undefined ? this.shardID : this.messenger.currentShard,\n      toShardID: this.toShardID !== undefined ? this.toShardID : this.messenger.currentShard,\n      to: Transaction.normalizeAddress(this.to) || '0x',\n      value: this.value || new Unit(0).asWei().toWei(),\n      data: this.data || '0x',\n      chainId: this.chainId || 0,\n      rawTransaction: this.rawTransaction || '0x',\n      unsignedRawTransaction: this.unsignedRawTransaction || '0x',\n      signature: this.signature || '0x',\n    };\n  }\n\n  /**\n   * set the params to the txn\n   *\n   * @example\n   * ```\n   * txn.setParams({\n   *   to: 'one1ew56rqrucu6p6n598fmjmnfh8dd4xpg6atne9c',\n   *   value: '1200',\n   *   gasLimit: '230000',\n   *   shardID: 1,\n   *   toShardID: 0,\n   *   gasPrice: new hmy.utils.Unit('101').asGwei().toWei(),\n   *   signature: {\n   *     r: '0xd693b532a80fed6392b428604171fb32fdbf953728a3a7ecc7d4062b1652c042',\n   *     s: '0x24e9c602ac800b983b035700a14b23f78a253ab762deab5dc27e3555a750b354',\n   *     v: 0\n   *   },\n   * });\n   * console.log(txn);\n   * ```\n   */\n  setParams(params: TxParams) {\n    this.id = params && params.id ? params.id : '0x';\n    this.from = params && params.from ? params.from : '0x';\n    this.nonce = params && params.nonce ? params.nonce : 0;\n    this.gasPrice =\n      params && params.gasPrice\n        ? new Unit(params.gasPrice).asWei().toWei()\n        : new Unit(0).asWei().toWei();\n    this.gasLimit =\n      params && params.gasLimit\n        ? new Unit(params.gasLimit).asWei().toWei()\n        : new Unit(0).asWei().toWei();\n    this.shardID =\n      params && params.shardID !== undefined ? params.shardID : this.messenger.currentShard;\n    this.toShardID =\n      params && params.toShardID !== undefined ? params.toShardID : this.messenger.currentShard;\n    this.to = params && params.to ? Transaction.normalizeAddress(params.to) : '0x';\n    this.value =\n      params && params.value ? new Unit(params.value).asWei().toWei() : new Unit(0).asWei().toWei();\n    this.data = params && params.data ? params.data : '0x';\n    this.chainId = params && params.chainId ? params.chainId : 0;\n    this.rawTransaction = params && params.rawTransaction ? params.rawTransaction : '0x';\n    this.unsignedRawTransaction =\n      params && params.unsignedRawTransaction ? params.unsignedRawTransaction : '0x';\n    this.signature =\n      params && params.signature\n        ? params.signature\n        : {\n            r: '',\n            s: '',\n            recoveryParam: 0,\n            v: 0,\n          };\n    if (this.rawTransaction !== '0x') {\n      this.setTxStatus(TxStatus.SIGNED);\n    } else {\n      this.setTxStatus(TxStatus.INTIALIZED);\n    }\n  }\n\n  /** @hidden */\n  map(fn: any) {\n    const newParams = fn(this.txParams);\n    this.setParams(newParams);\n\n    return this;\n  }\n\n  /**\n   * Check whether the transaction is cross shard\n   *\n   * @example\n   * ```javascript\n   * console.log(txn.isCrossShard());\n   * ```\n   */\n  isCrossShard(): boolean {\n    return new BN(this.txParams.shardID).toString() !== new BN(this.txParams.toShardID).toString();\n  }\n\n  /**\n   *\n   * @example\n   * ```\n   * txn.sendTransaction().then((value) => {\n   *   console.log(value);\n   * });\n   * ```\n   */\n\n  async sendTransaction(): Promise<[Transaction, string]> {\n    if (this.rawTransaction === 'tx' || this.rawTransaction === undefined) {\n      throw new Error('Transaction not signed');\n    }\n    if (!this.messenger) {\n      throw new Error('Messenger not found');\n    }\n\n    // const fromShard = this.shardID;\n    // const toShard = this.toShardID;\n    // await this.messenger.setShardingProviders();\n    const res = await this.messenger.send(\n      RPCMethod.SendRawTransaction,\n      this.rawTransaction,\n      this.messenger.chainType,\n      typeof this.shardID === 'string' ? Number.parseInt(this.shardID, 10) : this.shardID,\n    );\n\n    // temporarilly hard coded\n    if (res.isResult()) {\n      this.id = res.result;\n      this.emitTransactionHash(this.id);\n      this.setTxStatus(TxStatus.PENDING);\n      // await this.confirm(this.id, 20, 1000);\n      return [this, res.result];\n    } else if (res.isError()) {\n      this.emitConfirm(`transaction failed:${res.error.message}`);\n      this.setTxStatus(TxStatus.REJECTED);\n      return [this, `transaction failed:${res.error.message}`];\n    } else {\n      this.emitError('transaction failed');\n      throw new Error('transaction failed');\n    }\n  }\n\n  async confirm(\n    txHash: string,\n    maxAttempts: number = 20,\n    interval: number = 1000,\n    shardID: number | string = this.txParams.shardID,\n    toShardID: number | string = this.txParams.toShardID,\n  ) {\n    const txConfirmed = await this.txConfirm(txHash, maxAttempts, interval, shardID);\n    if (!this.isCrossShard()) {\n      return txConfirmed;\n    }\n    if (txConfirmed.isConfirmed()) {\n      const cxConfirmed = await this.cxConfirm(txHash, maxAttempts, interval, toShardID);\n      return cxConfirmed;\n    } else {\n      return txConfirmed;\n    }\n  }\n}\nexport { Transaction };\n"]}},"error":null,"hash":"2119f76e42cf2b65a077f3a7f28385ec","cacheData":{"env":{}}}
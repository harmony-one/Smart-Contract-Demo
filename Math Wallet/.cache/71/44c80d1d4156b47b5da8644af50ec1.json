{"id":"../node_modules/@harmony-js/network/dist/messenger/messenger.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/messenger/messenger.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/src/messenger/messenger.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":8,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/messenger/messenger.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"@harmony-js/utils","loc":{"line":9,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/messenger/messenger.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/utils/dist/index.js"},{"name":"../rpcMethod/builder","loc":{"line":10,"column":24},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/messenger/messenger.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/rpcMethod/builder.js"},{"name":"./responseMiddleware","loc":{"line":11,"column":35},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/messenger/messenger.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/messenger/responseMiddleware.js"},{"name":"../providers/http","loc":{"line":12,"column":21},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/messenger/messenger.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/http.js"},{"name":"../providers/ws","loc":{"line":13,"column":19},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/messenger/messenger.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/providers/ws.js"},{"name":"../rpcMethod/rpc","loc":{"line":15,"column":20},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/messenger/messenger.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/rpcMethod/rpc.js"},{"name":"../types","loc":{"line":16,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/messenger/messenger.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/types.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Messenger = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar builder_1 = require(\"../rpcMethod/builder\");\nvar responseMiddleware_1 = require(\"./responseMiddleware\");\nvar http_1 = require(\"../providers/http\");\nvar ws_1 = require(\"../providers/ws\");\n// import { getResultForData } from '../util';\nvar rpc_1 = require(\"../rpcMethod/rpc\");\nvar types_1 = require(\"../types\");\n/**\n * ## How to Create a Massage\n * @example\n * ```\n * const { HttpProvider, Messenger } = require('@harmony-js/network');\n * const { ChainType, ChainID } = require('@harmony-js/utils');\n *\n * // create a custom messenger\n * const customMessenger = new Messenger(\n *   new HttpProvider('http://localhost:9500'),\n *   ChainType.Harmony, // if you are connected to Harmony's blockchain\n *   ChainID.HmyLocal, // check if the chainId is correct\n * )\n * ```\n */\nvar Messenger = /** @class */ (function (_super) {\n    tslib_1.__extends(Messenger, _super);\n    function Messenger(provider, chainType, chainId, config) {\n        if (chainType === void 0) { chainType = utils_1.defaultConfig.Default.Chain_Type; }\n        if (chainId === void 0) { chainId = utils_1.defaultConfig.Default.Chain_ID; }\n        if (config === void 0) { config = utils_1.defaultConfig; }\n        var _this = _super.call(this, chainType, chainId) || this;\n        // tslint:disable-next-line: variable-name\n        _this.Network_ID = 'Default';\n        /**\n         * @function send\n         * @memberof Messenger.prototype\n         * @param  {String} method - RPC method\n         * @param  {Object} params - RPC method params\n         * @return {Object} RPC result\n         */\n        _this.send = function (method, params, rpcPrefix, shardID) {\n            if (shardID === void 0) { shardID = _this.currentShard; }\n            return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var rpcMethod, payload, provider, result, e_1;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            this.providerCheck();\n                            rpcMethod = method;\n                            if (rpcPrefix && utils_1.isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n                            }\n                            else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n                            }\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            payload = this.JsonRpc.toPayload(rpcMethod, params);\n                            provider = this.getShardProvider(shardID);\n                            this.setResMiddleware(function (data) {\n                                if (!(data instanceof responseMiddleware_1.ResponseMiddleware)) {\n                                    return new responseMiddleware_1.ResponseMiddleware(data);\n                                }\n                                else {\n                                    return data;\n                                }\n                            }, '*', provider);\n                            return [4 /*yield*/, provider.send(payload)];\n                        case 2:\n                            result = _a.sent();\n                            return [2 /*return*/, result];\n                        case 3:\n                            e_1 = _a.sent();\n                            throw new Error(e_1);\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        _this.subscribe = function (method, params, returnType, rpcPrefix, shardID) {\n            if (returnType === void 0) { returnType = types_1.SubscribeReturns.all; }\n            if (rpcPrefix === void 0) { rpcPrefix = _this.chainPrefix; }\n            if (shardID === void 0) { shardID = _this.currentShard; }\n            return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var rpcMethod, id, provider, reProvider_1, payload, error_1;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            rpcMethod = method;\n                            if (rpcPrefix && utils_1.isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n                            }\n                            else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n                            }\n                            id = null;\n                            provider = this.getShardProvider(shardID);\n                            if (!(provider instanceof ws_1.WSProvider)) return [3 /*break*/, 5];\n                            reProvider_1 = provider;\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            payload = this.JsonRpc.toPayload(rpcMethod, params);\n                            return [4 /*yield*/, reProvider_1.subscribe(payload)];\n                        case 2:\n                            id = _a.sent();\n                            reProvider_1.on(id, function (result) {\n                                reProvider_1.emitter.emit('data', result);\n                            });\n                            reProvider_1.once('error', function (error) {\n                                reProvider_1.removeEventListener(id);\n                                reProvider_1.emitter.emit('error', error);\n                                reProvider_1.removeEventListener('*');\n                            });\n                            return [3 /*break*/, 4];\n                        case 3:\n                            error_1 = _a.sent();\n                            reProvider_1.emitter.emit('error', error_1);\n                            reProvider_1.removeEventListener('*');\n                            return [3 /*break*/, 4];\n                        case 4:\n                            if (returnType === types_1.SubscribeReturns.all) {\n                                return [2 /*return*/, [reProvider_1, id]];\n                            }\n                            else if (returnType === types_1.SubscribeReturns.method) {\n                                return [2 /*return*/, reProvider_1];\n                            }\n                            else if (returnType === types_1.SubscribeReturns.id) {\n                                return [2 /*return*/, id];\n                            }\n                            else {\n                                throw new Error('Invalid returns');\n                            }\n                            return [3 /*break*/, 6];\n                        case 5: throw new Error('HttpProvider does not support this');\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        _this.unsubscribe = function (method, params, rpcPrefix, shardID) {\n            if (shardID === void 0) { shardID = _this.currentShard; }\n            return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var rpcMethod, provider, reProvider, payload, response, error_2;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            rpcMethod = method;\n                            if (rpcPrefix && utils_1.isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n                            }\n                            else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n                                rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n                            }\n                            provider = this.getShardProvider(shardID);\n                            if (!(provider instanceof ws_1.WSProvider)) return [3 /*break*/, 5];\n                            reProvider = this.provider;\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            payload = this.JsonRpc.toPayload(rpcMethod, params);\n                            return [4 /*yield*/, reProvider.unsubscribe(payload)];\n                        case 2:\n                            response = _a.sent();\n                            return [2 /*return*/, response];\n                        case 3:\n                            error_2 = _a.sent();\n                            throw error_2;\n                        case 4: return [3 /*break*/, 6];\n                        case 5: throw new Error('HttpProvider does not support this');\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * @var {Provider} provider\n         * @memberof Messenger.prototype\n         * @description Provider instance\n         */\n        _this.provider = provider;\n        /**\n         * @var {Object} config\n         * @memberof Messenger.prototype\n         * @description Messenger config\n         */\n        _this.config = config;\n        /**\n         * @var {Number} Network_ID\n         * @memberof Messenger.prototype\n         * @description Network ID for current provider\n         */\n        /**\n         * @var {JsonRpc} JsonRpc\n         * @memberof Messenger.prototype\n         * @description JsonRpc instance\n         */\n        _this.JsonRpc = new builder_1.JsonRpc();\n        // set Network ID\n        _this.setNetworkID(utils_1.defaultConfig.Default.Network_ID);\n        // set shardingProviders\n        _this.shardProviders = new Map();\n        return _this;\n        // this.setShardingProviders();\n    }\n    Object.defineProperty(Messenger.prototype, \"currentShard\", {\n        /**\n         * @example\n         * ```\n         * customMessenger.currentShard\n         * ```\n         */\n        get: function () {\n            return this.getCurrentShardID() || this.defaultShardID || 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Messenger.prototype, \"shardCount\", {\n        /**\n         * @example\n         * ```\n         * customMessenger.shardCount\n         * ```\n         */\n        get: function () {\n            return this.shardProviders.size;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * @function setProvider\n     * @memberof Messenger\n     * @description provider setter\n     * @param  {Provider} provider - provider instance\n     */\n    Messenger.prototype.setProvider = function (provider) {\n        this.provider = provider;\n    };\n    /**\n     * @function providerCheck\n     * @memberof Messenger\n     * @description provider checker\n     * @return {Error|null} provider validator\n     */\n    Messenger.prototype.providerCheck = function () {\n        if (!this.provider) {\n            throw new Error('provider is not found');\n        }\n    };\n    /**\n     * @function setReqMiddleware\n     * @description set request middleware\n     * @memberof Messenger\n     * @param  {any} middleware - middle ware for req\n     * @param  {String} method  - method name\n     * @hidden\n     */\n    Messenger.prototype.setReqMiddleware = function (middleware, method, provider) {\n        if (method === void 0) { method = '*'; }\n        provider.middlewares.request.use(middleware, method);\n    };\n    /**\n     * @function setResMiddleware\n     * @description set response middleware\n     * @memberof Messenger\n     * @param  {any} middleware - middle ware for req\n     * @param  {String} method  - method name\n     * @hidden\n     */\n    Messenger.prototype.setResMiddleware = function (middleware, method, provider) {\n        if (method === void 0) { method = '*'; }\n        provider.middlewares.response.use(middleware, method);\n    };\n    /**\n     * @function setNetworkID\n     * @description set network id\n     * @memberof Messenger\n     * @param  {String} id network id string\n     */\n    Messenger.prototype.setNetworkID = function (id) {\n        this.Network_ID = id;\n    };\n    Messenger.prototype.setRPCPrefix = function (method, prefix) {\n        var stringArray = method.split('_');\n        if (stringArray.length !== 2) {\n            throw new Error(\"could not set prefix with \" + method);\n        }\n        stringArray[0] = prefix;\n        return stringArray.join('_');\n    };\n    Messenger.prototype.setShardingProviders = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var response, shardingStructures, shardingStructures_1, shardingStructures_1_1, shard, shardID, error_3;\n            var e_2, _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (this.chainPrefix !== utils_1.ChainType.Harmony) {\n                            return [2 /*return*/];\n                        }\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.send(rpc_1.RPCMethod.GetShardingStructure, [], this.chainPrefix)];\n                    case 2:\n                        response = _b.sent();\n                        if (response.result) {\n                            shardingStructures = response.result;\n                            try {\n                                for (shardingStructures_1 = tslib_1.__values(shardingStructures), shardingStructures_1_1 = shardingStructures_1.next(); !shardingStructures_1_1.done; shardingStructures_1_1 = shardingStructures_1.next()) {\n                                    shard = shardingStructures_1_1.value;\n                                    shardID = typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n                                    this.shardProviders.set(shardID, {\n                                        current: shard.current,\n                                        shardID: shardID,\n                                        http: shard.http,\n                                        ws: shard.ws,\n                                    });\n                                }\n                            }\n                            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                            finally {\n                                try {\n                                    if (shardingStructures_1_1 && !shardingStructures_1_1.done && (_a = shardingStructures_1.return)) _a.call(shardingStructures_1);\n                                }\n                                finally { if (e_2) throw e_2.error; }\n                            }\n                        }\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_3 = _b.sent();\n                        return [2 /*return*/];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @example\n     * ```\n     * hmy.messenger.getShardProvider()\n     * ```\n     */\n    Messenger.prototype.getShardProvider = function (shardID) {\n        var provider = this.shardProviders.get(shardID);\n        if (provider) {\n            return this.provider instanceof http_1.HttpProvider\n                ? new http_1.HttpProvider(provider.http)\n                : new ws_1.WSProvider(provider.ws);\n        }\n        return this.provider;\n    };\n    /**\n     * @example\n     * ```\n     * hmy.messenger.getCurrentShardID()\n     * ```\n     */\n    Messenger.prototype.getCurrentShardID = function () {\n        var e_3, _a;\n        try {\n            for (var _b = tslib_1.__values(this.shardProviders), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var shard = _c.value;\n                if (shard[1].current === true ||\n                    shard[1].http === this.provider.url ||\n                    shard[1].ws === this.provider.url) {\n                    return shard[1].shardID;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    Messenger.prototype.setDefaultShardID = function (shardID) {\n        this.defaultShardID = shardID;\n    };\n    return Messenger;\n}(utils_1.HarmonyCore));\nexports.Messenger = Messenger;\n"},"sourceMaps":{"js":{"version":3,"file":"messenger.js","sourceRoot":"","sources":["../../src/messenger/messenger.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;AAEH,2CAA6F;AAC7F,gDAA+C;AAC/C,2DAA0D;AAC1D,0CAAiD;AACjD,sCAA6C;AAC7C,8CAA8C;AAC9C,wCAA6C;AAC7C,kCAA0D;AAU1D;;;;;;;;;;;;;;GAcG;AACH;IAAwB,qCAAW;IAUjC,mBACE,QAAmC,EACnC,SAAuD,EACvD,OAAiD,EACjD,MAA8B;QAF9B,0BAAA,EAAA,YAAuB,qBAAa,CAAC,OAAO,CAAC,UAAU;QACvD,wBAAA,EAAA,UAAmB,qBAAa,CAAC,OAAO,CAAC,QAAQ;QACjD,uBAAA,EAAA,SAAiB,qBAAa;QAJhC,YAME,kBAAM,SAAS,EAAE,OAAO,CAAC,SAmC1B;QAhDD,0CAA0C;QAC1C,gBAAU,GAAW,SAAS,CAAC;QAqE/B;;;;;;WAMG;QACH,UAAI,GAAG,UACL,MAA0B,EAC1B,MAAmC,EACnC,SAAkB,EAClB,OAAmC;YAAnC,wBAAA,EAAA,UAAkB,KAAI,CAAC,YAAY;;;;;;4BAEnC,IAAI,CAAC,aAAa,EAAE,CAAC;4BACjB,SAAS,GAAG,MAAM,CAAC;4BACvB,IAAI,SAAS,IAAI,gBAAQ,CAAC,SAAS,CAAC,IAAI,SAAS,KAAK,IAAI,CAAC,WAAW,EAAE;gCACtE,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;6BAClD;iCAAM,IAAI,CAAC,SAAS,IAAI,SAAS,KAAK,IAAI,CAAC,WAAW,EAAE;gCACvD,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;6BACzD;;;;4BAEO,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;4BACpD,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;4BAChD,IAAI,CAAC,gBAAgB,CACnB,UAAC,IAAS;gCACR,IAAI,CAAC,CAAC,IAAI,YAAY,uCAAkB,CAAC,EAAE;oCACzC,OAAO,IAAI,uCAAkB,CAAC,IAAI,CAAC,CAAC;iCACrC;qCAAM;oCACL,OAAO,IAAI,CAAC;iCACb;4BACH,CAAC,EACD,GAAG,EACH,QAAQ,CACT,CAAC;4BAEa,qBAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAA;;4BAArC,MAAM,GAAG,SAA4B;4BAC3C,sBAAO,MAAM,EAAC;;;4BAGd,MAAM,IAAI,KAAK,CAAC,GAAC,CAAC,CAAC;;;;;SAEtB,CAAC;QAmEF,eAAS,GAAG,UACV,MAA0B,EAC1B,MAAmC,EACnC,UAAmD,EACnD,SAAoC,EACpC,OAAmC;YAFnC,2BAAA,EAAA,aAA+B,wBAAgB,CAAC,GAAG;YACnD,0BAAA,EAAA,YAAoB,KAAI,CAAC,WAAW;YACpC,wBAAA,EAAA,UAAkB,KAAI,CAAC,YAAY;;;;;;4BAE/B,SAAS,GAAG,MAAM,CAAC;4BACvB,IAAI,SAAS,IAAI,gBAAQ,CAAC,SAAS,CAAC,IAAI,SAAS,KAAK,IAAI,CAAC,WAAW,EAAE;gCACtE,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;6BAClD;iCAAM,IAAI,CAAC,SAAS,IAAI,SAAS,KAAK,IAAI,CAAC,WAAW,EAAE;gCACvD,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;6BACzD;4BACG,EAAE,GAAQ,IAAI,CAAC;4BACb,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;iCAC5C,CAAA,QAAQ,YAAY,eAAU,CAAA,EAA9B,wBAA8B;4BAC1B,eAAa,QAAQ,CAAC;;;;4BAGpB,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;4BACrD,qBAAM,YAAU,CAAC,SAAS,CAAC,OAAO,CAAC,EAAA;;4BAAxC,EAAE,GAAG,SAAmC,CAAC;4BACzC,YAAU,CAAC,EAAE,CAAC,EAAE,EAAE,UAAC,MAAW;gCAC5B,YAAU,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;4BAC1C,CAAC,CAAC,CAAC;4BACH,YAAU,CAAC,IAAI,CAAC,OAAO,EAAE,UAAC,KAAK;gCAC7B,YAAU,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;gCACnC,YAAU,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gCACxC,YAAU,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;4BACtC,CAAC,CAAC,CAAC;;;;4BAEH,YAAU,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,OAAK,CAAC,CAAC;4BACxC,YAAU,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;;;4BAEtC,IAAI,UAAU,KAAK,wBAAgB,CAAC,GAAG,EAAE;gCACvC,sBAAO,CAAC,YAAU,EAAE,EAAE,CAAC,EAAC;6BACzB;iCAAM,IAAI,UAAU,KAAK,wBAAgB,CAAC,MAAM,EAAE;gCACjD,sBAAO,YAAU,EAAC;6BACnB;iCAAM,IAAI,UAAU,KAAK,wBAAgB,CAAC,EAAE,EAAE;gCAC7C,sBAAO,EAAE,EAAC;6BACX;iCAAM;gCACL,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;6BACpC;;gCAED,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;;;;;SAEzD,CAAC;QAEF,iBAAW,GAAG,UACZ,MAA0B,EAC1B,MAAmC,EACnC,SAAkB,EAClB,OAAmC;YAAnC,wBAAA,EAAA,UAAkB,KAAI,CAAC,YAAY;;;;;;4BAE/B,SAAS,GAAG,MAAM,CAAC;4BACvB,IAAI,SAAS,IAAI,gBAAQ,CAAC,SAAS,CAAC,IAAI,SAAS,KAAK,IAAI,CAAC,WAAW,EAAE;gCACtE,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;6BAClD;iCAAM,IAAI,CAAC,SAAS,IAAI,SAAS,KAAK,IAAI,CAAC,WAAW,EAAE;gCACvD,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;6BACzD;4BACK,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;iCAC5C,CAAA,QAAQ,YAAY,eAAU,CAAA,EAA9B,wBAA8B;4BAC1B,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC;;;;4BAEzB,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;4BACzC,qBAAM,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,EAAA;;4BAAhD,QAAQ,GAAG,SAAqC;4BACtD,sBAAO,QAAQ,EAAC;;;4BAEhB,MAAM,OAAK,CAAC;;gCAGd,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;;;;;SAEzD,CAAC;QA3OA;;;;WAIG;QACH,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB;;;;WAIG;QACH,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB;;;;WAIG;QAEH;;;;WAIG;QACH,KAAI,CAAC,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAC;QAE7B,iBAAiB;QACjB,KAAI,CAAC,YAAY,CAAC,qBAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAEpD,wBAAwB;QAExB,KAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;;QAChC,+BAA+B;IACjC,CAAC;IAQD,sBAAI,mCAAY;QANhB;;;;;WAKG;aACH;YACE,OAAO,IAAI,CAAC,iBAAiB,EAAE,IAAI,IAAI,CAAC,cAAc,IAAI,CAAC,CAAC;QAC9D,CAAC;;;OAAA;IAQD,sBAAI,iCAAU;QANd;;;;;WAKG;aACH;YACE,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;QAClC,CAAC;;;OAAA;IA6CD;;;;;OAKG;IACH,+BAAW,GAAX,UAAY,QAAmC;QAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACH,iCAAa,GAAb;QACE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;IACH,CAAC;IAED;;;;;;;OAOG;IACH,oCAAgB,GAAhB,UAAiB,UAAe,EAAE,MAAY,EAAE,QAAmC;QAAjD,uBAAA,EAAA,YAAY;QAC5C,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACvD,CAAC;IAED;;;;;;;OAOG;IACH,oCAAgB,GAAhB,UAAiB,UAAe,EAAE,MAAY,EAAE,QAAmC;QAAjD,uBAAA,EAAA,YAAY;QAC5C,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACxD,CAAC;IAED;;;;;OAKG;IACH,gCAAY,GAAZ,UAAa,EAAU;QACrB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;IAED,gCAAY,GAAZ,UAAa,MAA0B,EAAE,MAAc;QACrD,IAAM,WAAW,GAAa,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChD,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,+BAA6B,MAAQ,CAAC,CAAC;SACxD;QACD,WAAW,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QACxB,OAAO,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IA4EK,wCAAoB,GAA1B;;;;;;;wBACE,IAAI,IAAI,CAAC,WAAW,KAAK,iBAAS,CAAC,OAAO,EAAE;4BAC1C,sBAAO;yBACR;;;;wBAEkB,qBAAM,IAAI,CAAC,IAAI,CAAC,eAAS,CAAC,oBAAoB,EAAE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAA;;wBAAhF,QAAQ,GAAG,SAAqE;wBAEtF,IAAI,QAAQ,CAAC,MAAM,EAAE;4BACb,kBAAkB,GAAmB,QAAQ,CAAC,MAAM,CAAC;;gCAC3D,KAAoB,uBAAA,iBAAA,kBAAkB,CAAA,4IAAE;oCAA7B,KAAK;oCACR,OAAO,GACX,OAAO,KAAK,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;oCACzF,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE;wCAC/B,OAAO,EAAE,KAAK,CAAC,OAAO;wCACtB,OAAO,SAAA;wCACP,IAAI,EAAE,KAAK,CAAC,IAAI;wCAChB,EAAE,EAAE,KAAK,CAAC,EAAE;qCACb,CAAC,CAAC;iCACJ;;;;;;;;;yBACF;;;;wBAED,sBAAO;;;;;KAEV;IAED;;;;;OAKG;IACH,oCAAgB,GAAhB,UAAiB,OAAe;QAC9B,IAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,QAAQ,EAAE;YACZ,OAAO,IAAI,CAAC,QAAQ,YAAY,mBAAY;gBAC1C,CAAC,CAAC,IAAI,mBAAY,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACjC,CAAC,CAAC,IAAI,eAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SACjC;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IAEH,qCAAiB,GAAjB;;;YACE,KAAoB,IAAA,KAAA,iBAAA,IAAI,CAAC,cAAc,CAAA,gBAAA,4BAAE;gBAApC,IAAM,KAAK,WAAA;gBACd,IACE,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,IAAI;oBACzB,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG;oBACnC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,EACjC;oBACA,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;iBACzB;aACF;;;;;;;;;IACH,CAAC;IACD,qCAAiB,GAAjB,UAAkB,OAAe;QAC/B,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;IAChC,CAAC;IACH,gBAAC;AAAD,CAAC,AA7TD,CAAwB,mBAAW,GA6TlC;AACQ,8BAAS","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-network\n */\n\nimport { HarmonyCore, ChainType, isString, ChainID, defaultConfig } from '@harmony-js/utils';\nimport { JsonRpc } from '../rpcMethod/builder';\nimport { ResponseMiddleware } from './responseMiddleware';\nimport { HttpProvider } from '../providers/http';\nimport { WSProvider } from '../providers/ws';\n// import { getResultForData } from '../util';\nimport { RPCMethod } from '../rpcMethod/rpc';\nimport { SubscribeReturns, ShardingItem } from '../types';\n\n/** @hidden */\nexport interface ShardingProvider {\n  current: boolean;\n  shardID: number;\n  http: string;\n  ws: string;\n}\n\n/**\n * ## How to Create a Massage\n * @example\n * ```\n * const { HttpProvider, Messenger } = require('@harmony-js/network');\n * const { ChainType, ChainID } = require('@harmony-js/utils');\n *\n * // create a custom messenger\n * const customMessenger = new Messenger(\n *   new HttpProvider('http://localhost:9500'),\n *   ChainType.Harmony, // if you are connected to Harmony's blockchain\n *   ChainID.HmyLocal, // check if the chainId is correct\n * )\n * ```\n */\nclass Messenger extends HarmonyCore {\n  provider: HttpProvider | WSProvider;\n  config?: object;\n  // tslint:disable-next-line: variable-name\n  Network_ID: string = 'Default';\n  shardProviders: Map<number, ShardingProvider>;\n\n  JsonRpc: JsonRpc;\n  defaultShardID?: number;\n\n  constructor(\n    provider: HttpProvider | WSProvider,\n    chainType: ChainType = defaultConfig.Default.Chain_Type,\n    chainId: ChainID = defaultConfig.Default.Chain_ID,\n    config: object = defaultConfig,\n  ) {\n    super(chainType, chainId);\n\n    /**\n     * @var {Provider} provider\n     * @memberof Messenger.prototype\n     * @description Provider instance\n     */\n    this.provider = provider;\n\n    /**\n     * @var {Object} config\n     * @memberof Messenger.prototype\n     * @description Messenger config\n     */\n    this.config = config;\n    /**\n     * @var {Number} Network_ID\n     * @memberof Messenger.prototype\n     * @description Network ID for current provider\n     */\n\n    /**\n     * @var {JsonRpc} JsonRpc\n     * @memberof Messenger.prototype\n     * @description JsonRpc instance\n     */\n    this.JsonRpc = new JsonRpc();\n\n    // set Network ID\n    this.setNetworkID(defaultConfig.Default.Network_ID);\n\n    // set shardingProviders\n\n    this.shardProviders = new Map();\n    // this.setShardingProviders();\n  }\n\n  /**\n   * @example\n   * ```\n   * customMessenger.currentShard\n   * ```\n   */\n  get currentShard(): number {\n    return this.getCurrentShardID() || this.defaultShardID || 0;\n  }\n\n  /**\n   * @example\n   * ```\n   * customMessenger.shardCount\n   * ```\n   */\n  get shardCount(): number {\n    return this.shardProviders.size;\n  }\n\n  /**\n   * @function send\n   * @memberof Messenger.prototype\n   * @param  {String} method - RPC method\n   * @param  {Object} params - RPC method params\n   * @return {Object} RPC result\n   */\n  send = async (\n    method: RPCMethod | string,\n    params?: string | any[] | undefined,\n    rpcPrefix?: string,\n    shardID: number = this.currentShard,\n  ) => {\n    this.providerCheck();\n    let rpcMethod = method;\n    if (rpcPrefix && isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n    } else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n    }\n    try {\n      const payload = this.JsonRpc.toPayload(rpcMethod, params);\n      const provider = this.getShardProvider(shardID);\n      this.setResMiddleware(\n        (data: any) => {\n          if (!(data instanceof ResponseMiddleware)) {\n            return new ResponseMiddleware(data);\n          } else {\n            return data;\n          }\n        },\n        '*',\n        provider,\n      );\n\n      const result = await provider.send(payload);\n      return result;\n      // return getResultForData(result); // getResultForData(result)\n    } catch (e) {\n      throw new Error(e);\n    }\n  };\n\n  /**\n   * @function setProvider\n   * @memberof Messenger\n   * @description provider setter\n   * @param  {Provider} provider - provider instance\n   */\n  setProvider(provider: HttpProvider | WSProvider) {\n    this.provider = provider;\n  }\n\n  /**\n   * @function providerCheck\n   * @memberof Messenger\n   * @description provider checker\n   * @return {Error|null} provider validator\n   */\n  providerCheck() {\n    if (!this.provider) {\n      throw new Error('provider is not found');\n    }\n  }\n\n  /**\n   * @function setReqMiddleware\n   * @description set request middleware\n   * @memberof Messenger\n   * @param  {any} middleware - middle ware for req\n   * @param  {String} method  - method name\n   * @hidden\n   */\n  setReqMiddleware(middleware: any, method = '*', provider: HttpProvider | WSProvider) {\n    provider.middlewares.request.use(middleware, method);\n  }\n\n  /**\n   * @function setResMiddleware\n   * @description set response middleware\n   * @memberof Messenger\n   * @param  {any} middleware - middle ware for req\n   * @param  {String} method  - method name\n   * @hidden\n   */\n  setResMiddleware(middleware: any, method = '*', provider: HttpProvider | WSProvider) {\n    provider.middlewares.response.use(middleware, method);\n  }\n\n  /**\n   * @function setNetworkID\n   * @description set network id\n   * @memberof Messenger\n   * @param  {String} id network id string\n   */\n  setNetworkID(id: string) {\n    this.Network_ID = id;\n  }\n\n  setRPCPrefix(method: RPCMethod | string, prefix: string): string {\n    const stringArray: string[] = method.split('_');\n    if (stringArray.length !== 2) {\n      throw new Error(`could not set prefix with ${method}`);\n    }\n    stringArray[0] = prefix;\n    return stringArray.join('_');\n  }\n\n  subscribe = async (\n    method: RPCMethod | string,\n    params?: string | any[] | undefined,\n    returnType: SubscribeReturns = SubscribeReturns.all,\n    rpcPrefix: string = this.chainPrefix,\n    shardID: number = this.currentShard,\n  ) => {\n    let rpcMethod = method;\n    if (rpcPrefix && isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n    } else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n    }\n    let id: any = null;\n    const provider = this.getShardProvider(shardID);\n    if (provider instanceof WSProvider) {\n      const reProvider = provider;\n\n      try {\n        const payload = this.JsonRpc.toPayload(rpcMethod, params);\n        id = await reProvider.subscribe(payload);\n        reProvider.on(id, (result: any) => {\n          reProvider.emitter.emit('data', result);\n        });\n        reProvider.once('error', (error) => {\n          reProvider.removeEventListener(id);\n          reProvider.emitter.emit('error', error);\n          reProvider.removeEventListener('*');\n        });\n      } catch (error) {\n        reProvider.emitter.emit('error', error);\n        reProvider.removeEventListener('*');\n      }\n      if (returnType === SubscribeReturns.all) {\n        return [reProvider, id];\n      } else if (returnType === SubscribeReturns.method) {\n        return reProvider;\n      } else if (returnType === SubscribeReturns.id) {\n        return id;\n      } else {\n        throw new Error('Invalid returns');\n      }\n    } else {\n      throw new Error('HttpProvider does not support this');\n    }\n  };\n\n  unsubscribe = async (\n    method: RPCMethod | string,\n    params?: string | any[] | undefined,\n    rpcPrefix?: string,\n    shardID: number = this.currentShard,\n  ) => {\n    let rpcMethod = method;\n    if (rpcPrefix && isString(rpcPrefix) && rpcPrefix !== this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, rpcPrefix);\n    } else if (!rpcPrefix || rpcPrefix === this.chainPrefix) {\n      rpcMethod = this.setRPCPrefix(method, this.chainPrefix);\n    }\n    const provider = this.getShardProvider(shardID);\n    if (provider instanceof WSProvider) {\n      const reProvider = this.provider;\n      try {\n        const payload = this.JsonRpc.toPayload(rpcMethod, params);\n        const response = await reProvider.unsubscribe(payload);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    } else {\n      throw new Error('HttpProvider does not support this');\n    }\n  };\n\n  async setShardingProviders() {\n    if (this.chainPrefix !== ChainType.Harmony) {\n      return;\n    }\n    try {\n      const response = await this.send(RPCMethod.GetShardingStructure, [], this.chainPrefix);\n\n      if (response.result) {\n        const shardingStructures: ShardingItem[] = response.result;\n        for (const shard of shardingStructures) {\n          const shardID =\n            typeof shard.shardID === 'string' ? Number.parseInt(shard.shardID, 10) : shard.shardID;\n          this.shardProviders.set(shardID, {\n            current: shard.current,\n            shardID,\n            http: shard.http,\n            ws: shard.ws,\n          });\n        }\n      }\n    } catch (error) {\n      return;\n    }\n  }\n\n  /**\n   * @example\n   * ```\n   * hmy.messenger.getShardProvider()\n   * ```\n   */\n  getShardProvider(shardID: number): HttpProvider | WSProvider {\n    const provider = this.shardProviders.get(shardID);\n    if (provider) {\n      return this.provider instanceof HttpProvider\n        ? new HttpProvider(provider.http)\n        : new WSProvider(provider.ws);\n    }\n    return this.provider;\n  }\n\n  /**\n   * @example\n   * ```\n   * hmy.messenger.getCurrentShardID()\n   * ```\n   */\n\n  getCurrentShardID() {\n    for (const shard of this.shardProviders) {\n      if (\n        shard[1].current === true ||\n        shard[1].http === this.provider.url ||\n        shard[1].ws === this.provider.url\n      ) {\n        return shard[1].shardID;\n      }\n    }\n  }\n  setDefaultShardID(shardID: number) {\n    this.defaultShardID = shardID;\n  }\n}\nexport { Messenger };\n"]}},"error":null,"hash":"54d7a8251f52e5e5da6e66d2487888cd","cacheData":{"env":{}}}
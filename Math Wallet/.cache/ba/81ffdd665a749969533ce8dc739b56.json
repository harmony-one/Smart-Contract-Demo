{"id":"../node_modules/@harmony-js/utils/dist/chain.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/utils/dist/chain.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/utils/src/chain.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/utils/package.json","includedInParent":true,"mtime":1605232158218}],"generated":{"js":"\"use strict\";\n/**\n * ## About this package\n *\n * `@harmony-js/util` provides utility functions for Harmony dapps and other `harmony-js` packages\n *\n * Develop can use this package to:\n * - Transform the unit of token (fromWei, toWei...)\n * - Convert variable to different type (hexToBN, numberToHex...)\n * - Check validators information (isAddress, isPublicKey, isBlockNumber...)\n *\n * ## How to use this package\n *\n * ### Step 1: create a Harmony Instance\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n * const { BN } = require('@harmony-js/crypto');\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *     chainType: ChainType.Harmony,\n *     chainId: ChainID.HmyLocal,\n *   },\n * );\n * ```\n *\n * ### Step 2: Select and call functions\n * Here are some examples:\n *\n * ```javascript\n * // numberToString\n * const num = 123;\n * const str = hmy.utils.numberToString(num)\n * console.log(str);\n *\n * // add0xToString\n * const str = '12345';\n * const expected = hmy.utils.add0xToString(str)\n * console.log(expected);\n *\n * // fromWei\n * const Wei = new BN('1000000000000000000');\n * const expected = hmy.utils.fromWei(Wei, hmy.utils.Units.one);\n * console.log(expected);\n *\n * // toWei\n * const one = new BN('1');\n * const expected = hmy.utils.toWei(one, hmy.utils.Units.one);\n * const num = hmy.utils.numToStr(expected);\n * console.log(num);\n * ```\n *\n * ### Step 3: Using unit class to convet the token unit\n * ```javascript\n * // convert one to Gwei\n * const one = new hmy.utils.Unit('1').asOne();\n * const oneToGwei = one.toGwei();\n * console.log(oneToGwei);\n * ```\n *\n * ## Some Important consts and Enums\n * ### Chain Type\n * ```javascript\n * Harmony = 'hmy',\n * Ethereum = 'eth',\n * ```\n *\n * ### Chain ID\n * ```javascript\n * Default = 0,\n  EthMainnet = 1,\n  Morden = 2,\n  Ropsten = 3,\n  Rinkeby = 4,\n  RootstockMainnet = 30,\n  RootstockTestnet = 31,\n  Kovan = 42,\n  EtcMainnet = 61,\n  EtcTestnet = 62,\n  Geth = 1337,\n  Ganache = 0,\n  HmyMainnet = 1,\n  HmyTestnet = 2,\n  HmyLocal = 2,\n  HmyPangaea = 3,\n * ```\n *\n * ### Default Config\n * ```javascript\n * export const defaultConfig = {\n *   Default: {\n *     Chain_ID: ChainID.HmyLocal,\n *     Chain_Type: ChainType.Harmony,\n *     Chain_URL: 'http://localhost:9500',\n *     Network_ID: 'Local',\n * },\n *   DefaultWS: {\n *     Chain_ID: ChainID.HmyLocal,\n *     Chain_Type: ChainType.Harmony,\n *     Chain_URL: 'ws://localhost:9800',\n *     Network_ID: 'LocalWS',\n *   },\n * };\n * ```\n *\n * ### Unit Map\n * ```\n * [Units.wei, '1'], // 1 wei\n * [Units.Kwei, '1000'], // 1e3 wei\n * [Units.Mwei, '1000000'], // 1e6 wei\n * [Units.Gwei, '1000000000'], // 1e9 wei\n * [Units.szabo, '1000000000000'], // 1e12 wei\n * [Units.finney, '1000000000000000'], // 1e15 wei\n * [Units.ether, '1000000000000000000'], // 1e18 wei\n * [Units.one, '1000000000000000000'], // 1e18 wei\n * [Units.Kether, '1000000000000000000000'], // 1e21 wei\n * [Units.Mether, '1000000000000000000000000'], // 1e24 wei\n * [Units.Gether, '1000000000000000000000000000'], // 1e27 wei\n * [Units.Tether, '1000000000000000000000000000000'], // 1e30 wei\n * ```\n *\n * @packageDocumentation\n * @module harmony-utils\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddressSuffix = exports.HDPath = exports.HarmonyCore = exports.defaultConfig = exports.ChainID = exports.ChainType = void 0;\nvar ChainType;\n(function (ChainType) {\n    ChainType[\"Harmony\"] = \"hmy\";\n    ChainType[\"Ethereum\"] = \"eth\";\n})(ChainType = exports.ChainType || (exports.ChainType = {}));\nvar ChainID;\n(function (ChainID) {\n    ChainID[ChainID[\"Default\"] = 0] = \"Default\";\n    ChainID[ChainID[\"EthMainnet\"] = 1] = \"EthMainnet\";\n    ChainID[ChainID[\"Morden\"] = 2] = \"Morden\";\n    ChainID[ChainID[\"Ropsten\"] = 3] = \"Ropsten\";\n    ChainID[ChainID[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    ChainID[ChainID[\"RootstockMainnet\"] = 30] = \"RootstockMainnet\";\n    ChainID[ChainID[\"RootstockTestnet\"] = 31] = \"RootstockTestnet\";\n    ChainID[ChainID[\"Kovan\"] = 42] = \"Kovan\";\n    ChainID[ChainID[\"EtcMainnet\"] = 61] = \"EtcMainnet\";\n    ChainID[ChainID[\"EtcTestnet\"] = 62] = \"EtcTestnet\";\n    ChainID[ChainID[\"Geth\"] = 1337] = \"Geth\";\n    ChainID[ChainID[\"Ganache\"] = 0] = \"Ganache\";\n    ChainID[ChainID[\"HmyMainnet\"] = 1] = \"HmyMainnet\";\n    ChainID[ChainID[\"HmyTestnet\"] = 2] = \"HmyTestnet\";\n    ChainID[ChainID[\"HmyLocal\"] = 2] = \"HmyLocal\";\n    ChainID[ChainID[\"HmyPangaea\"] = 3] = \"HmyPangaea\";\n})(ChainID = exports.ChainID || (exports.ChainID = {}));\n/** @hidden */\nexports.defaultConfig = {\n    Default: {\n        Chain_ID: ChainID.HmyLocal,\n        Chain_Type: ChainType.Harmony,\n        Chain_URL: 'http://localhost:9500',\n        Network_ID: 'Local',\n    },\n    DefaultWS: {\n        Chain_ID: ChainID.HmyLocal,\n        Chain_Type: ChainType.Harmony,\n        Chain_URL: 'ws://localhost:9800',\n        Network_ID: 'LocalWS',\n    },\n};\n/** @hidden */\nvar HarmonyCore = /** @class */ (function () {\n    function HarmonyCore(chainType, chainId) {\n        if (chainId === void 0) { chainId = exports.defaultConfig.Default.Chain_ID; }\n        this.chainType = chainType;\n        this.chainId = chainId;\n    }\n    Object.defineProperty(HarmonyCore.prototype, \"chainPrefix\", {\n        get: function () {\n            switch (this.chainType) {\n                case ChainType.Ethereum: {\n                    return 'eth';\n                }\n                case ChainType.Harmony: {\n                    return 'hmy';\n                }\n                default: {\n                    return 'hmy';\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(HarmonyCore.prototype, \"getChainId\", {\n        get: function () {\n            return this.chainId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    HarmonyCore.prototype.setChainId = function (chainId) {\n        this.chainId = chainId;\n    };\n    HarmonyCore.prototype.setChainType = function (chainType) {\n        this.chainType = chainType;\n    };\n    return HarmonyCore;\n}());\nexports.HarmonyCore = HarmonyCore;\n/** @hidden */\nexports.HDPath = \"m/44'/1023'/0'/0/\";\n/** @hidden */\nexports.AddressSuffix = '-';\n"},"sourceMaps":{"js":{"version":3,"file":"chain.js","sourceRoot":"","sources":["../src/chain.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4HG;;;AAEH,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,4BAAe,CAAA;IACf,6BAAgB,CAAA;AAClB,CAAC,EAHW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAGpB;AAED,IAAY,OAiBX;AAjBD,WAAY,OAAO;IACjB,2CAAW,CAAA;IACX,iDAAc,CAAA;IACd,yCAAU,CAAA;IACV,2CAAW,CAAA;IACX,2CAAW,CAAA;IACX,8DAAqB,CAAA;IACrB,8DAAqB,CAAA;IACrB,wCAAU,CAAA;IACV,kDAAe,CAAA;IACf,kDAAe,CAAA;IACf,wCAAW,CAAA;IACX,2CAAW,CAAA;IACX,iDAAc,CAAA;IACd,iDAAc,CAAA;IACd,6CAAY,CAAA;IACZ,iDAAc,CAAA;AAChB,CAAC,EAjBW,OAAO,GAAP,eAAO,KAAP,eAAO,QAiBlB;AAED,cAAc;AACD,QAAA,aAAa,GAAG;IAC3B,OAAO,EAAE;QACP,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,UAAU,EAAE,SAAS,CAAC,OAAO;QAC7B,SAAS,EAAE,uBAAuB;QAClC,UAAU,EAAE,OAAO;KACpB;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,UAAU,EAAE,SAAS,CAAC,OAAO;QAC7B,SAAS,EAAE,qBAAqB;QAChC,UAAU,EAAE,SAAS;KACtB;CACF,CAAC;AAEF,cAAc;AACd;IAGE,qBAAY,SAAoB,EAAE,OAAiD;QAAjD,wBAAA,EAAA,UAAmB,qBAAa,CAAC,OAAO,CAAC,QAAQ;QACjF,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IACD,sBAAI,oCAAW;aAAf;YACE,QAAQ,IAAI,CAAC,SAAS,EAAE;gBACtB,KAAK,SAAS,CAAC,QAAQ,CAAC,CAAC;oBACvB,OAAO,KAAK,CAAC;iBACd;gBACD,KAAK,SAAS,CAAC,OAAO,CAAC,CAAC;oBACtB,OAAO,KAAK,CAAC;iBACd;gBACD,OAAO,CAAC,CAAC;oBACP,OAAO,KAAK,CAAC;iBACd;aACF;QACH,CAAC;;;OAAA;IACD,sBAAI,mCAAU;aAAd;YACE,OAAO,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;;;OAAA;IACM,gCAAU,GAAjB,UAAkB,OAAgB;QAChC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IACM,kCAAY,GAAnB,UAAoB,SAAoB;QACtC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IACH,kBAAC;AAAD,CAAC,AA7BD,IA6BC;AA7BqB,kCAAW;AA+BjC,cAAc;AACD,QAAA,MAAM,GAAG,mBAAmB,CAAC;AAE1C,cAAc;AACD,QAAA,aAAa,GAAG,GAAG,CAAC","sourcesContent":["/**\n * ## About this package\n *\n * `@harmony-js/util` provides utility functions for Harmony dapps and other `harmony-js` packages\n *\n * Develop can use this package to:\n * - Transform the unit of token (fromWei, toWei...)\n * - Convert variable to different type (hexToBN, numberToHex...)\n * - Check validators information (isAddress, isPublicKey, isBlockNumber...)\n *\n * ## How to use this package\n *\n * ### Step 1: create a Harmony Instance\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n * const { BN } = require('@harmony-js/crypto');\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *     chainType: ChainType.Harmony,\n *     chainId: ChainID.HmyLocal,\n *   },\n * );\n * ```\n *\n * ### Step 2: Select and call functions\n * Here are some examples:\n *\n * ```javascript\n * // numberToString\n * const num = 123;\n * const str = hmy.utils.numberToString(num)\n * console.log(str);\n *\n * // add0xToString\n * const str = '12345';\n * const expected = hmy.utils.add0xToString(str)\n * console.log(expected);\n *\n * // fromWei\n * const Wei = new BN('1000000000000000000');\n * const expected = hmy.utils.fromWei(Wei, hmy.utils.Units.one);\n * console.log(expected);\n *\n * // toWei\n * const one = new BN('1');\n * const expected = hmy.utils.toWei(one, hmy.utils.Units.one);\n * const num = hmy.utils.numToStr(expected);\n * console.log(num);\n * ```\n *\n * ### Step 3: Using unit class to convet the token unit\n * ```javascript\n * // convert one to Gwei\n * const one = new hmy.utils.Unit('1').asOne();\n * const oneToGwei = one.toGwei();\n * console.log(oneToGwei);\n * ```\n *\n * ## Some Important consts and Enums\n * ### Chain Type\n * ```javascript\n * Harmony = 'hmy',\n * Ethereum = 'eth',\n * ```\n *\n * ### Chain ID\n * ```javascript\n * Default = 0,\n  EthMainnet = 1,\n  Morden = 2,\n  Ropsten = 3,\n  Rinkeby = 4,\n  RootstockMainnet = 30,\n  RootstockTestnet = 31,\n  Kovan = 42,\n  EtcMainnet = 61,\n  EtcTestnet = 62,\n  Geth = 1337,\n  Ganache = 0,\n  HmyMainnet = 1,\n  HmyTestnet = 2,\n  HmyLocal = 2,\n  HmyPangaea = 3,\n * ```\n *\n * ### Default Config\n * ```javascript\n * export const defaultConfig = {\n *   Default: {\n *     Chain_ID: ChainID.HmyLocal,\n *     Chain_Type: ChainType.Harmony,\n *     Chain_URL: 'http://localhost:9500',\n *     Network_ID: 'Local',\n * },\n *   DefaultWS: {\n *     Chain_ID: ChainID.HmyLocal,\n *     Chain_Type: ChainType.Harmony,\n *     Chain_URL: 'ws://localhost:9800',\n *     Network_ID: 'LocalWS',\n *   },\n * };\n * ```\n *\n * ### Unit Map\n * ```\n * [Units.wei, '1'], // 1 wei\n * [Units.Kwei, '1000'], // 1e3 wei\n * [Units.Mwei, '1000000'], // 1e6 wei\n * [Units.Gwei, '1000000000'], // 1e9 wei\n * [Units.szabo, '1000000000000'], // 1e12 wei\n * [Units.finney, '1000000000000000'], // 1e15 wei\n * [Units.ether, '1000000000000000000'], // 1e18 wei\n * [Units.one, '1000000000000000000'], // 1e18 wei\n * [Units.Kether, '1000000000000000000000'], // 1e21 wei\n * [Units.Mether, '1000000000000000000000000'], // 1e24 wei\n * [Units.Gether, '1000000000000000000000000000'], // 1e27 wei\n * [Units.Tether, '1000000000000000000000000000000'], // 1e30 wei\n * ```\n *\n * @packageDocumentation\n * @module harmony-utils\n */\n\nexport enum ChainType {\n  Harmony = 'hmy',\n  Ethereum = 'eth',\n}\n\nexport enum ChainID {\n  Default = 0,\n  EthMainnet = 1,\n  Morden = 2,\n  Ropsten = 3,\n  Rinkeby = 4,\n  RootstockMainnet = 30,\n  RootstockTestnet = 31,\n  Kovan = 42,\n  EtcMainnet = 61,\n  EtcTestnet = 62,\n  Geth = 1337,\n  Ganache = 0,\n  HmyMainnet = 1,\n  HmyTestnet = 2,\n  HmyLocal = 2,\n  HmyPangaea = 3,\n}\n\n/** @hidden */\nexport const defaultConfig = {\n  Default: {\n    Chain_ID: ChainID.HmyLocal,\n    Chain_Type: ChainType.Harmony,\n    Chain_URL: 'http://localhost:9500',\n    Network_ID: 'Local',\n  },\n  DefaultWS: {\n    Chain_ID: ChainID.HmyLocal,\n    Chain_Type: ChainType.Harmony,\n    Chain_URL: 'ws://localhost:9800',\n    Network_ID: 'LocalWS',\n  },\n};\n\n/** @hidden */\nexport abstract class HarmonyCore {\n  chainType: ChainType;\n  chainId: ChainID;\n  constructor(chainType: ChainType, chainId: ChainID = defaultConfig.Default.Chain_ID) {\n    this.chainType = chainType;\n    this.chainId = chainId;\n  }\n  get chainPrefix(): string {\n    switch (this.chainType) {\n      case ChainType.Ethereum: {\n        return 'eth';\n      }\n      case ChainType.Harmony: {\n        return 'hmy';\n      }\n      default: {\n        return 'hmy';\n      }\n    }\n  }\n  get getChainId(): ChainID {\n    return this.chainId;\n  }\n  public setChainId(chainId: ChainID) {\n    this.chainId = chainId;\n  }\n  public setChainType(chainType: ChainType) {\n    this.chainType = chainType;\n  }\n}\n\n/** @hidden */\nexport const HDPath = `m/44'/1023'/0'/0/`;\n\n/** @hidden */\nexport const AddressSuffix = '-';\n"]}},"error":null,"hash":"c3b7734465da740693fad30730673462","cacheData":{"env":{}}}
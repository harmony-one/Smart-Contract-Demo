{"id":"../node_modules/@harmony-js/network/dist/tracker/pollingTracker.js","dependencies":[{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/tracker/pollingTracker.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/src/tracker/pollingTracker.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":9,"column":22},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/tracker/pollingTracker.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"./baseTracker","loc":{"line":10,"column":28},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/tracker/pollingTracker.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/tracker/baseTracker.js"},{"name":"../rpcMethod/rpc","loc":{"line":11,"column":20},"parent":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/tracker/pollingTracker.js","resolved":"/home/rachit/Projects/demo/web/node_modules/@harmony-js/network/dist/rpcMethod/rpc.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-network\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PollingBlockTracker = exports.timeout = void 0;\nvar tslib_1 = require(\"tslib\");\nvar baseTracker_1 = require(\"./baseTracker\");\nvar rpc_1 = require(\"../rpcMethod/rpc\");\nvar sec = 1000;\nfunction timeout(duration, unref) {\n    return new Promise(function (resolve) {\n        var timoutRef = setTimeout(resolve, duration);\n        // don't keep process open\n        if (timoutRef.unref && unref) {\n            timoutRef.unref();\n        }\n    });\n}\nexports.timeout = timeout;\nvar PollingBlockTracker = /** @class */ (function (_super) {\n    tslib_1.__extends(PollingBlockTracker, _super);\n    function PollingBlockTracker(messenger, opts) {\n        if (opts === void 0) { opts = {\n            pollingInterval: undefined,\n            retryTimeout: undefined,\n            keepEventLoopActive: false,\n            setSkipCacheFlag: false,\n        }; }\n        var _this = this;\n        // parse + validate args\n        if (!messenger) {\n            throw new Error('PollingBlockTracker - no provider specified.');\n        }\n        var pollingInterval = opts.pollingInterval || 20 * sec;\n        var retryTimeout = opts.retryTimeout || pollingInterval / 10;\n        var keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;\n        var setSkipCacheFlag = opts.setSkipCacheFlag || false;\n        // BaseBlockTracker constructor\n        _this = _super.call(this, {\n            blockResetDuration: pollingInterval,\n            retryTimeout: retryTimeout,\n            keepEventLoopActive: keepEventLoopActive,\n            setSkipCacheFlag: setSkipCacheFlag,\n        }) || this;\n        // config\n        _this.messenger = messenger;\n        _this._pollingInterval = pollingInterval;\n        _this._retryTimeout = retryTimeout;\n        _this._keepEventLoopActive = keepEventLoopActive;\n        _this._setSkipCacheFlag = setSkipCacheFlag;\n        return _this;\n    }\n    //\n    // public\n    //\n    // trigger block polling\n    PollingBlockTracker.prototype.checkForLatestBlock = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._updateLatestBlock()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.getLatestBlock()];\n                    case 2:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    //\n    // private\n    //\n    PollingBlockTracker.prototype._start = function () {\n        var _this = this;\n        this._performSync().catch(function (err) { return _this.emit('error', err); });\n    };\n    PollingBlockTracker.prototype._performSync = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var err_1, newErr;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._isRunning) return [3 /*break*/, 7];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 6]);\n                        return [4 /*yield*/, this._updateLatestBlock()];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, timeout(this._pollingInterval, !this._keepEventLoopActive)];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 4:\n                        err_1 = _a.sent();\n                        newErr = new Error(\"PollingBlockTracker - encountered an error while attempting to update latest block:\\n\" + err_1.stack);\n                        try {\n                            this.emit('error', newErr);\n                        }\n                        catch (emitErr) {\n                            console.error(newErr);\n                        }\n                        return [4 /*yield*/, timeout(this._retryTimeout, !this._keepEventLoopActive)];\n                    case 5:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 6: return [3 /*break*/, 0];\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PollingBlockTracker.prototype._updateLatestBlock = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var latestBlock;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._fetchLatestBlock()];\n                    case 1:\n                        latestBlock = _a.sent();\n                        this._newPotentialLatest(latestBlock);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PollingBlockTracker.prototype._fetchLatestBlock = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result, error_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.messenger.send(rpc_1.RPCMethod.BlockNumber, [])];\n                    case 1:\n                        result = _a.sent();\n                        if (result.isError()) {\n                            throw result.message;\n                        }\n                        else if (result.isResult()) {\n                            return [2 /*return*/, result.result];\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_1 = _a.sent();\n                        throw error_1;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return PollingBlockTracker;\n}(baseTracker_1.BaseBlockTracker));\nexports.PollingBlockTracker = PollingBlockTracker;\n"},"sourceMaps":{"js":{"version":3,"file":"pollingTracker.js","sourceRoot":"","sources":["../../src/tracker/pollingTracker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-network\n * @hidden\n */\n\nimport { BaseBlockTracker } from './baseTracker';\nimport { Messenger } from '../messenger/messenger';\nimport { RPCMethod } from '../rpcMethod/rpc';\n\nconst sec = 1000;\n\nexport function timeout(duration: number, unref: any) {\n  return new Promise((resolve) => {\n    const timoutRef: any = setTimeout(resolve, duration);\n    // don't keep process open\n    if (timoutRef.unref && unref) {\n      timoutRef.unref();\n    }\n  });\n}\nexport class PollingBlockTracker extends BaseBlockTracker {\n  messenger: Messenger;\n  // tslint:disable-next-line: variable-name\n  _pollingInterval: number;\n  // tslint:disable-next-line: variable-name\n  _retryTimeout: number;\n  // tslint:disable-next-line: variable-name\n  _keepEventLoopActive: boolean;\n  // tslint:disable-next-line: variable-name\n  _setSkipCacheFlag: boolean;\n  constructor(\n    messenger: Messenger,\n    opts = {\n      pollingInterval: undefined,\n      retryTimeout: undefined,\n      keepEventLoopActive: false,\n      setSkipCacheFlag: false,\n    },\n  ) {\n    // parse + validate args\n    if (!messenger) {\n      throw new Error('PollingBlockTracker - no provider specified.');\n    }\n\n    const pollingInterval: number = opts.pollingInterval || 20 * sec;\n    const retryTimeout: number = opts.retryTimeout || pollingInterval / 10;\n    const keepEventLoopActive: boolean =\n      opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;\n    const setSkipCacheFlag = opts.setSkipCacheFlag || false;\n    // BaseBlockTracker constructor\n    super({\n      blockResetDuration: pollingInterval,\n      retryTimeout,\n      keepEventLoopActive,\n      setSkipCacheFlag,\n    });\n    // config\n    this.messenger = messenger;\n    this._pollingInterval = pollingInterval;\n    this._retryTimeout = retryTimeout;\n    this._keepEventLoopActive = keepEventLoopActive;\n    this._setSkipCacheFlag = setSkipCacheFlag;\n  }\n\n  //\n  // public\n  //\n\n  // trigger block polling\n  async checkForLatestBlock() {\n    await this._updateLatestBlock();\n    const result = await this.getLatestBlock();\n    return result;\n  }\n\n  //\n  // private\n  //\n\n  _start() {\n    this._performSync().catch((err) => this.emit('error', err));\n  }\n\n  async _performSync() {\n    while (this._isRunning) {\n      try {\n        await this._updateLatestBlock();\n        await timeout(this._pollingInterval, !this._keepEventLoopActive);\n      } catch (err) {\n        const newErr = new Error(\n          `PollingBlockTracker - encountered an error while attempting to update latest block:\\n${err.stack}`,\n        );\n        try {\n          this.emit('error', newErr);\n        } catch (emitErr) {\n          console.error(newErr);\n        }\n        await timeout(this._retryTimeout, !this._keepEventLoopActive);\n      }\n    }\n  }\n\n  async _updateLatestBlock() {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock();\n    this._newPotentialLatest(latestBlock);\n  }\n\n  async _fetchLatestBlock() {\n    try {\n      const result = await this.messenger.send(RPCMethod.BlockNumber, []);\n      if (result.isError()) {\n        throw result.message;\n      } else if (result.isResult()) {\n        return result.result;\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n"]}},"error":null,"hash":"0d52e2cc2378f7075ce4b327c27faf10","cacheData":{"env":{}}}
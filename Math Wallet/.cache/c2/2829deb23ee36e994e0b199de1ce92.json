{"id":"../node_modules/@harmony-js/transaction/dist/utils.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/utils.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/src/utils.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":9,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/utils.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"@harmony-js/utils","loc":{"line":10,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/utils.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/utils/dist/index.js"},{"name":"@harmony-js/crypto","loc":{"line":11,"column":23},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/utils.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/crypto/dist/index.js"},{"name":"@harmony-js/network","loc":{"line":12,"column":24},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/utils.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/index.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-transaction\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RLPSign = exports.defaultMessenger = exports.TransactionEvents = exports.sleep = exports.recoverETH = exports.recover = exports.handleAddress = exports.handleNumber = exports.transactionFieldsETH = exports.transactionFields = void 0;\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar network_1 = require(\"@harmony-js/network\");\nexports.transactionFields = [\n    { name: 'nonce', length: 32, fix: false },\n    { name: 'gasPrice', length: 32, fix: false, transform: 'hex' },\n    { name: 'gasLimit', length: 32, fix: false, transform: 'hex' },\n    { name: 'shardID', length: 16, fix: false },\n    // recover it after main repo fix\n    { name: 'toShardID', length: 16, fix: false },\n    { name: 'to', length: 20, fix: true },\n    { name: 'value', length: 32, fix: false, transform: 'hex' },\n    { name: 'data', fix: false },\n];\nexports.transactionFieldsETH = [\n    { name: 'nonce', length: 32, fix: false },\n    { name: 'gasPrice', length: 32, fix: false, transform: 'hex' },\n    { name: 'gasLimit', length: 32, fix: false, transform: 'hex' },\n    { name: 'to', length: 20, fix: true },\n    { name: 'value', length: 32, fix: false, transform: 'hex' },\n    { name: 'data', fix: false },\n];\nexports.handleNumber = function (value) {\n    if (utils_1.isHex(value) && value === '0x') {\n        return utils_1.hexToNumber('0x00');\n    }\n    else if (utils_1.isHex(value) && value !== '0x') {\n        return utils_1.hexToNumber(value);\n    }\n    else {\n        return value;\n    }\n};\nexports.handleAddress = function (value) {\n    if (value === '0x') {\n        return '0x';\n    }\n    else if (utils_1.isAddress(value)) {\n        return value;\n    }\n    else {\n        return '0x';\n    }\n};\nexports.recover = function (rawTransaction) {\n    var transaction = crypto_1.decode(rawTransaction);\n    if (transaction.length !== 11 && transaction.length !== 8) {\n        throw new Error('invalid rawTransaction');\n    }\n    var tx = {\n        id: '0x',\n        from: '0x',\n        rawTransaction: '0x',\n        unsignedRawTransaction: '0x',\n        nonce: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[0]))).toNumber(),\n        gasPrice: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[1]))),\n        gasLimit: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[2]))),\n        shardID: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[3]))).toNumber(),\n        toShardID: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[4]))).toNumber(),\n        to: exports.handleAddress(transaction[5]) !== '0x'\n            ? crypto_1.getAddress(exports.handleAddress(transaction[5])).checksum\n            : '0x',\n        value: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[6]))),\n        data: transaction[7],\n        chainId: 0,\n        signature: {\n            r: '',\n            s: '',\n            recoveryParam: 0,\n            v: 0,\n        },\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 8) {\n        tx.unsignedRawTransaction = rawTransaction;\n        return tx;\n    }\n    try {\n        tx.signature.v = new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[8]))).toNumber();\n    }\n    catch (error) {\n        throw error;\n    }\n    tx.signature.r = crypto_1.hexZeroPad(transaction[9], 32);\n    tx.signature.s = crypto_1.hexZeroPad(transaction[10], 32);\n    if (new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.r))).isZero() &&\n        new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.s))).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.signature.v;\n        tx.signature.v = 0;\n    }\n    else {\n        // Signed Tranasaction\n        tx.chainId = Math.floor((tx.signature.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        var recoveryParam = tx.signature.v - 27;\n        var raw = transaction.slice(0, 8);\n        if (tx.chainId !== 0) {\n            raw.push(crypto_1.hexlify(tx.chainId));\n            raw.push('0x');\n            raw.push('0x');\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        var digest = crypto_1.keccak256(crypto_1.encode(raw));\n        try {\n            var recoveredFrom = crypto_1.recoverAddress(digest, {\n                r: crypto_1.hexlify(tx.signature.r),\n                s: crypto_1.hexlify(tx.signature.s),\n                recoveryParam: recoveryParam,\n            });\n            tx.from = recoveredFrom === '0x' ? '0x' : crypto_1.getAddress(recoveredFrom).checksum;\n        }\n        catch (error) {\n            throw error;\n        }\n        tx.rawTransaction = rawTransaction;\n        tx.id = crypto_1.keccak256(rawTransaction);\n    }\n    return tx;\n};\nexports.recoverETH = function (rawTransaction) {\n    var transaction = crypto_1.decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        throw new Error('invalid rawTransaction');\n    }\n    var tx = {\n        id: '0x',\n        from: '0x',\n        rawTransaction: '0x',\n        unsignedRawTransaction: '0x',\n        nonce: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[0]))).toNumber(),\n        gasPrice: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[1]))),\n        gasLimit: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[2]))),\n        shardID: 0,\n        toShardID: 0,\n        to: exports.handleAddress(transaction[3]) !== '0x'\n            ? crypto_1.getAddress(exports.handleAddress(transaction[3])).checksum\n            : '0x',\n        value: new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[4]))),\n        data: transaction[5],\n        chainId: 0,\n        signature: {\n            r: '',\n            s: '',\n            recoveryParam: 0,\n            v: 0,\n        },\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        tx.unsignedRawTransaction = rawTransaction;\n        return tx;\n    }\n    try {\n        tx.signature.v = new crypto_1.BN(utils_1.strip0x(exports.handleNumber(transaction[6]))).toNumber();\n    }\n    catch (error) {\n        throw error;\n    }\n    tx.signature.r = crypto_1.hexZeroPad(transaction[7], 32);\n    tx.signature.s = crypto_1.hexZeroPad(transaction[8], 32);\n    if (new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.r))).isZero() &&\n        new crypto_1.BN(utils_1.strip0x(exports.handleNumber(tx.signature.s))).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.signature.v;\n        tx.signature.v = 0;\n    }\n    else {\n        // Signed Tranasaction\n        tx.chainId = Math.floor((tx.signature.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        var recoveryParam = tx.signature.v - 27;\n        var raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push(crypto_1.hexlify(tx.chainId));\n            raw.push('0x');\n            raw.push('0x');\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        var digest = crypto_1.keccak256(crypto_1.encode(raw));\n        try {\n            var recoveredFrom = crypto_1.recoverAddress(digest, {\n                r: crypto_1.hexlify(tx.signature.r),\n                s: crypto_1.hexlify(tx.signature.s),\n                recoveryParam: recoveryParam,\n            });\n            tx.from = recoveredFrom === '0x' ? '0x' : crypto_1.getAddress(recoveredFrom).checksum;\n        }\n        catch (error) {\n            throw error;\n        }\n        tx.rawTransaction = rawTransaction;\n        tx.id = crypto_1.keccak256(rawTransaction);\n    }\n    return tx;\n};\nexports.sleep = function (ms) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve) {\n                setTimeout(function () { return resolve(); }, ms);\n            })];\n    });\n}); };\nvar TransactionEvents;\n(function (TransactionEvents) {\n    TransactionEvents[\"transactionHash\"] = \"transactionHash\";\n    TransactionEvents[\"error\"] = \"error\";\n    TransactionEvents[\"confirmation\"] = \"confirmation\";\n    TransactionEvents[\"receipt\"] = \"receipt\";\n    TransactionEvents[\"track\"] = \"track\";\n    TransactionEvents[\"cxConfirmation\"] = \"cxConfirmation\";\n    TransactionEvents[\"cxReceipt\"] = \"cxReceipt\";\n    TransactionEvents[\"cxTrack\"] = \"cxTrack\";\n})(TransactionEvents = exports.TransactionEvents || (exports.TransactionEvents = {}));\nexports.defaultMessenger = new network_1.Messenger(new network_1.HttpProvider('http://localhost:9500'), utils_1.ChainType.Harmony);\nexports.RLPSign = function (transaction, prv) {\n    var _a = tslib_1.__read(transaction.getRLPUnsigned(), 2), unsignedRawTransaction = _a[0], raw = _a[1];\n    var regroup = tslib_1.__assign(tslib_1.__assign({}, transaction.txParams), { unsignedRawTransaction: unsignedRawTransaction });\n    transaction.setParams(regroup);\n    var signature = crypto_1.sign(crypto_1.keccak256(unsignedRawTransaction), prv);\n    var signed = transaction.getRLPSigned(raw, signature);\n    return [signature, signed];\n};\n"},"sourceMaps":{"js":{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-transaction\n * @hidden\n */\n\nimport { hexToNumber, isHex, isAddress, strip0x, ChainType } from '@harmony-js/utils';\nimport {\n  decode,\n  encode,\n  keccak256,\n  hexlify,\n  BN,\n  hexZeroPad,\n  recoverAddress,\n  Signature,\n  getAddress,\n  sign,\n} from '@harmony-js/crypto';\nimport { HttpProvider, Messenger } from '@harmony-js/network';\nimport { TxParams } from './types';\nimport { Transaction } from './transaction';\n\nexport const transactionFields = [\n  { name: 'nonce', length: 32, fix: false },\n  { name: 'gasPrice', length: 32, fix: false, transform: 'hex' },\n  { name: 'gasLimit', length: 32, fix: false, transform: 'hex' },\n  { name: 'shardID', length: 16, fix: false },\n  // recover it after main repo fix\n  { name: 'toShardID', length: 16, fix: false },\n  { name: 'to', length: 20, fix: true },\n  { name: 'value', length: 32, fix: false, transform: 'hex' },\n  { name: 'data', fix: false },\n];\n\nexport const transactionFieldsETH = [\n  { name: 'nonce', length: 32, fix: false },\n  { name: 'gasPrice', length: 32, fix: false, transform: 'hex' },\n  { name: 'gasLimit', length: 32, fix: false, transform: 'hex' },\n  { name: 'to', length: 20, fix: true },\n  { name: 'value', length: 32, fix: false, transform: 'hex' },\n  { name: 'data', fix: false },\n];\n\nexport const handleNumber = (value: string) => {\n  if (isHex(value) && value === '0x') {\n    return hexToNumber('0x00');\n  } else if (isHex(value) && value !== '0x') {\n    return hexToNumber(value);\n  } else {\n    return value;\n  }\n};\n\nexport const handleAddress = (value: string): string => {\n  if (value === '0x') {\n    return '0x';\n  } else if (isAddress(value)) {\n    return value;\n  } else {\n    return '0x';\n  }\n};\n\nexport const recover = (rawTransaction: string) => {\n  const transaction = decode(rawTransaction);\n  if (transaction.length !== 11 && transaction.length !== 8) {\n    throw new Error('invalid rawTransaction');\n  }\n\n  const tx: TxParams = {\n    id: '0x',\n    from: '0x',\n    rawTransaction: '0x',\n    unsignedRawTransaction: '0x',\n    nonce: new BN(strip0x(handleNumber(transaction[0]))).toNumber(),\n    gasPrice: new BN(strip0x(handleNumber(transaction[1]))),\n    gasLimit: new BN(strip0x(handleNumber(transaction[2]))),\n    shardID: new BN(strip0x(handleNumber(transaction[3]))).toNumber(),\n    toShardID: new BN(strip0x(handleNumber(transaction[4]))).toNumber(),\n    to:\n      handleAddress(transaction[5]) !== '0x'\n        ? getAddress(handleAddress(transaction[5])).checksum\n        : '0x',\n    value: new BN(strip0x(handleNumber(transaction[6]))),\n    data: transaction[7],\n    chainId: 0,\n    signature: {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0,\n    },\n  };\n\n  // Legacy unsigned transaction\n  if (transaction.length === 8) {\n    tx.unsignedRawTransaction = rawTransaction;\n    return tx;\n  }\n\n  try {\n    tx.signature.v = new BN(strip0x(handleNumber(transaction[8]))).toNumber();\n  } catch (error) {\n    throw error;\n  }\n\n  tx.signature.r = hexZeroPad(transaction[9], 32);\n  tx.signature.s = hexZeroPad(transaction[10], 32);\n\n  if (\n    new BN(strip0x(handleNumber(tx.signature.r))).isZero() &&\n    new BN(strip0x(handleNumber(tx.signature.s))).isZero()\n  ) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.signature.v;\n    tx.signature.v = 0;\n  } else {\n    // Signed Tranasaction\n\n    tx.chainId = Math.floor((tx.signature.v - 35) / 2);\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    let recoveryParam = tx.signature.v - 27;\n\n    const raw = transaction.slice(0, 8);\n\n    if (tx.chainId !== 0) {\n      raw.push(hexlify(tx.chainId));\n      raw.push('0x');\n      raw.push('0x');\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    const digest = keccak256(encode(raw));\n    try {\n      const recoveredFrom = recoverAddress(digest, {\n        r: hexlify(tx.signature.r),\n        s: hexlify(tx.signature.s),\n        recoveryParam,\n      });\n      tx.from = recoveredFrom === '0x' ? '0x' : getAddress(recoveredFrom).checksum;\n    } catch (error) {\n      throw error;\n    }\n    tx.rawTransaction = rawTransaction;\n    tx.id = keccak256(rawTransaction);\n  }\n\n  return tx;\n};\n\nexport const recoverETH = (rawTransaction: string) => {\n  const transaction = decode(rawTransaction);\n  if (transaction.length !== 9 && transaction.length !== 6) {\n    throw new Error('invalid rawTransaction');\n  }\n\n  const tx: TxParams = {\n    id: '0x',\n    from: '0x',\n    rawTransaction: '0x',\n    unsignedRawTransaction: '0x',\n    nonce: new BN(strip0x(handleNumber(transaction[0]))).toNumber(),\n    gasPrice: new BN(strip0x(handleNumber(transaction[1]))),\n    gasLimit: new BN(strip0x(handleNumber(transaction[2]))),\n    shardID: 0,\n    toShardID: 0,\n\n    to:\n      handleAddress(transaction[3]) !== '0x'\n        ? getAddress(handleAddress(transaction[3])).checksum\n        : '0x',\n    value: new BN(strip0x(handleNumber(transaction[4]))),\n    data: transaction[5],\n    chainId: 0,\n    signature: {\n      r: '',\n      s: '',\n      recoveryParam: 0,\n      v: 0,\n    },\n  };\n\n  // Legacy unsigned transaction\n  if (transaction.length === 6) {\n    tx.unsignedRawTransaction = rawTransaction;\n    return tx;\n  }\n\n  try {\n    tx.signature.v = new BN(strip0x(handleNumber(transaction[6]))).toNumber();\n  } catch (error) {\n    throw error;\n  }\n\n  tx.signature.r = hexZeroPad(transaction[7], 32);\n  tx.signature.s = hexZeroPad(transaction[8], 32);\n\n  if (\n    new BN(strip0x(handleNumber(tx.signature.r))).isZero() &&\n    new BN(strip0x(handleNumber(tx.signature.s))).isZero()\n  ) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.signature.v;\n    tx.signature.v = 0;\n  } else {\n    // Signed Tranasaction\n\n    tx.chainId = Math.floor((tx.signature.v - 35) / 2);\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    let recoveryParam = tx.signature.v - 27;\n\n    const raw = transaction.slice(0, 6);\n\n    if (tx.chainId !== 0) {\n      raw.push(hexlify(tx.chainId));\n      raw.push('0x');\n      raw.push('0x');\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    const digest = keccak256(encode(raw));\n    try {\n      const recoveredFrom = recoverAddress(digest, {\n        r: hexlify(tx.signature.r),\n        s: hexlify(tx.signature.s),\n        recoveryParam,\n      });\n      tx.from = recoveredFrom === '0x' ? '0x' : getAddress(recoveredFrom).checksum;\n    } catch (error) {\n      throw error;\n    }\n    tx.rawTransaction = rawTransaction;\n    tx.id = keccak256(rawTransaction);\n  }\n\n  return tx;\n};\n\nexport const sleep = async (ms: number) =>\n  new Promise((resolve) => {\n    setTimeout(() => resolve(), ms);\n  });\n\nexport enum TransactionEvents {\n  transactionHash = 'transactionHash',\n  error = 'error',\n  confirmation = 'confirmation',\n  receipt = 'receipt',\n  track = 'track',\n  cxConfirmation = 'cxConfirmation',\n  cxReceipt = 'cxReceipt',\n  cxTrack = 'cxTrack',\n}\n\nexport const defaultMessenger = new Messenger(\n  new HttpProvider('http://localhost:9500'),\n  ChainType.Harmony,\n);\n\nexport const RLPSign = (transaction: Transaction, prv: string): [Signature, string] => {\n  const [unsignedRawTransaction, raw] = transaction.getRLPUnsigned();\n  const regroup: TxParams = {\n    ...transaction.txParams,\n    unsignedRawTransaction,\n  };\n  transaction.setParams(regroup);\n  const signature = sign(keccak256(unsignedRawTransaction), prv);\n  const signed = transaction.getRLPSigned(raw, signature);\n  return [signature, signed];\n};\n"]}},"error":null,"hash":"e9fad01bf705d3e31242b4d71f266705","cacheData":{"env":{}}}
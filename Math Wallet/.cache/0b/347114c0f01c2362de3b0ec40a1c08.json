{"id":"../node_modules/@harmony-js/account/dist/hdnode.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/account/dist/hdnode.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/account/src/hdnode.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/account/package.json","includedInParent":true,"mtime":1605232158322},{"name":"tslib","loc":{"line":8,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/account/dist/hdnode.js","resolved":"/home/rachit/Projects/demo/node_modules/tslib/tslib.es6.js"},{"name":"@harmony-js/crypto","loc":{"line":9,"column":23},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/account/dist/hdnode.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/crypto/dist/index.js"},{"name":"@harmony-js/utils","loc":{"line":10,"column":22},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/account/dist/hdnode.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/utils/dist/index.js"},{"name":"@harmony-js/network","loc":{"line":11,"column":24},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/account/dist/hdnode.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/network/dist/index.js"},{"name":"@harmony-js/transaction","loc":{"line":12,"column":28},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/account/dist/hdnode.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/transaction/dist/index.js"},{"name":"./account","loc":{"line":13,"column":24},"parent":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/account/dist/hdnode.js","resolved":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/account/dist/account.js"}],"generated":{"js":"\"use strict\";\n/**\n * @packageDocumentation\n * @module harmony-account\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HDNode = void 0;\nvar tslib_1 = require(\"tslib\");\nvar crypto_1 = require(\"@harmony-js/crypto\");\nvar utils_1 = require(\"@harmony-js/utils\");\nvar network_1 = require(\"@harmony-js/network\");\nvar transaction_1 = require(\"@harmony-js/transaction\");\nvar account_1 = require(\"./account\");\nvar HDNode = /** @class */ (function () {\n    function HDNode(provider, menmonic, index, addressCount, shardID, chainType, chainId, gasLimit, gasPrice) {\n        if (provider === void 0) { provider = 'http://localhost:9500'; }\n        if (index === void 0) { index = 0; }\n        if (addressCount === void 0) { addressCount = 1; }\n        if (shardID === void 0) { shardID = 0; }\n        if (chainType === void 0) { chainType = utils_1.ChainType.Harmony; }\n        if (chainId === void 0) { chainId = utils_1.ChainID.Default; }\n        if (gasLimit === void 0) { gasLimit = '1000000'; }\n        if (gasPrice === void 0) { gasPrice = '2000000000'; }\n        this.provider = this.setProvider(provider);\n        this.shardID = shardID;\n        this.messenger = new network_1.Messenger(this.provider, chainType, chainId);\n        this.messenger.setDefaultShardID(this.shardID);\n        this.hdwallet = undefined;\n        this.addresses = [];\n        this.wallets = {};\n        this.path = chainType === utils_1.ChainType.Harmony ? utils_1.HDPath : \"m/44'/60'/0'/0/\";\n        this.index = index;\n        this.addressCount = addressCount;\n        this.getHdWallet(menmonic || HDNode.generateMnemonic());\n        this.gasLimit = gasLimit;\n        this.gasPrice = gasPrice;\n    }\n    HDNode.isValidMnemonic = function (phrase) {\n        if (phrase.trim().split(/\\s+/g).length < 12) {\n            return false;\n        }\n        return crypto_1.bip39.validateMnemonic(phrase);\n    };\n    HDNode.generateMnemonic = function () {\n        return crypto_1.bip39.generateMnemonic();\n    };\n    HDNode.prototype.normalizePrivateKeys = function (mnemonic) {\n        if (Array.isArray(mnemonic)) {\n            return mnemonic;\n        }\n        else if (mnemonic && !mnemonic.includes(' ')) {\n            return [mnemonic];\n        }\n        else {\n            return false;\n        }\n    };\n    HDNode.prototype.setProvider = function (provider) {\n        if (utils_1.isHttp(provider) && typeof provider === 'string') {\n            return new network_1.HttpProvider(provider);\n        }\n        else if (provider instanceof network_1.HttpProvider) {\n            return provider;\n        }\n        else if (utils_1.isWs(provider) && typeof provider === 'string') {\n            return new network_1.WSProvider(provider);\n        }\n        else if (provider instanceof network_1.WSProvider) {\n            return provider;\n        }\n        else {\n            throw new Error('provider is not recognized');\n        }\n    };\n    HDNode.prototype.getHdWallet = function (mnemonic) {\n        if (!HDNode.isValidMnemonic(mnemonic)) {\n            throw new Error('Mnemonic invalid or undefined');\n        }\n        this.hdwallet = crypto_1.hdkey.fromMasterSeed(crypto_1.bip39.mnemonicToSeed(mnemonic));\n        for (var i = this.index; i < this.index + this.addressCount; i++) {\n            if (!this.hdwallet) {\n                throw new Error('hdwallet is not found');\n            }\n            var childKey = this.hdwallet.derive(\"\" + this.path + i);\n            var prv = childKey.privateKey.toString('hex');\n            var account = new account_1.Account(prv);\n            var addr = account.checksumAddress;\n            this.addresses.push(addr);\n            this.wallets[addr] = account;\n        }\n    };\n    // tslint:disable-next-line: ban-types\n    HDNode.prototype.getAccounts = function (cb) {\n        if (cb) {\n            cb(null, this.addresses);\n        }\n        return this.addresses;\n    };\n    // tslint:disable-next-line: ban-types\n    HDNode.prototype.getPrivateKey = function (address, cb) {\n        if (!cb) {\n            if (!this.wallets[address]) {\n                throw new Error('Account not found');\n            }\n            else {\n                return this.wallets[address].privateKey;\n            }\n        }\n        if (!this.wallets[address]) {\n            return cb('Account not found');\n        }\n        else {\n            cb(null, this.wallets[address].privateKey);\n        }\n    };\n    // tslint:disable-next-line: ban-types\n    HDNode.prototype.signTransaction = function (txParams) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var from, accountNonce, to, gasLimit, gasPrice, value, nonce, data, prv, signerAccount, tx, signed;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        from = txParams.from ? crypto_1.getAddress(txParams.from).checksum : '0x';\n                        return [4 /*yield*/, this.messenger.send('hmy_getTransactionCount', [from, 'latest'], 'hmy', this.shardID)];\n                    case 1:\n                        accountNonce = _a.sent();\n                        to = txParams.to ? crypto_1.getAddress(txParams.to).checksum : '0x';\n                        gasLimit = new utils_1.Unit('0').asWei().toWei();\n                        if (txParams.gas !== undefined && utils_1.isHex(txParams.gas)) {\n                            gasLimit = new utils_1.Unit(txParams.gas)\n                                .asWei()\n                                .toWei()\n                                .lt(new utils_1.Unit(this.gasLimit).asWei().toWei())\n                                ? new utils_1.Unit(txParams.gas).asWei().toWei()\n                                : new utils_1.Unit(this.gasLimit).asWei().toWei();\n                        }\n                        if (txParams.gasLimit !== undefined && utils_1.isHex(txParams.gasLimit)) {\n                            gasLimit = new utils_1.Unit(txParams.gasLimit)\n                                .asWei()\n                                .toWei()\n                                .lt(new utils_1.Unit(this.gasLimit).asWei().toWei())\n                                ? new utils_1.Unit(txParams.gasLimit).asWei().toWei()\n                                : new utils_1.Unit(this.gasLimit).asWei().toWei();\n                        }\n                        gasPrice = new utils_1.Unit('0').asWei().toWei();\n                        if (txParams.gasPrice !== undefined && utils_1.isHex(txParams.gasPrice)) {\n                            gasPrice = new utils_1.Unit(txParams.gasPrice)\n                                .asWei()\n                                .toWei()\n                                .lt(new utils_1.Unit(this.gasPrice).asWei().toWei())\n                                ? new utils_1.Unit(txParams.gasPrice).asWei().toWei()\n                                : new utils_1.Unit(this.gasPrice).asWei().toWei();\n                        }\n                        value = txParams.value !== undefined && utils_1.isHex(txParams.value) ? txParams.value : '0';\n                        nonce = txParams.nonce !== undefined && utils_1.isHex(txParams.nonce)\n                            ? Number.parseInt(utils_1.hexToNumber(txParams.nonce), 10)\n                            : Number.parseInt(utils_1.hexToNumber(accountNonce.result), 10);\n                        data = txParams.data !== undefined && utils_1.isHex(txParams.data) ? txParams.data : '0x';\n                        prv = this.wallets[from].privateKey;\n                        signerAccount = new account_1.Account(prv, this.messenger);\n                        tx = new transaction_1.Transaction(tslib_1.__assign(tslib_1.__assign({}, txParams), { from: from,\n                            to: to,\n                            gasLimit: gasLimit,\n                            gasPrice: gasPrice,\n                            value: value,\n                            nonce: nonce,\n                            data: data, shardID: this.shardID, chainId: this.messenger.chainId }), this.messenger, transaction_1.TxStatus.INTIALIZED);\n                        return [4 /*yield*/, signerAccount.signTransaction(tx)];\n                    case 2:\n                        signed = _a.sent();\n                        return [2 /*return*/, signed.getRawTransaction()];\n                }\n            });\n        });\n    };\n    HDNode.prototype.getAddress = function (idx) {\n        if (!idx) {\n            return this.addresses[0];\n        }\n        else {\n            return this.addresses[idx];\n        }\n    };\n    HDNode.prototype.getAddresses = function () {\n        return this.addresses;\n    };\n    HDNode.prototype.addByPrivateKey = function (privateKey) {\n        var account = new account_1.Account(privateKey);\n        var addr = account.checksumAddress;\n        this.addresses.push(addr);\n        this.wallets[addr] = account;\n        return addr;\n    };\n    HDNode.prototype.setSigner = function (address) {\n        var foundIndex = this.addresses.findIndex(function (value) { return value === address; });\n        this.addresses.slice(foundIndex, foundIndex + 1);\n        this.addresses.unshift(address);\n    };\n    return HDNode;\n}());\nexports.HDNode = HDNode;\n"},"sourceMaps":{"js":{"version":3,"file":"hdnode.js","sourceRoot":"","sources":["../src/hdnode.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module harmony-account\n */\n\nimport { bip39, hdkey, getAddress, BN, Signature } from '@harmony-js/crypto';\nimport {\n  HDPath,\n  // defineReadOnly,\n  isHttp,\n  isWs,\n  ChainID,\n  ChainType,\n  Unit,\n  isHex,\n  hexToNumber,\n} from '@harmony-js/utils';\nimport { Messenger, HttpProvider, WSProvider } from '@harmony-js/network';\nimport { Transaction, TxStatus, TransasctionReceipt } from '@harmony-js/transaction';\nimport { Account } from './account';\n\n/** @hidden */\nexport interface WalletsInterfaces {\n  [key: string]: Account;\n}\n\n/** @hidden */\nexport interface Web3TxPrams {\n  id?: string;\n  from?: string;\n  to?: string;\n  nonce?: number | string;\n  gasLimit?: BN | number | string;\n  gasPrice?: BN | number | string;\n  shardID?: number | string;\n  toShardID?: number | string;\n  data?: string;\n  value?: BN;\n  chainId?: number;\n  rawTransaction?: string;\n  unsignedRawTransaction?: string;\n  signature?: Signature | string;\n  receipt?: TransasctionReceipt;\n}\n\nexport class HDNode {\n  static isValidMnemonic(phrase: string): boolean {\n    if (phrase.trim().split(/\\s+/g).length < 12) {\n      return false;\n    }\n    return bip39.validateMnemonic(phrase);\n  }\n\n  static generateMnemonic(): string {\n    return bip39.generateMnemonic();\n  }\n\n  public provider: HttpProvider | WSProvider;\n  public gasLimit: string;\n  public gasPrice: string;\n  public messenger: Messenger;\n\n  /** @hidden */\n  private shardID: number;\n  /** @hidden */\n  private hdwallet: hdkey | undefined;\n  /** @hidden */\n  private path: string;\n  /** @hidden */\n  private index: number;\n  /** @hidden */\n  private addressCount: number;\n  /** @hidden */\n  private addresses: string[];\n  /** @hidden */\n  private wallets: WalletsInterfaces;\n\n  constructor(\n    provider: string | HttpProvider | WSProvider = 'http://localhost:9500',\n    menmonic?: string,\n    index: number = 0,\n    addressCount: number = 1,\n    shardID: number = 0,\n    chainType: ChainType = ChainType.Harmony,\n    chainId: ChainID = ChainID.Default,\n    gasLimit = '1000000',\n    gasPrice = '2000000000',\n  ) {\n    this.provider = this.setProvider(provider);\n    this.shardID = shardID;\n    this.messenger = new Messenger(this.provider, chainType, chainId);\n    this.messenger.setDefaultShardID(this.shardID);\n    this.hdwallet = undefined;\n    this.addresses = [];\n    this.wallets = {};\n    this.path = chainType === ChainType.Harmony ? HDPath : `m/44'/60'/0'/0/`;\n    this.index = index;\n    this.addressCount = addressCount;\n    this.getHdWallet(menmonic || HDNode.generateMnemonic());\n    this.gasLimit = gasLimit;\n    this.gasPrice = gasPrice;\n  }\n\n  normalizePrivateKeys(mnemonic: string | string[]) {\n    if (Array.isArray(mnemonic)) {\n      return mnemonic;\n    } else if (mnemonic && !mnemonic.includes(' ')) {\n      return [mnemonic];\n    } else {\n      return false;\n    }\n  }\n\n  setProvider(provider: string | HttpProvider | WSProvider) {\n    if (isHttp(provider) && typeof provider === 'string') {\n      return new HttpProvider(provider);\n    } else if (provider instanceof HttpProvider) {\n      return provider;\n    } else if (isWs(provider) && typeof provider === 'string') {\n      return new WSProvider(provider);\n    } else if (provider instanceof WSProvider) {\n      return provider;\n    } else {\n      throw new Error('provider is not recognized');\n    }\n  }\n\n  getHdWallet(mnemonic: string) {\n    if (!HDNode.isValidMnemonic(mnemonic)) {\n      throw new Error('Mnemonic invalid or undefined');\n    }\n    this.hdwallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(mnemonic));\n\n    for (let i = this.index; i < this.index + this.addressCount; i++) {\n      if (!this.hdwallet) {\n        throw new Error('hdwallet is not found');\n      }\n      const childKey = this.hdwallet.derive(`${this.path}${i}`);\n      const prv = childKey.privateKey.toString('hex');\n      const account = new Account(prv);\n      const addr = account.checksumAddress;\n      this.addresses.push(addr);\n      this.wallets[addr] = account;\n    }\n  }\n\n  // tslint:disable-next-line: ban-types\n  getAccounts(cb?: Function) {\n    if (cb) {\n      cb(null, this.addresses);\n    }\n    return this.addresses;\n  }\n  // tslint:disable-next-line: ban-types\n  getPrivateKey(address: string, cb?: Function) {\n    if (!cb) {\n      if (!this.wallets[address]) {\n        throw new Error('Account not found');\n      } else {\n        return this.wallets[address].privateKey;\n      }\n    }\n    if (!this.wallets[address]) {\n      return cb('Account not found');\n    } else {\n      cb(null, this.wallets[address].privateKey);\n    }\n  }\n  // tslint:disable-next-line: ban-types\n  async signTransaction(txParams: any | Web3TxPrams) {\n    const from: string = txParams.from ? getAddress(txParams.from).checksum : '0x';\n    const accountNonce = await this.messenger.send(\n      'hmy_getTransactionCount',\n      [from, 'latest'],\n      'hmy',\n      this.shardID,\n    );\n\n    const to: string = txParams.to ? getAddress(txParams.to).checksum : '0x';\n\n    let gasLimit = new Unit('0').asWei().toWei();\n\n    if (txParams.gas !== undefined && isHex(txParams.gas)) {\n      gasLimit = new Unit(txParams.gas)\n        .asWei()\n        .toWei()\n        .lt(new Unit(this.gasLimit).asWei().toWei())\n        ? new Unit(txParams.gas).asWei().toWei()\n        : new Unit(this.gasLimit).asWei().toWei();\n    }\n    if (txParams.gasLimit !== undefined && isHex(txParams.gasLimit)) {\n      gasLimit = new Unit(txParams.gasLimit)\n        .asWei()\n        .toWei()\n        .lt(new Unit(this.gasLimit).asWei().toWei())\n        ? new Unit(txParams.gasLimit).asWei().toWei()\n        : new Unit(this.gasLimit).asWei().toWei();\n    }\n\n    let gasPrice = new Unit('0').asWei().toWei();\n    if (txParams.gasPrice !== undefined && isHex(txParams.gasPrice)) {\n      gasPrice = new Unit(txParams.gasPrice)\n        .asWei()\n        .toWei()\n        .lt(new Unit(this.gasPrice).asWei().toWei())\n        ? new Unit(txParams.gasPrice).asWei().toWei()\n        : new Unit(this.gasPrice).asWei().toWei();\n    }\n\n    const value = txParams.value !== undefined && isHex(txParams.value) ? txParams.value : '0';\n    const nonce =\n      txParams.nonce !== undefined && isHex(txParams.nonce)\n        ? Number.parseInt(hexToNumber(txParams.nonce), 10)\n        : Number.parseInt(hexToNumber(accountNonce.result), 10);\n    const data = txParams.data !== undefined && isHex(txParams.data) ? txParams.data : '0x';\n    const prv = this.wallets[from].privateKey;\n\n    const signerAccount = new Account(prv, this.messenger);\n\n    const tx = new Transaction(\n      {\n        ...txParams,\n        from,\n        to,\n        gasLimit,\n        gasPrice,\n        value,\n        nonce,\n        data,\n        shardID: this.shardID,\n        chainId: this.messenger.chainId,\n      },\n      this.messenger,\n      TxStatus.INTIALIZED,\n    );\n\n    const signed = await signerAccount.signTransaction(tx);\n\n    return signed.getRawTransaction();\n  }\n  getAddress(idx?: number) {\n    if (!idx) {\n      return this.addresses[0];\n    } else {\n      return this.addresses[idx];\n    }\n  }\n  getAddresses() {\n    return this.addresses;\n  }\n  addByPrivateKey(privateKey: string) {\n    const account = new Account(privateKey);\n    const addr = account.checksumAddress;\n    this.addresses.push(addr);\n    this.wallets[addr] = account;\n    return addr;\n  }\n\n  setSigner(address: string) {\n    const foundIndex = this.addresses.findIndex((value) => value === address);\n    this.addresses.slice(foundIndex, foundIndex + 1);\n    this.addresses.unshift(address);\n  }\n}\n"]}},"error":null,"hash":"f89e4ca3663a8eb5413450ee27ba4837","cacheData":{"env":{}}}
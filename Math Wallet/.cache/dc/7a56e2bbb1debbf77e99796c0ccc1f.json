{"id":"../node_modules/@harmony-js/crypto/dist/errors.js","dependencies":[{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/crypto/dist/errors.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/crypto/src/errors.ts","includedInParent":true,"mtime":499162500000},{"name":"/home/rachit/Projects/demo/web Math Wallet/package.json","includedInParent":true,"mtime":1605273881149},{"name":"/home/rachit/Projects/demo/web Math Wallet/node_modules/@harmony-js/crypto/package.json","includedInParent":true,"mtime":1605232158322}],"generated":{"js":"\"use strict\";\n/**\n * ## About this package\n *\n * `@harmony-js/crypot` provides a series of functions to deal with keys\n *\n * ## How to use this package\n *\n * ### Create a Harmony Instance\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *     chainType: ChainType.Harmony,\n *     chainId: ChainID.HmyLocal,\n *   },\n * );\n * ```\n *\n * ### Some examples\n *\n * ```javascript\n * // randomBytes\n * const bytes = hmy.crypto.randomBytes(20);\n * console.log(bytes)\n *\n * // encryptPhrase\n * const myPhrase = hmy.wallet.newMnemonic();\n * const pwd = '1234';\n * hmy.crypto.encryptPhrase(myPhrase, pwd).then((value) => {\n *   console.log(value);\n * })\n *\n * // decryptThePhrase\n * hmy.crypto.encryptPhrase(myPhrase, pwd).then((keystore) => {\n *   hmy.crypto.decryptPhrase(JSON.parse(keystore), pwd).then((value) => {\n *     console.log(value);\n *   })\n * })\n *\n * // generatePrivateKey\n * const privateKey = hmy.crypto.generatePrivateKey();\n * console.log(privateKey)\n *\n * // getPubkeyFromPrivateKey\n * const publicKey = hmy.crypto.getPubkeyFromPrivateKey(privateKey);\n * console.log(publicKey);\n *\n * // getAddressFromPrivateKey\n * const address = hmy.crypto.getAddressFromPrivateKey(privateKey);\n * console.log(address);\n *\n * // getAddressFromPublicKey\n * const address = hmy.crypto.getAddressFromPublicKey(publicKey);\n * console.log(address);\n *\n * // toChecksumAddress\n * const checksumAddr = hmy.crypto.toChecksumAddress(address);\n * console.log(checksumAddr);\n * ```\n *\n * @packageDocumentation\n * @module harmony-crypto\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.info = exports.warn = exports.setLogLevel = exports.checkNormalize = exports.setCensorship = exports.checkArgumentCount = exports.checkNew = exports.throwError = exports.UNSUPPORTED_OPERATION = exports.REPLACEMENT_UNDERPRICED = exports.NONCE_EXPIRED = exports.INSUFFICIENT_FUNDS = exports.NUMERIC_FAULT = exports.UNEXPECTED_ARGUMENT = exports.MISSING_ARGUMENT = exports.INVALID_ARGUMENT = exports.CALL_EXCEPTION = exports.MISSING_NEW = exports.NOT_IMPLEMENTED = exports.UNKNOWN_ERROR = void 0;\n// This file is ported from ether.js/src.ts/errors.ts\n// Unknown Error\n/** @hidden */\nexports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';\n// Not implemented\n/** @hidden */\nexports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';\n// Missing new operator to an object\n//  - name: The name of the class\n/** @hidden */\nexports.MISSING_NEW = 'MISSING_NEW';\n// Call exception\n//  - transaction: the transaction\n//  - address?: the contract address\n//  - args?: The arguments passed into the function\n//  - method?: The Solidity method signature\n//  - errorSignature?: The EIP848 error signature\n//  - errorArgs?: The EIP848 error parameters\n//  - reason: The reason (only for EIP848 \"Error(string)\")\n/** @hidden */\nexports.CALL_EXCEPTION = 'CALL_EXCEPTION';\n// Invalid argument (e.g. value is incompatible with type) to a function:\n//   - argument: The argument name that was invalid\n//   - value: The value of the argument\n/** @hidden */\nexports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';\n// Missing argument to a function:\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n/** @hidden */\nexports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';\n// Too many arguments\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n/** @hidden */\nexports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';\n// Numeric Fault\n//   - operation: the operation being executed\n//   - fault: the reason this faulted\n/** @hidden */\nexports.NUMERIC_FAULT = 'NUMERIC_FAULT';\n// Insufficien funds (< value + gasLimit * gasPrice)\n//   - transaction: the transaction attempted\n/** @hidden */\nexports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';\n// Nonce has already been used\n//   - transaction: the transaction attempted\n/** @hidden */\nexports.NONCE_EXPIRED = 'NONCE_EXPIRED';\n// The replacement fee for the transaction is too low\n//   - transaction: the transaction attempted\n/** @hidden */\nexports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED';\n// Unsupported operation\n//   - operation\n/** @hidden */\nexports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';\n// tslint:disable-next-line: variable-name\n/** @hidden */\nvar _permanentCensorErrors = false;\n// tslint:disable-next-line: variable-name\n/** @hidden */\nvar _censorErrors = false;\n// @TODO: Enum\n/** @hidden */\nfunction throwError(message, code, params) {\n    if (_censorErrors) {\n        throw new Error('unknown error');\n    }\n    if (!code) {\n        code = exports.UNKNOWN_ERROR;\n    }\n    if (!params) {\n        params = {};\n    }\n    var messageDetails = [];\n    Object.keys(params).forEach(function (key) {\n        try {\n            messageDetails.push(key + '=' + JSON.stringify(params[key]));\n        }\n        catch (error) {\n            messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n        }\n    });\n    messageDetails.push('version=' + '#version');\n    var reason = message;\n    if (messageDetails.length) {\n        message += ' (' + messageDetails.join(', ') + ')';\n    }\n    // @TODO: Any??\n    var error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n    });\n    throw error;\n}\nexports.throwError = throwError;\n/** @hidden */\nfunction checkNew(self, kind) {\n    if (!(self instanceof kind)) {\n        throwError('missing new', exports.MISSING_NEW, { name: kind.name });\n    }\n}\nexports.checkNew = checkNew;\n/** @hidden */\nfunction checkArgumentCount(count, expectedCount, suffix) {\n    if (!suffix) {\n        suffix = '';\n    }\n    if (count < expectedCount) {\n        throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, {\n            count: count,\n            expectedCount: expectedCount,\n        });\n    }\n    if (count > expectedCount) {\n        throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, {\n            count: count,\n            expectedCount: expectedCount,\n        });\n    }\n}\nexports.checkArgumentCount = checkArgumentCount;\n/** @hidden */\nfunction setCensorship(censorship, permanent) {\n    if (_permanentCensorErrors) {\n        throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, {\n            operation: 'setCensorship',\n        });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n}\nexports.setCensorship = setCensorship;\n/** @hidden */\nfunction checkNormalize() {\n    try {\n        // Make sure all forms of normalization are supported\n        ['NFD', 'NFC', 'NFKD', 'NFKC'].forEach(function (form) {\n            try {\n                'test'.normalize(form);\n            }\n            catch (error) {\n                throw new Error('missing ' + form);\n            }\n        });\n        if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error('broken implementation');\n        }\n    }\n    catch (error) {\n        throwError('platform missing String.prototype.normalize', exports.UNSUPPORTED_OPERATION, {\n            operation: 'String.prototype.normalize',\n            form: error.message,\n        });\n    }\n}\nexports.checkNormalize = checkNormalize;\n/** @hidden */\nvar LogLevels = {\n    debug: 1,\n    default: 2,\n    info: 2,\n    warn: 3,\n    error: 4,\n    off: 5,\n};\n/** @hidden */\nvar LogLevel = LogLevels.default;\n/** @hidden */\nfunction setLogLevel(logLevel) {\n    var level = LogLevels[logLevel];\n    if (level == null) {\n        warn('invliad log level - ' + logLevel);\n        return;\n    }\n    LogLevel = level;\n}\nexports.setLogLevel = setLogLevel;\n/** @hidden */\nfunction log(logLevel, args) {\n    if (LogLevel > LogLevels[logLevel]) {\n        return;\n    }\n    console.log.apply(console, args);\n}\n/** @hidden */\nfunction warn() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    log('warn', args);\n}\nexports.warn = warn;\n/** @hidden */\nfunction info() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    log('info', args);\n}\nexports.info = info;\n"},"sourceMaps":{"js":{"version":3,"file":"errors.js","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ## About this package\n *\n * `@harmony-js/crypot` provides a series of functions to deal with keys\n *\n * ## How to use this package\n *\n * ### Create a Harmony Instance\n * ```javascript\n * const { Harmony } = require('@harmony-js/core');\n * const { ChainID, ChainType } = require('@harmony-js/utils');\n *\n * const hmy = new Harmony(\n *   'http://localhost:9500',\n *   {\n *     chainType: ChainType.Harmony,\n *     chainId: ChainID.HmyLocal,\n *   },\n * );\n * ```\n *\n * ### Some examples\n *\n * ```javascript\n * // randomBytes\n * const bytes = hmy.crypto.randomBytes(20);\n * console.log(bytes)\n *\n * // encryptPhrase\n * const myPhrase = hmy.wallet.newMnemonic();\n * const pwd = '1234';\n * hmy.crypto.encryptPhrase(myPhrase, pwd).then((value) => {\n *   console.log(value);\n * })\n *\n * // decryptThePhrase\n * hmy.crypto.encryptPhrase(myPhrase, pwd).then((keystore) => {\n *   hmy.crypto.decryptPhrase(JSON.parse(keystore), pwd).then((value) => {\n *     console.log(value);\n *   })\n * })\n *\n * // generatePrivateKey\n * const privateKey = hmy.crypto.generatePrivateKey();\n * console.log(privateKey)\n *\n * // getPubkeyFromPrivateKey\n * const publicKey = hmy.crypto.getPubkeyFromPrivateKey(privateKey);\n * console.log(publicKey);\n *\n * // getAddressFromPrivateKey\n * const address = hmy.crypto.getAddressFromPrivateKey(privateKey);\n * console.log(address);\n *\n * // getAddressFromPublicKey\n * const address = hmy.crypto.getAddressFromPublicKey(publicKey);\n * console.log(address);\n *\n * // toChecksumAddress\n * const checksumAddr = hmy.crypto.toChecksumAddress(address);\n * console.log(checksumAddr);\n * ```\n *\n * @packageDocumentation\n * @module harmony-crypto\n */\n\n// This file is ported from ether.js/src.ts/errors.ts\n\n// Unknown Error\n/** @hidden */\nexport const UNKNOWN_ERROR = 'UNKNOWN_ERROR';\n\n// Not implemented\n/** @hidden */\nexport const NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';\n\n// Missing new operator to an object\n//  - name: The name of the class\n/** @hidden */\nexport const MISSING_NEW = 'MISSING_NEW';\n\n// Call exception\n//  - transaction: the transaction\n//  - address?: the contract address\n//  - args?: The arguments passed into the function\n//  - method?: The Solidity method signature\n//  - errorSignature?: The EIP848 error signature\n//  - errorArgs?: The EIP848 error parameters\n//  - reason: The reason (only for EIP848 \"Error(string)\")\n/** @hidden */\nexport const CALL_EXCEPTION = 'CALL_EXCEPTION';\n\n// Invalid argument (e.g. value is incompatible with type) to a function:\n//   - argument: The argument name that was invalid\n//   - value: The value of the argument\n/** @hidden */\nexport const INVALID_ARGUMENT = 'INVALID_ARGUMENT';\n\n// Missing argument to a function:\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n/** @hidden */\nexport const MISSING_ARGUMENT = 'MISSING_ARGUMENT';\n\n// Too many arguments\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n/** @hidden */\nexport const UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';\n\n// Numeric Fault\n//   - operation: the operation being executed\n//   - fault: the reason this faulted\n/** @hidden */\nexport const NUMERIC_FAULT = 'NUMERIC_FAULT';\n\n// Insufficien funds (< value + gasLimit * gasPrice)\n//   - transaction: the transaction attempted\n/** @hidden */\nexport const INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';\n\n// Nonce has already been used\n//   - transaction: the transaction attempted\n/** @hidden */\nexport const NONCE_EXPIRED = 'NONCE_EXPIRED';\n\n// The replacement fee for the transaction is too low\n//   - transaction: the transaction attempted\n/** @hidden */\nexport const REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED';\n\n// Unsupported operation\n//   - operation\n/** @hidden */\nexport const UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';\n\n// tslint:disable-next-line: variable-name\n/** @hidden */\nlet _permanentCensorErrors = false;\n// tslint:disable-next-line: variable-name\n/** @hidden */\nlet _censorErrors = false;\n\n// @TODO: Enum\n/** @hidden */\nexport function throwError(message: string, code: string | null | undefined, params: any): never {\n  if (_censorErrors) {\n    throw new Error('unknown error');\n  }\n\n  if (!code) {\n    code = UNKNOWN_ERROR;\n  }\n  if (!params) {\n    params = {};\n  }\n\n  const messageDetails: string[] = [];\n  Object.keys(params).forEach((key) => {\n    try {\n      messageDetails.push(key + '=' + JSON.stringify(params[key]));\n    } catch (error) {\n      messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n    }\n  });\n  messageDetails.push('version=' + '#version');\n\n  const reason = message;\n  if (messageDetails.length) {\n    message += ' (' + messageDetails.join(', ') + ')';\n  }\n\n  // @TODO: Any??\n  const error: any = new Error(message);\n  error.reason = reason;\n  error.code = code;\n\n  Object.keys(params).forEach((key) => {\n    error[key] = params[key];\n  });\n\n  throw error;\n}\n\n/** @hidden */\nexport function checkNew(self: any, kind: any): void {\n  if (!(self instanceof kind)) {\n    throwError('missing new', MISSING_NEW, { name: kind.name });\n  }\n}\n\n/** @hidden */\nexport function checkArgumentCount(count: number, expectedCount: number, suffix?: string): void {\n  if (!suffix) {\n    suffix = '';\n  }\n  if (count < expectedCount) {\n    throwError('missing argument' + suffix, MISSING_ARGUMENT, {\n      count,\n      expectedCount,\n    });\n  }\n  if (count > expectedCount) {\n    throwError('too many arguments' + suffix, UNEXPECTED_ARGUMENT, {\n      count,\n      expectedCount,\n    });\n  }\n}\n\n/** @hidden */\nexport function setCensorship(censorship: boolean, permanent?: boolean): void {\n  if (_permanentCensorErrors) {\n    throwError('error censorship permanent', UNSUPPORTED_OPERATION, {\n      operation: 'setCensorship',\n    });\n  }\n\n  _censorErrors = !!censorship;\n  _permanentCensorErrors = !!permanent;\n}\n\n/** @hidden */\nexport function checkNormalize(): void {\n  try {\n    // Make sure all forms of normalization are supported\n    ['NFD', 'NFC', 'NFKD', 'NFKC'].forEach((form) => {\n      try {\n        'test'.normalize(form);\n      } catch (error) {\n        throw new Error('missing ' + form);\n      }\n    });\n\n    if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error('broken implementation');\n    }\n  } catch (error) {\n    throwError('platform missing String.prototype.normalize', UNSUPPORTED_OPERATION, {\n      operation: 'String.prototype.normalize',\n      form: error.message,\n    });\n  }\n}\n\n/** @hidden */\nconst LogLevels: { [name: string]: number } = {\n  debug: 1,\n  default: 2,\n  info: 2,\n  warn: 3,\n  error: 4,\n  off: 5,\n};\n/** @hidden */\nlet LogLevel = LogLevels.default;\n\n/** @hidden */\nexport function setLogLevel(logLevel: string): void {\n  const level = LogLevels[logLevel];\n  if (level == null) {\n    warn('invliad log level - ' + logLevel);\n    return;\n  }\n  LogLevel = level;\n}\n\n/** @hidden */\nfunction log(logLevel: string, args: [any?, ...any[]]): void {\n  if (LogLevel > LogLevels[logLevel]) {\n    return;\n  }\n  console.log.apply(console, args);\n}\n\n/** @hidden */\nexport function warn(...args: [any?, ...any[]]): void {\n  log('warn', args);\n}\n\n/** @hidden */\nexport function info(...args: [any?, ...any[]]): void {\n  log('info', args);\n}\n"]}},"error":null,"hash":"7f37e7c3e919ae0525c5b5446c96cd6b","cacheData":{"env":{}}}